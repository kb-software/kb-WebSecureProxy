//#define DEBUG_120118_01                     /* insure++ lost block     */
//adsl_radius_group_w1->imc_references++;  /* references to this radius-group */
//#define D_DIAGNOSE_01
//#define TRY_090425                        /* 04.05.12 - PPP          */
//#define B080322
//#define TRACEHL1
#ifdef DO_DEBUG_VERS
#define TRACEHL1
#define TRACE_LIGW_01                       /* 22.01.07 KB */
#define TRACEHL_STOR_1                      /* 30.01.09 KB */
#endif
//#define TRACEHL1
#define CSSSL_060620
#ifdef TODO
--- 26.12.14 KB ----
<max-sockets-per-thread>
--- 10.08.14 KB ----
<external-random-generator>
  YES /
/*|   <domain-socket-name> name of FIFO                               |*/
- 4 x multi-funktions-feld - Google Authenticator - WhatsApp
--- 20.06.14 KB ----
    <server-data-hook>
      <library-file-name>xltsdh05-d\xltsdh05.dll</library-file-name>
    </server-data-hook>
- use:
      <integrated-function>name
--- 20.05.14 KB ----
<user>
- E-Mail-Adresse
- multi-funktions-feld - Google Authenticator - WhatsApp
- enum
  - password
  - Google Authenticator password
  - Google Authenticator multi-funktions-feld
  - E-Mail
  - WhatsApp
--- 02.05.14 KB ----
multiple <gate-in-ineta>
<PPP-ineta-pool>
achrs_node_rpi_ineta
<network>
  <xyz>1.2.3.0/24
  -- or --
  <network>1.2.3.0/24
  <exclude-network-address>YES/NO
  <exclude-broadcast-address>YES/NO
</network>
--- 28.03.14 KB ----
<general>
  boc_auth_hide_msg
  <authentication-hide-message>
--- 06.02.14 KB ----
<general>
  <cma-timeout-local>
  <cma-timeout-cluster>
--- 15.10.13 KB ----
<general>
  <authentication-lockout>
    <duration-time> (seconds)
    <threshold> (number of tries)
    <reset-wait-time> (seconds)
--- 13.10.13 KB ----
<general>
  <print-fingerprint-in-report>
--- 10.05.13 KB ----
<connection>
  <krb5-keytab-file>
  <domain-information>
  <do-not-check-SSTP-channel-bindings>YES/NO - for SSTP
<general>
  <swap-file-name> - Unix multiple
  <max-size-swap-in-memory>
<RPC-DC>
--- 20.11.12 KB ---
<max-utility-thread>
--- RSA key file
--- Tageszeit Log
--- Unix PID in syslog
--- 11.09.12 KB ---
cluster
keepalive
HOB-TUN strategy install driver
RSA keys for anti-split-tunneling
--- 31.08.12 KB ---
<L2TP-gateway>
  PPP-charset
     "ASCII-850",
     "ANSI-819",
     "UTF-8"
--- 28.08.12 KB ---
<general>
  <TCP-KEEPALIVE>YES/NO
---
cluster
  timeout receive
--- 27.08.12 KB ---
struct dsd_cluster_main
   BOOL       boc_display_load;             /* display load every time calculated */
--- 03.05.12 KB ---
HTTP-server-library
at <connection>
---
<user>
  <password-plain>
  <password-encrypted>
<general>
  <security-token-plain>
  <security-token-encrypted>
<L2TP-gateway>
  <authenticate-use-password-plain>
  <authenticate-use-password-encrypted>
--- 02.01.12 KB ---
general imc_vdi_sign_on_time configurable
--- 01.01.12 KB ---
wake-on-lan-relay-ineta also IPV6
--- 22.12.11 KB ---
radius-group Kerberos-5-KDC LDAP-group
normally, without dynamic-..., only one entry can be defined
with dynamic-..., multiple entries can be defined
if dynamic-... is set and no entry is defined,
all global entries are used
--- 03.12.11 KB ---
<connection>
  HTTP-redirect-library
  Kerberos Entry Server Name - principal
Kerberos Ports
  port-ticket 88
  port-password-change 464
--- 21.10.11 KB ---
LDAP typen all in conf, no error message when not referenced, option in general
LDAP attribute <internal>YES/NO
Kerberos replay cache YES/NO in general
--- 23.09.11 KB ---
passworte auch base64
--- 22.09.11 KB ---
KDC TCP port für Passwort ändern
--- 16.09.11 KB ---
- cluster this
  <deny-not-configured>YES/NO
--- 12.09.11 KB ---
- cluster this
  <group>
  <location>
in Unix: (multiple) nur wenn listen-gateway
  <alternate-TCP-port>
--- 07.09.11 KB ---
  <security-token>
--- 20.06.11 KB ---
<general>
  <TCP-sndbuf>
  <TCP-rcvbuf>
--- 08.06.11 KB ---
<connection>
  <authentication-library-object>
  <krb5-cred-file>
  - oder -
  <Kerberos-5-credentials-file>
<L2TP-gateway>
  <PPP-charset> ASCII-850 / ANSI-819 / UTF-8

--- 28.04.11 KB ---
<allow-wsp-trace>
--- 04.07.10 KB ---
<connect-round-robin>
??? client-side-SSL
<disable-SDH-HOB-RDP-EXT1>
TUN adapter INETA, in Unix multiple
SNMP TRAP
  target, multihomed,
  multihomed with default
SNMP-TRAP-level
RTP UDP (name), INETA and port, in Unix multiple
--- 02.06.06 KB ---
  clear-used-memory
Unix:
  file-process-id / <pid-file>
  listen-relay ???
  ??? file-name-format ???
Firewall
--- 03.06.06 KB ---
event-log with name
--- 16.09.06 KB ---
Listen-Gateway:
pipe-name
shared-secret
--- 17.09.07 KB ---
B070917
set dsl_cluster_remote.dsc_bind_multih
      main adsc_listen_ineta
#endif
#ifdef ONLY_COMMENT
   "TUN-adapter-ineta",                Windows only one / Unix multiple
   "TUN-adapter-use-interface-ineta",  W+U
   "strategy-inst-win-driver",         optional, Windows only choice
   "TCP-connect-timeout-millisec",     optional, default in Windows and Unix 3000
   "TCP-connect-number-of-try",        optional, small number, 2 - 5, W+U
   "PPP-server",
   "PPP-ineta-pool",                   optional, multiple, do not overlap, W+U
   "TUN-use-ineta",                    optional, multiple ranges possible, W+U
   "appl-use-tcp-source-port",         optional, multiple ranges possible, W+U
   "appl-use-random-tcp-source-port"   optional, YES/NO only once, W+U
#endif
#ifdef B060719
#define TRACEHL1
#endif
#define HLOG_XYZ1 0
#define NEW_HLSE_0502
#ifdef DEBUG_050628
#define TRACEHL_050630
#define XYZ1
#define XYZ2
#endif
//#define TRACEHL_050419
//#define TRACEHL_050427
#ifdef XYZ1
#define TRACEHL_050207
#define TRACEHL1
#define TRACEHL_P_050118
#define TRACEHL_T_050130
#define TRACEHL_T_050131
#define TRACEHL3
#endif
#define TRY_041111
#define NEW050421A
#ifdef XYZ2 /* PROD = Release 22.02.05 KB */
#ifndef TRACEHL_P_050118
#define TRACEHL_P_050118 /* error 23.02.05 KB */
#endif
#define CHECK_THR_1
//#define TRACEHL1
#define TRACEHLP
#define TRACEHLY
#define D_NO_DUMP
//#define TRACE_SL1
#define TRACE_PRINTF
#endif
#ifdef TRACEHL_CMA_050413
#ifndef TRACE_PRINTF
#define TRACE_PRINTF
#endif
#endif
#ifdef TRACEHL_050419
#ifndef TRACE_PRINTF
#define TRACE_PRINTF
#endif
#endif
#ifdef XYZ3 /* only for test proc_data suspend 01.03.05 KB */
#define CHECK_050301
#endif
#ifdef TO_DO_050223
1. Client-side-SSL
2. Error Messages RADIQ1
3. Blade-Control Reload-Configuration
4. Numbers of Error Messages
5. Authentication Interface Version 2 hlwsat2.h with XML
6. m_aux: get authentication - soved 01.03.05 KB
7. WTS + Blade Load Balancing new: double entries, IPV6,
   when list at client: check if connect request came from list
   (otherwise security hole)
8. <server-list> <server-entry> <protocol> required, if not error message - was already included, 02.03.05 KB
#endif
/*+-------------------------------------------------------------------+*/
/*|                                                                   |*/
/*| PROGRAM NAME: xsipgw08-conf.cpp                                   |*/
/*| -------------                                                     |*/
/*|  IP-Gateway Telnet with SSL                                       |*/
/*|  WebSecureProxy for Windows and Unix                              |*/
/*|  read XML-file with configuration parameters                      |*/
/*|  KB 29.03.00                                                      |*/
/*|  Win64 KB 24.01.05                                                |*/
/*|                                                                   |*/
/*| COPYRIGHT:                                                        |*/
/*| ----------                                                        |*/
/*|  Copyright (C) HOB electronic 2000                                |*/
/*|  Copyright (C) HOB electronic 2001                                |*/
/*|  Copyright (C) HOB electronic 2002                                |*/
/*|  Copyright (C) HOB electronic 2003                                |*/
/*|  Copyright (C) HOB 2004                                           |*/
/*|  Copyright (C) HOB 2005                                           |*/
/*|  Copyright (C) HOB Germany 2006                                   |*/
/*|  Copyright (C) HOB Germany 2007                                   |*/
/*|  Copyright (C) HOB Germany 2008                                   |*/
/*|  Copyright (C) HOB Germany 2009                                   |*/
/*|  Copyright (C) HOB Germany 2010                                   |*/
/*|  Copyright (C) HOB Germany 2011                                   |*/
/*|  Copyright (C) HOB Germany 2012                                   |*/
/*|  Copyright (C) HOB Germany 2013                                   |*/
/*|  Copyright (C) HOB Germany 2014                                   |*/
/*|  Copyright (C) HOB Germany 2016                                   |*/
/*|                                                                   |*/
/*| REQUIRED PROGRAMS:                                                |*/
/*| ------------------                                                |*/
/*|  MS Visual Studio 2005 (VC8)                                      |*/
/*|  XERCES 2.6.0                                                     |*/
/*|                                                                   |*/
/*| EXPECTED INPUT:                                                   |*/
/*| ---------------                                                   |*/
/*| The first parameter (when called from the command prompt)         |*/
/*| gives the name of the .XML-file.                                  |*/
/*|                                                                   |*/
/*| The XML-file contains different sections.                         |*/
/*| The most important of these sections, where also one is mandatory,|*/
/*| is the section <connection>.                                      |*/
/*|                                                                   |*/
/*| The WebSecureProxy has a one to one relationship between          |*/
/*| a connection with a client (half-session), and a connection with  |*/
/*| a corresponding server (other half-session).                      |*/
/*| The design of the WebSecureProxy does not allow one half-session  |*/
/*| with a client and multiple half-sessions with one or many servers |*/
/*|                                                                   |*/
/*| In the section <connection>, there may be all the necessary       |*/
/*| configuration data for both half-sessions.                        |*/
/*| But it is also possible, that a half-session with a client is     |*/
/*| described (and started), and the client chooses one of many       |*/
/*| servers; these servers would then be defined in a <server-list>.  |*/
/*| In a <server-list>, there are one or many <server-entry>,         |*/
/*| each <server-entry> describing a possible server the client wants |*/
/*| to connect to.                                                    |*/
/*|                                                                   |*/
/*| So all parameters for a client half-session are described in      |*/
/*| <connection>, parameters for the server half-session may either   |*/
/*| be described in <connection> directly, or in <server-entry>       |*/
/*| in a <server-list>.                                               |*/
/*|                                                                   |*/
/*| In each of the sections <connection>, <server-list> and           |*/
/*| <server-entry>, there is a mandatory sub-entry <name>.            |*/
/*|                                                                   |*/
/*| The following parameters are for the client half-session; these   |*/
/*| parameters can only be specified in <connection>:                 |*/
/*| <gateport>       port of the gateway                              |*/
/*| <backlog>        backlog for listen                               |*/
/*| <gate-in-ineta>  IP address for input to gateway, option          |*/
/*| <authentication-radius> optional, Radius Servers                  |*/
/*|   <radius-name>  name of Radius Server Definition                 |*/
/*|   <configuration-desktop> where to find the desktop configuration |*/
/*|                  attribute-vendor-specific-1  in attr vendor spec |*/
/*|                  attribute-116  in attribute 116                  |*/
/*|   <send-certificate> if and how to send the client certificate.   |*/
/*|                  attribute-vendor-specific-hob-1  in HOB attr vsp |*/
/*| <authentication-library> optinal HLWSPAT2 library                 |*/
/*|                  with the following parameters:                   |*/
/*|   <library-file-name> name of library in file-system              |*/
/*|   <configuration-section> parameter for configuration of HLWSPAT2 |*/
/*| <select-server>  optional, names of server-lists are specified    |*/
/*|   <server-list-name> name of server-list, see <server-list>       |*/
/*| <user-list>      list of user groups for authentication           |*/
/*| <language>       language of authentication dialogue              |*/
/*| <max-session>    maximum number of sessions, option               |*/
/*| <threshold-session>  threshold (alert) number of sessions, option |*/
/*| <Kerberos-5-KDC> optional reference Kerberos definition           |*/
/*| <LDAP-service>   optional reference LDAP service definition       |*/
/*| <disable-naegle-send-client>  disable naegle algorithm TCP        |*/
/*| <disable-naegle-send-server>  disable naegle algorithm TCP        |*/
/*| <SSL-config-file>   name of SSL configuration file                |*/
/*| <SSL-certdb-file>   name of SSL certificate database file         |*/
/*| <SSL-password-file> name of SSL password file (password encrypted)|*/
/*|                                                                   |*/
/*| The following parameters are for the server half-session; these   |*/
/*| parameters can be specified in <connection> or in <server-list>:  |*/
/*| <function>       DIRECT/RDP/ICA/WTSGATE/VDI-WSP-GATE/             |*/
/*|                  PASS-THRU-TO-DESKTOP/SELECT-SOCKS5-HTTP/         |*/
/*|                  HOB-PPP-T1/SSTP/L2TP                             |*/
/*|                  special build-in function                        |*/
/*|                  if nothing specified, DIRECT is default          |*/
/*|                  <SELECT-SOCKS5-HTTP> cannot be specified         |*/
/*|                    in <server-list>; this is the only possible    |*/
/*|                    <function> in <connection> when the client     |*/
/*|                    chooses one of many servers from <server-list> |*/
/*|                  RDP and ICA not possible in Unix environment     |*/
/*| <protocol>       protocol of this server, optional or mandatory   |*/
/*| <serverineta>    IP address of the host to be connected           |*/
/*| <serverport>     port of the host to be connected                 |*/
/*| <DNS-lookup-before-connect> do DNS loopup before each connect     |*/
/*| <gate-out-ineta> IP address for output from gateway, option,      |*/
/*|                  multihomed                                       |*/
/*| <connect-round-robin>  if multiple targets for DNS-lookup,        |*/
/*|                        do connect in random order,                |*/
/*|                        default sequential starting from first     |*/
/*| <wts-server-list> ...                                             |*/
/*|   <wts-server-url> URL (IP address and port) of LB function       |*/
/*| <wts-broadcast-port>   port for broadcast LB function             |*/
/*| <wts-check-name> YES/NO optional, check name SSL / WTS            |*/
/*| <blade-server-list> ...                                           |*/
/*|   <blade-server-url> URL (IP address and port) of LB function     |*/
/*| <blade-br-port>  port for broadcast LB function                   |*/
/*| <blade-check-name> YES/NO optional, check name SSL / BLADE        |*/
/*| <hcproxauth>     YES/NO optional, HOBCOM proxy communication      |*/
/*| <server-data-hook> sub-section to load a server-data-hook         |*/
/*|   <library-file-name> name of DLL to be loaded                    |*/
/*|   <configuration-section> sub-section with configuration data     |*/
/*|                           for this server-data-hook               |*/
/*| <target-filter>  option, check outgoing Connection-Requests       |*/
/*| <LDAP-service>   optional reference LDAP service definition       |*/
/*| <disable-naegle-send-client>   disable naegle algorithm TCP       |*/
/*| <disable-naegle-send-server>   disable naegle algorithm TCP       |*/
/*| <option-connect-other-server>  option allow connect other server  |*/
/*|                                for example WTS session directory  |*/
/*| <disable-SDH-HOB-RDP-EXT1>     disable automaticly integrated     |*/
/*|                                Server-Data-Hook,                  |*/
/*|                                only for protocol HOB-RDP-EXT1     |*/
/*|                                foe example for VNC / RFB          |*/
/*|                                                                   |*/
/*| The parameter <timeout> may be specified in <connection> and      |*/
/*| <server-list> for both half-sessions.                             |*/
/*| The parameter <timeout> specifies the timeout after n seconds of  |*/
/*| inactivity; the connection is ended then.                         |*/
/*| If different parameters <timeout> are defined for the two         |*/
/*| corresponding half-sessions, the lower value is choosen.          |*/
/*|                                                                   |*/
/*| The XML-file may contain a section <general>                      |*/
/*| with the following values:                                        |*/
/*| Parameters for Windows and Unix:                                  |*/
/*| <reload-configuration> YES/NO (NO default), reload possible       |*/
/*| <max-poss-work-thread> number of work threads maximum possible    |*/
/*|                  0 = default                                      |*/
/*| <max-active-work-thread> number of work threads maximum active    |*/
/*|                  0 = default                                      |*/
/*| <prio-work-thread> priority of work threads                       |*/
/*| <prio-process>   priority of process                              |*/
/*| <report-intv>    interval in seconds to report statistics         |*/
/*| <wake-on-lan-relay-ineta>  optional WOL relay INETA               |*/
/*|                  may contain the port, may occure multiple times  |*/
/*| <wake-on-lan-port>  port of wake-on-lan                           |*/
/*| <time-cache-disk-file> time (sec) a file stays in cache           |*/
/*| <time-reload-disk-file> time (sec) check reload of file in cache  |*/
/*| <disk-file-size-max> maximum size of one single file, MB, GB      |*/
/*| <disk-file-storage>  maximum size of cache, MB, GB                |*/
/*| <network-statistic-level> [1 - 9] report stat about network usage |*/
/*| <TCP-sndbuf>nnn - K                                               |*/
/*| <TCP-rcvbuf>nnn - K                                               |*/
/*| $$UU$$                                                            |*/
/*| <TCP-keepalive>YES/NO                                             |*/
/*| <clear-used-memory> YES/NO (NO default)                           |*/
/*| $$UU$$                                                            |*/
/*| <size-swap-in-memory>                                             |*/
/*| $$UU$$                                                            |*/
/*| <max-swap-size>                                                   |*/
/*| $$UU$$                                                            |*/
/*| <swap-file>                                                       |*/
/*| $$UU$$                                                            |*/
/*| <max-util-thread>                                                 |*/
/*| $$UU$$                                                            |*/
/*| <signature-credentials-file>                                      |*/
/*| $$UU$$                                                            |*/
/*| <time-of-day-mark-log>                                            |*/
/*| Windows-Parameters:                                               |*/
/*| <prot-event-log> YES/NO (NO default)                              |*/
/*| <event-server-name> Server Name for RegisterEventSource           |*/
/*| <event-source-name> Source Name for RegisterEventSource           |*/
/*| <windows-core-dump> parameters for Windows core dump              |*/
/*|   <diskdirfd>    disk-directory for Dumps                         |*/
/*|   <ineta-mgw>    INETA mail-gateway                               |*/
/*|   <email-rcpt>   e-mail recipient                                 |*/
/*|   <email-sender> e-mail sender                                    |*/
/*|   <password>     password                                         |*/
/*| Unix-Parameters:                                                  |*/
/*| <prot-syslog>    YES/NO write protocol to syslog                  |*/
/*| $$UU$$                                                            |*/
/*| <prot-include-pid> YES/NO (NO default)                            |*/
/*| <pid-file>       name of file to write PID (process Id) to        |*/
/*| <listen-error>   ignore/wait/abend                                |*/
/*| <listen-gateway> YES/NO (NO default)                              |*/
/*|   may also contain:                                               |*/
/*|   <domain-socket-name> name of FIFO                               |*/
/*|   <shared-secret>      shared secret / password                   |*/
/*|                                                                   |*/
/*| If there is any function VDI-WSP-GATE, the XML-file must contain  |*/
/*| a section <blade-control> with the following values:              |*/
/*| <sign-on-time>   time maximum required to sign on                 |*/
/*| <trimming-in-ineta> optional, for multihomed                      |*/
/*| <trimming-in-port> optional, input for twin trimming              |*/
/*| <trimming-twin-list> ...                                          |*/
/*|   <trimming-twin-url> URL, IP-Address and port of twin            |*/
/*|                                                                   |*/
/*| For RADIUS authentication, the radius server definitions are in   |*/
/*| sections <radius-server>. These sections contain the following:   |*/
/*| <name>           name of this definition                          |*/
/*| <gate-ineta>     optional, for multi-homed                        |*/
/*| <radius-ineta>   INETA of Radius Server                           |*/
/*| <radius-port>    port of Radius Server                            |*/
/*| <timeout>        timeout in seconds when the server does not resp |*/
/*| <shared-secret>  shared secret of this Radius Server              |*/
/*|                                                                   |*/
/*| For authentication, there can also be user groups.                |*/
/*| Each user group builds a section <user-group>.                    |*/
/*| A user group can contain the values:                              |*/
/*| <user>           definition of user                               |*/
/*|   <name>         name of user, not case-sensitive                 |*/
/*|   <password>     optional, password of user, case-sensitive       |*/
/*|   <privileges-mask> hexa parameters with privileges               |*/
/*|   <desktop-ineta> optional, INETA of desktop                      |*/
/*|   <desktop-port> optional, port of desktop                        |*/
/*|   <gate-out-ineta> opt, for multi-homed to reach desktop of user  |*/
/*|   <mac-address>  opt, mac-address for wake-on-lan of desktop      |*/
/*|   <wait-connect> opt, max. time in seconds to wait for connection |*/
/*| <gate-out-ineta> opt, for multi-homed to reach desktops all users |*/
/*| <select-server>  opt, additional server-list entries these users  |*/
/*|   <server-list-name> name of server-list, see <server-list>       |*/
/*| <privileges-mask> hexa parameters with privileges                 |*/
/*| <target-filter>  opt, check outgoing Connection-Requests          |*/
/*|                                                                   |*/
/*| The WebSecureProxy supports OCSP                                  |*/
/*| (Online Certificate Status Protocol) as an option.                |*/
/*| If OCSP is used, the parameters are defined in <OCSP-section>.    |*/
/*| The <OCSP-section> may contain the following parameters:          |*/
/*| <OCSP-URL>       URL of OCSP-responder                            |*/
/*| <gate-ineta>     optional, for multi-homed                        |*/
/*| <OCSP-ineta>     overwrite INETA of OCSP-responder                |*/
/*| <OCSP-port>      overwrite port of OCSP-responder                 |*/
/*| <timeout>        timeout for TCP receive operations               |*/
/*| <wait-retry>     time in seconds when a male-functioning          |*/
/*|                  OCSP-responder is used again                     |*/
/*|                                                                   |*/
/*| When the WSP is used as a gateway to a webserver,                 |*/
/*| HTTPS may be used, and client side SSL is needed.                 |*/
/*| This is configued with the following parameters:                  |*/
/*| <client-side-SSL>                                                 |*/
/*|   <SSL-config-file>   name of SSL configuration file              |*/
/*|   <SSL-certdb-file>   name of SSL certificate database file       |*/
/*|   <SSL-password-file> name of SSL password file (password encry.) |*/
/*|   <usage-DN>     NOTHING/CHECK-URL optional, parameter to check   |*/
/*|                    distinguished name from certificate            |*/
/*|                                                                   |*/
/*| For certain functions, a build-in Firewall is checked             |*/
/*| for outgoing connections.                                         |*/
/*| This is used for:                                                 |*/
/*|   1. server-list entries with Server-Data-Hook,                   |*/
/*|      mostly with <protocol> HTTP                                  |*/
/*|   2. for <protocol> HOB-RDP-EXT1, when the Session-Directory      |*/
/*|      is used                                                      |*/
/*|   3. for HOB-PPP-T1 and SSTP                                      |*/
/*| The build-in Firewall is defined as Sections <target-filter>.     |*/
/*| Each Target-Filter has a <name> and the following Sub-Sections:   |*/
/*| <allow> and <deny>                                                |*/
/*| If a Connection-Request does not fulfill on of the <allow>-       |*/
/*| criteria, it falls thru and the Connection-Request is not         |*/
/*| allowed.                                                          |*/
/*| This also means, the last Sub-Section always has to be <allow>.   |*/
/*| The Sub-Sections may contain the following parameters:            |*/
/*|   <ineta>             INETA IPV4 or IPV6,                         |*/
/*|                         optionally with prefix like /24           |*/
/*|   <DNS-name>          DNS-name, may contain wild-card characters  |*/
/*|   <protocol>          may be TCP, UDP, ICMP or hexadecimal value  |*/
/*|                       protocol may be specified multiple times    |*/
/*|   <TCP-port>          TCP-Port-Number; this parameter may be      |*/
/*|                         specified multiple times                  |*/
/*|   <UDP-port>          UDP-Port-Number; this parameter may be      |*/
/*|                         specified multiple times                  |*/
/*| also <option-connect-other-server>YES has to be defined,          |*/
/*|   otherwise no dynamic connection is allowed                      |*/
/*|                                                                   |*/
/*| HOB WebSecureProxies can run in a Cluster.                        |*/
/*| Running in a Cluster means all WebSecureProxies are connected     |*/
/*| thru TCP connections. Over this TCP connection, information for   |*/
/*| load-balancing is exchanged, the internal database CMA = common   |*/
/*| memory area is replicated and information for VDI-WSP is          |*/
/*| exchanged.                                                        |*/
/*| This is configued with the following parameters:                  |*/
/*| <cluster>             section with configuration for the cluster  |*/
/*|   <load-balancing-diff>  value smaller than 10000 for the         |*/
/*|                       difference in the calculated load when      |*/
/*|   <load-balancing-formula>  formula to calculate the current load |*/
/*|   <interval-load-balancing-probe>  interval in seconds how often  |*/
/*|                       the current load is calculated and          |*/
/*|                       exchanged with the other members of the     |*/
/*|                       cluster                                     |*/
/*|   $$UU$$                                                          |*/
/*|   <display-load>                                                  |*/
/*|   $$UU$$                                                          |*/
/*|   <timeout-receive-millisec-all>  timeout in milliseconds         |*/
/*|   <time-retry-connect>  time in seconds when a connect is retried |*/
/*|                       when no connection is currently established |*/
/*|   <cluster-entry>     sub-section describing the network          |*/
/*|                       resources used by the cluster members,      |*/
/*|                       including this WebSecureProxy               |*/
/*| The Sub-Sections for cluster-entries contain the following        |*/
/*| parameters:                                                       |*/
/*|   <name>              name used in messages                       |*/
/*|   <type>              either LOCAL or REMOTE                      |*/
/*|   <TCP-port>          TCP port used, either for listen in LOCAL   |*/
/*|                       or connect in REMOTE                        |*/
/*|   <gate-ineta>        local INETA for multihomed                  |*/
/*|   <remote-ineta>      INETA for connect to REMOTE                 |*/
/*|   <timeout-millisec>  timeout in milliseconds when no reply was   |*/
/*|                       received after sending a query              |*/
/*|                       only used in type REMOTE                    |*/
/*|   $$UU$$                                                          |*/
/*|   <timeout-receive-millisec>  timeout in milliseconds             |*/
/*|                                                                   |*/
/*| <raw-packet-interface>                   .                        |*/
/*|   <TUN-adapter-ineta>                                             |*/
/*|   <TUN-adapter-use-interface-ineta>                               |*/
/*|   <TCP-connect-timeout-millisec>                                  |*/
/*|   <TCP-connect-number-of-try>                                     |*/
/*|   <PPP-server>                                                    |*/
/*|   <PPP-ineta-pool>                                                |*/
/*|   <TUN-use-ineta>                                                 |*/
/*|   <appl-use-tcp-source-port>                                      |*/
/*|   <appl-use-random-tcp-source-port>                               |*/
/*|   $$UU$$                                                          |*/
/*|   <strategy-inst-win-driver>                                      |*/
/*|      ied_siwd_no_inst_uninst,                 -- no install or uninstall */
/*|      ied_siwd_only_inst,                      -- only install when needed */
/*|      ied_siwd_uninst_startup,                 -- uninstall at startup    */
/*|      ied_siwd_uninst_all                      -- uninstall all possible  */
/*|      no-install-or-uninstall                                      |*/
/*|      only-install-when-needed                                     |*/
/*|      uninstall-at-startup                                         |*/
/*|      uninstall-all-possible                                       |*/
/*| <L2TP-gateway>                                                    |*/
/*|   <serverineta>                                                   |*/
/*|   <serverport>                                                    |*/
/*|   <gate-ineta>                                                    |*/
/*|   $$UU$$                                                          |*/
/*|   <authenticate-use-charset>                                      |*/
/*|   <authenticate-use-userid>                                       |*/
/*|   <authenticate-use-password-plain>                               |*/
/*|   <authenticate-use-password-encrypted>                           |*/
/*|                                                                   |*/
/*|                                                                   |*/
/*| EXPECTED OUTPUT:                                                  |*/
/*| ----------------                                                  |*/
/*|                                                                   |*/
/*| ATTENTION:                                                        |*/
/*| ---------------                                                   |*/
/*| The parameter <timeout> cannot be specified exactly.              |*/
/*| Because of performance reasons, it may take up to double          |*/
/*| the time till a connection times out.                             |*/
/*|                                                                   |*/
/*+-------------------------------------------------------------------+*/

/**
  This program parses the XML configuration file.
  First, the section <general> is parsed.
  With this parameters, certains parts of the WebSecureProxy
  are then started.
  Afterwards, other configuration sections are parsed,
  in an order so that references can be resolved.
*/

#ifdef HL_SOLARIS
#define D_XML_1
#define HL_IPV6
#endif
#ifdef HL_HPUX
#define D_XML_1
#define HL_IPV6
#endif
#ifdef HL_AIX
#define D_XML_1
#define HL_IPV6
#endif
#ifdef HL_LINUX
#define D_XML_1
#define DEF_TSYNC /* 07.06.05 KB */
#endif
//define HL_SPECIAL_OFFER_CEBIT_04 5
//#define HL_IPV6
/* define TRACEHL1 */
/* define TRACEWSAT */
#ifdef TRACEHL1
#define TRACEHLB
#ifndef TRACEHLP
#define TRACEHLP
#endif
#endif

#define DEF_SNMP_TRAP_PORT 162

#define MAC_XML_LINENO( x ) ((int) ((dsd_xml_element_1*) x)->m_get_line())
#define MAC_XML_COL( x ) ((int) ((dsd_xml_element_1*) x)->m_get_column())

/*+-------------------------------------------------------------------+*/
/*| System and library header files.                                  |*/
/*+-------------------------------------------------------------------+*/

#include <iostream>
#include <ostream>
#include <fstream>

using namespace std;

#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef XYZ2
#include <conio.h>
#endif
#include <time.h>
#ifdef HL_UNIX
#include <fcntl.h>
#include <poll.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
//#include <sys/stropts.h>
#include <errno.h>
#include <arpa/inet.h>
#include <netdb.h>
//#include <xti.h>
#ifndef HL_LINUX
#include <unistd.h>
#endif
#include <sys/types.h>
#ifdef HL_OPENUNIX
#include <rpc/types.h>
#endif
#include <sys/ipc.h>
#include <sys/sem.h>
#ifdef HL_LINUX
#include <sys/time.h>
#ifdef B120306
#include <pth.h>
#endif
#ifdef OLD01
#include <LiS/sys/xti_ip.h>
#endif
#endif
#include <limits.h>
#include <dlfcn.h>
#include <sys/uio.h>
#include "hob-unix01.h"
#include "hob-xslhcla1.hpp"
#include "hob-thread.hpp"
#endif
#ifndef HL_UNIX
#include <wchar.h>
#include <winsock2.h>
#ifdef HL_IPV6
#include <ws2tcpip.h>
//#include <wspiapi.h>
#endif
#include <hob-wtspo1.h>
#endif
#include <hob-xslunic1.h>
#ifdef XYZ2
//#define EXT_GR_850_TO_819
#include <HLTABAW2.h>
#endif
#ifdef XYZ2
#include <hltabb64.h>
#endif
#ifdef XYZ2
#include <hobmsg01.h>
#include <hwtss1perf.h>
#include "HLWSAT1.H"
#endif
#ifndef HL_UNIX
#ifdef OLD01
#include <HCTHREAD.HPP>
#endif
#include <hob-thread.hpp>
#include <iswcord1.h>
#endif
#include "hob-wspat3.h"
#include <hob-ssl-01.h>
#ifdef B121009
#include <hob-xshlse03.h>
#ifdef CSSSL_060620
#include <hob-xshlcl01.h>
#endif
#endif
#include <hob-xsrerrm1.h>
#define NO_SSL_ERROR_CONTENT
#include "hob-xshlssle.h"
#ifdef B121009
#include "HOBSSLTP.h"
#endif
#ifdef XYZ2
#include <hlwspsu1.h>
#endif

/*+-------------------------------------------------------------------+*/
/*| System and library header files for XERCES.                       |*/
/*+-------------------------------------------------------------------+*/

#ifdef B100518
#define READDISKXML
#include <xercesc/util/PlatformUtils.hpp>
#include <xercesc/parsers/AbstractDOMParser.hpp>
#include <xercesc/dom/DOMImplementation.hpp>
#include <xercesc/dom/DOMImplementationLS.hpp>
#include <xercesc/dom/DOMImplementationRegistry.hpp>
#include <xercesc/dom/DOMBuilder.hpp>
#include <xercesc/dom/DOMException.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMNodeList.hpp>
#include <xercesc/dom/DOMError.hpp>
#include <xercesc/dom/DOMLocator.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/util/BinMemInputStream.hpp>
#else
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/util/XMLString.hpp>
#include <xercesc/dom/DOMNode.hpp>
#include <xercesc/dom/impl/DOMElementImpl.hpp>
#endif
#ifndef HL_UNIX
#include "IBIPGW08-X1.hpp"
#else
#include "xs-xml-frame-01.hpp"
#ifdef OLD01
#ifndef HL_AIX
#include <fstream.h>
#endif
#endif
#endif

/*+-------------------------------------------------------------------+*/
/*| header files for Server-Data-Hook.                                |*/
/*+-------------------------------------------------------------------+*/

#define DEF_HL_INCL_DOM
#include "hob-xsclib01.h"

#define D_INCL_CONF
#define D_INCL_AUX_UDP
#define INCL_GW_ALL
#define INCL_GW_L2TP
#define INCL_GW_LISTEN
#ifdef HL_UNIX
#define D_INCL_OCSP
#include "hob-tcp-sync-01.h"
#endif
#include <hob-netw-01.h>
#include <hob-nblock_acc.hpp>
#ifndef TCPCOMP_V02
#include <hob-tcpco1.hpp>
#endif
#ifdef TCPCOMP_V02
#include <hob-tcpcomp-multi-v02.hpp>
#endif
#include "hob-wsppriv.h"                    /* privileges              */
#include <hob-xslcontr.h>                   /* HOB Control             */
#include <hob-avl03.h>
#include "hob-tun01.h"
#include "hob-xbipgw08-1.h"
#include "hob-xbipgw08-2.h"
//#include "hob-xbipgw08-3.h"

/*+-------------------------------------------------------------------+*/
/*| Predefined constants.                                             |*/
/*+-------------------------------------------------------------------+*/

#define MAX_SYN_W_NO            256
#define MAX_MEM_LOG_32          (4 * 1024 * 1024)
#define MAX_MEM_LOG_64          (64 * 1024 * 1024)
#define DEFAULT_UDP_PORT_L2TP   1701
#define DEF_RADIUS_TEMP_ARRAY   8
#define DEF_KRB5_TEMP_ARRAY     8
#define DEF_LDAP_TEMP_ARRAY     8
#define DEF_CLUSTER_MAX_AUP     16          /* cluster alternate-TCP-port */
#define DEF_MAX_TCP_SND_RCV     (128 * 1024)  /* maximum TCP option value */

#define LEN_INETA_PR_IPV4       15          /* length Internet Address print IPV4 */

#ifndef HL_UNIX
#define D_CHARSET_IP ied_chs_ansi_819       /* ANSI 819                */
#define D_TCP_ERROR WSAGetLastError()
#else
//#define D_CHARSET_IP ied_chs_ascii_850      /* ASCII 850               */
#define D_CHARSET_IP ieg_charset_system
#define D_TCP_ERROR errno
#endif

/*+-------------------------------------------------------------------+*/
/*| C macros for Unicode / UTF-16, format of Xerces                   |*/
/*+-------------------------------------------------------------------+*/

#ifndef HL_UNIX
#define HL_WCSLEN( p ) wcslen( (WCHAR *) p )
#define HL_WCSCMP( p1, p2 ) wcscmp( (WCHAR *) p1, (WCHAR *) p2 )
#define HL_FN_WCSCMP( p1, p2 ) _wcsicmp( (WCHAR *) p1, (WCHAR *) p2 )
#define HL_NAME_WCSCMP( p1, p2 ) _wcsicmp( (WCHAR *) p1, (WCHAR *) p2 )
#define HL_M_CMP_FN m_cmpi_ucs_ucs
#define HL_FN_CHARSET ied_chs_utf_16
#else
#define HL_WCSLEN( p ) m_len_u16z( (HL_WCHAR *) p )
#define HL_WCSCMP( p1, p2 ) m_cmp_u16z_u16z( (HL_WCHAR *) p1, (HL_WCHAR *) p2 )
#define HL_FN_WCSCMP( p1, p2 ) m_cmp_u16z_u16z( (HL_WCHAR *) p1, (HL_WCHAR *) p2 )
#define HL_NAME_WCSCMP( p1, p2 ) m_cmpi_u16z_u16z( (HL_WCHAR *) p1, (HL_WCHAR *) p2 )
#define HL_M_CMP_FN m_cmp_ucs_ucs
#define HL_FN_CHARSET ieg_charset_system
#endif

/* message HWSPXMLC024xxX                                              */
#define DEF_MSG_LISTEN          02400
/* message HWSPXMLC01275X                                              */
#define DEF_MSG_RADIUS          01275

/*+-------------------------------------------------------------------+*/
/*| Function Calls definitions.                                       |*/
/*+-------------------------------------------------------------------+*/

extern "C" void m_rdp1_hlclib01( struct dsd_hl_clib_1 * );
#ifdef NEW_150412
extern "C" void m_rdp_rdg_in_hlclib01( struct dsd_hl_clib_1 * );
extern "C" void m_rdp_rdg_out_hlclib01( struct dsd_hl_clib_1 * );
#endif
#ifndef OLD_1305
extern "C" int m_get_ssl_server_cert_dns_names( void * vpp_config_id, struct dsd_unicode_string *adsrp_ucs_dns_name, int imp_no_dns_name );
#endif

/*+-------------------------------------------------------------------+*/
/*| Internal used structures.                                         |*/
/*+-------------------------------------------------------------------+*/

enum ied_saveconf_def {                     /* type of saved configuration */
   ied_saveconf_none = 0,                   /* nothing defined         */
   ied_saveconf_radius_group,               /* radius-group            */
   ied_saveconf_ldap_s,                     /* LDAP service            */
// to-do 17.12.11 KB ied_saveconf_ldap_s never used
   ied_saveconf_krb5_kdc,                   /* Kerberos-5-KDC          */
   ied_saveconf_service,                    /* service                 */
   ied_saveconf_http_redir_obj,             /* HTTP-redirect-library-object */
   ied_saveconf_plain_http_lib_obj,         /* plain-HTTP-library-object */
   ied_saveconf_hob_wspat3_obj,             /* authentication-library-object */
   ied_saveconf_sdh_obj,                    /* SDH object              */
   ied_saveconf_bgt,                        /* background task         */
   ied_saveconf_l2tp_gw,                    /* L2TP gateway            */
   ied_saveconf_rpi                         /* raw-packet-interface    */
};

struct dsd_save_conf {                      /* save configured item    */
   struct dsd_save_conf *adsc_next;         /* next in chain           */
   DOMNode    *adsc_node;                   /* DOM node                */
   ied_saveconf_def iec_saveconf;           /* type of saved configuration */
};

struct dsd_temp_node {                      /* temporary node          */
   HL_WCHAR   *awcc_value;                  /* value of node           */
   int        iml_line_no;                  /* line number             */
   int        iml_col_no;                   /* column number           */
};

struct dsd_sdh_def_1 {                      /* server data hook defition */
   struct dsd_sdh_def_1 *adsc_next;         /* field for chaining      */
   HL_WCHAR   *awcc_library_name;           /* name of library         */
   DOMNode    *adsc_node_conf;              /* entry configuration-section */
   struct dsd_ext_lib1 *adsc_ext_lib1;      /* external library loaded */
   void *     ac_conf;                      /* return data from conf   */
   struct dsd_sdh_obj_1 *adsc_sdh_obj;      /* server-data-hook-object */
};

struct dsd_hrl_def_1 {                      /* HTTP-redirect-library definition */
   HL_WCHAR   *awcc_library_name;           /* name of library         */
   DOMNode    *adsc_node_def;               /* node definition         */
   DOMNode    *adsc_node_conf;              /* entry configuration-section */
   struct dsd_ext_lib1 *adsc_ext_lib1;      /* external library loaded */
   void *     ac_conf;                      /* return data from conf   */
   struct dsd_hrl_obj_1 *adsc_hrl_obj;      /* definition HTTP-redirect-library-object */
};

struct dsd_phl_def_1 {                      /* plain-HTTP-library definition */
   struct dsd_phl_def_1 *adsc_next;         /* field for chaining      */
   BOOL       boc_valid;                    /* entry is valid          */
   HL_WCHAR   *awcc_library_name;           /* name of library         */
   DOMNode    *adsc_node_def;               /* node definition         */
   DOMNode    *adsc_node_conf;              /* entry configuration-section */
   struct dsd_ext_lib1 *adsc_ext_lib1;      /* external library loaded */
   void *     ac_conf;                      /* return data from conf   */
   struct dsd_phl_obj_1 *adsc_phl_obj;      /* definition plain-HTTP-library-object */
};

struct dsd_domain_info_def_1 {              /* domain-information definition */
   struct dsd_domain_info_def_1 *adsc_next;  /* field for chaining     */
   struct dsd_domain_info_1 *adsc_domain_info;  /* domain information  */
   int        imc_xml_lineno;
   int        imc_xml_col;
};

struct dsd_domain_info_ineta_1 {            /* domain-information INETA */
   struct dsd_domain_info_ineta_1 *adsc_next;  /* field for chaining   */
   int        imc_len;                      /* length text             */
   BOOL       boc_dns;                      /* DNS entry, not dotted   */
   int        imc_xml_lineno;
   int        imc_xml_col;
};

/*+-------------------------------------------------------------------+*/
/*| Internal used classes.                                            |*/
/*+-------------------------------------------------------------------+*/

#ifndef HL_UNIX
class dsd_file_read_1 {                     /* class read input file   */
   public:
     inline BOOL m_readfile( HL_WCHAR *apname,
                             char **aapbuffer, unsigned int *aulpfilelen,
                             DWORD *adwperror ) {
       HANDLE hufi1;                        /* handle for file         */
       BOOL   bcl1;
       BOOL   bcl2;
       ULONG ulcl1;

       *aapbuffer = NULL;
       *aulpfilelen = 0;
       *adwperror = 0;
       hufi1 = CreateFileW( (WCHAR *) apname, GENERIC_READ, FILE_SHARE_READ, 0,
                            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 );
       if (hufi1 == INVALID_HANDLE_VALUE) {
         *adwperror = GetLastError();
         return FALSE;
       }
       *aulpfilelen = GetFileSize( hufi1, NULL );
       if (*aulpfilelen == 0XFFFFFFFF) {
         *adwperror = GetLastError();
         CloseHandle( hufi1 );
         return FALSE;
       }
       *aapbuffer = (char *) malloc( *aulpfilelen );
       bcl1 = ReadFile( hufi1, *aapbuffer, *aulpfilelen, &ulcl1, 0 );
       if (bcl1 == FALSE) {
         *adwperror = GetLastError();
       }
       bcl2 = CloseHandle( hufi1 );
       if ((bcl1) && (bcl2)) return TRUE;
       if ((bcl1) && (bcl2 == FALSE)) {
         *adwperror = GetLastError();
       }
       free( *aapbuffer );
       return FALSE;
     }
};
#else
class dsd_file_read_1 {
   private:
     FILE   *dfdi;                          /* file descriptor         */

   public:
     UNSIG_MED ulclfilesize;                /* return File Size        */
     UNSIG_MED ulclreclen;                  /* record length           */
     ULONG  ultime;  /* UUUU */
     inline APIRET fiopen( const char *apfn ) {
       long int    icl1;

       dfdi = fopen( apfn, "rt" );
//     if (dfdi == 0) return errno;
       if (dfdi == 0) return 1;
       icl1 = ftell( (FILE *) dfdi );
       fseek( (FILE *) dfdi, 0, SEEK_END );
       ulclfilesize = ftell( (FILE *) dfdi );
       fseek( (FILE *) dfdi, icl1, SEEK_SET );
       ulclreclen = 0;                      /* record length           */
       return 0;
     }
     inline APIRET firead( PVOID ap1, int iplenb, UNSIG_MED *aiplenr ) {
       *aiplenr = fread( ap1, 1, iplenb, (FILE *) dfdi );
       return 0;
     }
     inline APIRET ficlose() {
       return fclose( (FILE *) dfdi );
     }
#ifdef B160808
     inline BOOL m_readfile( const HL_WCHAR *apname,
                             char **aapbuffer, UNSIG_MED *aulpfilelen,
                             long int *adwperror ) {
       char   *achl_fn;                     /* filename                */
       APIRET rccl;
       UNSIG_MED ulcl1;

       achl_fn = XMLString::transcode( (XMLCh *) apname );
       rccl = fiopen( achl_fn );
       XMLString::release( &achl_fn );      /* free filename again     */
#ifdef TRACEHL1
       printf( "inline class clfiler.readfile after open rccl=%d\n", rccl );
#endif
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         return FALSE;                      /* return to calling prog  */
       }
       *aapbuffer = (char *) malloc( ulclfilesize );
       *aulpfilelen = ulclfilesize;
       rccl = firead( *aapbuffer, ulclfilesize, &ulcl1 );
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         free( *aapbuffer );                /* free buffer             */
         return FALSE;                      /* return to calling prog  */
       }
       rccl = ficlose();
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         free( *aapbuffer );                /* free buffer             */
         return FALSE;                      /* return to calling prog  */
       }
       return TRUE;
     }
};
#endif
#ifndef B160808
     inline BOOL m_readfile( const HL_WCHAR *apname,
                             char **aapbuffer, UNSIG_MED *aulpfilelen,
                             unsigned int *adwperror ) {
       char   *achl_fn;                     /* filename                */
       APIRET rccl;
       UNSIG_MED ulcl1;

       achl_fn = XMLString::transcode( (XMLCh *) apname );
       rccl = fiopen( achl_fn );
       XMLString::release( &achl_fn );      /* free filename again     */
#ifdef TRACEHL1
       printf( "inline class clfiler.readfile after open rccl=%d\n", rccl );
#endif
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         return FALSE;                      /* return to calling prog  */
       }
       *aapbuffer = (char *) malloc( ulclfilesize );
       *aulpfilelen = ulclfilesize;
       rccl = firead( *aapbuffer, ulclfilesize, &ulcl1 );
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         free( *aapbuffer );                /* free buffer             */
         return FALSE;                      /* return to calling prog  */
       }
       rccl = ficlose();
       if (rccl) {                          /* error occured           */
         *adwperror = rccl;                 /* set error               */
         free( *aapbuffer );                /* free buffer             */
         return FALSE;                      /* return to calling prog  */
       }
       return TRUE;
     }
};
#endif
#endif

/*+-------------------------------------------------------------------+*/
/*| Static global variables and local constants.                      |*/
/*+-------------------------------------------------------------------+*/

static const char * achrs_node_general[] = {
/*| $$UU$$ 27.12.24                                                   |*/
   "configuration-version",
#ifndef B160423
/* new parameters */
#endif
   "installation-name",
   "prot-event-log",
   "event-server-name",
   "event-source-name",
   "windows-core-dump",
   "prot-syslog",
/*| $$UU$$                                                            |*/
   "prot-include-pid",
/*| $$UU$$                                                            |*/
// to-do 08.01.13 KB
   "time-of-day-mark-log",
/*| $$UU$$ 27.12.24                                                   |*/
   "print-fingerprint-in-report",
   "pid-file",
   "listen-error",
   "listen-gateway",
#ifndef B160423
/* new parameters */
#endif
   "external-random-generator",
   "external-security-server",
   "reload-configuration",
   "TCP-sndbuf",
   "TCP-rcvbuf",
/*| $$UU$$                                                            |*/
   "TCP-keepalive",
   "max-poss-work-thread",
   "max-active-work-thread",
   "prio-work-thread",
   "prio-process",
/*| $$UU$$                                                            |*/
   "max-util-thread",
/*| $$UU$$ 27.12.24                                                   |*/
   "max-sockets-per-thread",
   "report-intv",
   "wake-on-lan-relay-ineta",
   "wake-on-lan-port",
   "time-cache-disk-file",
   "time-reload-disk-file",
   "disk-file-size-max",
   "disk-file-storage",
/*| $$UU$$ 27.12.24                                                   |*/
   "cma-timeout-local",
/*| $$UU$$ 27.12.24                                                   |*/
   "cma-timeout-cluster",
   "network-statistic-level",
   "clear-used-memory",
#ifdef B160423
/*| $$UU$$ 27.12.24                                                   |*/
   "external-random-generator",
#endif
/*| $$UU$$ 27.12.24                                                   |*/
   "authentication-lockout",
/*| $$UU$$ 27.12.24                                                   |*/
   "authentication-hide-message",
/*| $$UU$$                                                            |*/
   "size-swap-in-memory",
/*| $$UU$$                                                            |*/
   "max-swap-size",
/*| $$UU$$                                                            |*/
// to-do 08.01.13 KB
   "swap-file",
/*| $$UU$$                                                            |*/
#ifdef B160423
// to-do 08.01.13 KB
   "signature-credentials-file",
#endif
#ifndef B160423
/* new parameters */
#endif
   "signature-credentials-file-format-1",
   "signature-credentials-file-pem",
   "SNMP-configuration",
   "alert-subsystem-configuration",
   "ignore-PTTD-connect-error-host-unreachable",
   "time-repeat-delay-alert",
   "backlog-work-thread-threshold",
   "CPU-time-percent-threshold",
   "memory-threshold",
   "watch-syn-no",
   "watch-syn-time",
   "enable-sign-on-no-password",
   "memory-log-size",
   "SIP-local-ineta",
   "SIP-use-UDP-port-5060",
   "UDP-gw-ineta",
   "UDP-gate",
   "Windows-named-pipe",
   "Unix-Domain-Socket",
   "allow-wsp-trace",
   "security-token-plain",
   "security-token-encrypted",
   "VDI-sign-on-time",
   "suppress-warning-LDAP-template-not-referenced"
};

#define DEF_XML_GENERAL_CONF_VERS      1    /* <configuration-version> */
#ifndef B160423
/* new parameters */
#endif
#define DEF_XML_GENERAL_INST_NAME      2    /* <installation-name>     */
#define DEF_XML_GENERAL_EVELOG         3
#define DEF_XML_GENERAL_EVSERVERN      4    /* <event-server-name>     */
#define DEF_XML_GENERAL_EVSOURCEN      5    /* <event-source-name>     */
#define DEF_XML_GENERAL_WICOREDU       6    /* <windows-core-dump>     */
#define DEF_XML_GENERAL_SYSLOG         7    /* <prot-syslog>           */
#define DEF_XML_GENERAL_PROT_INCL_PID  8    /* <prot-include-pid>      */
#define DEF_XML_GENERAL_TOD_MARK_LOG   9    /* <time-of-day-mark-log>  */
#define DEF_XML_GENERAL_PRI_FP_IN_REP  10   /* <print-fingerprint-in-report> */
#define DEF_XML_GENERAL_PIDFILE        11   /* <pid-file>              */
#define DEF_XML_GENERAL_LISTENERR      12   /* <listen-error>          */
#define DEF_XML_GENERAL_LISTENGW       13   /* <listen-gateway>        */
#ifndef B160423
/* new parameters */
#endif
#define DEF_XML_GENERAL_EXT_RANDOM_G   14   /* <external-random-generator> */
#define DEF_XML_GENERAL_EXT_SEC_SERV   15   /* <external-security-server> */
#define DEF_XML_GENERAL_RELOCONF       16
#define DEF_XML_GENERAL_TCP_SNDBUF     17   /* <TCP-sndbuf>            */
#define DEF_XML_GENERAL_TCP_RCVBUF     18   /* <TCP-rcvbuf>            */
#define DEF_XML_GENERAL_TCP_KEEPALIVE  19   /* <TCP-keepalive>         */
#define DEF_XML_GENERAL_MAXPOSSWTHR    20
#define DEF_XML_GENERAL_MAXACTWTHR     21
#define DEF_XML_GENERAL_PRIOWT         22
#define DEF_XML_GENERAL_PRIOPR         23
#define DEF_XML_GENERAL_MAX_UTIL_THR   24   /* <max-util-thread>       */
#define DEF_XML_GENERAL_MAX_SOCK_THR   25   /* <max-sockets-per-thread> */
#define DEF_XML_GENERAL_REPINTV        26
#define DEF_XML_GENERAL_WOLRINETA      27
#define DEF_XML_GENERAL_WOLPORT        28
#define DEF_XML_GENERAL_TIME_C_DF      29   /* <time-cache-disk-file>  */
#define DEF_XML_GENERAL_TIME_R_DF      30   /* <time-reload-disk-file> */
#define DEF_XML_GENERAL_FILE_S_MAX     31   /* <disk-file-size-max>    */
#define DEF_XML_GENERAL_FILE_STOR      32   /* <disk-file-storage>     */
#define DEF_XML_GENERAL_CMA_TO_LOCAL   33   /* <cma-timeout-local>     */
#define DEF_XML_GENERAL_CMA_TO_CLUSTER 34   /* <cma-timeout-cluster>   */
#define DEF_XML_GENERAL_NET_STAT_LEVEL 35   /* <network-statistic-level> */
#define DEF_XML_GENERAL_CLUSEDM        36   /* <clear-used-memory>     */
#define DEF_XML_GENERAL_AUTH_LOCKOUT   37   /* <authentication-lockout> */
#define DEF_XML_GENERAL_AUTH_HIDE_MSG  38   /* <authentication-hide-message> */
#define DEF_XML_GENERAL_SWAP_IN_MEM    39   /* <size-swap-in-memory>   */
#define DEF_XML_GENERAL_MAX_SWAP_SIZE  40   /* <max-swap-size>         */
#define DEF_XML_GENERAL_SWAP_FILE      41   /* <swap-file>             */
#ifdef B160423
#define DEF_XML_GENERAL_SIG_CRED_FILE  40   /* <signature-credentials-file> */
#endif
#ifndef B160423
/* new parameters */
#endif
#define DEF_XML_GENERAL_SIG_CRED_FF1   42   /* <signature-credentials-file-format-1> */
#define DEF_XML_GENERAL_SIG_CRED_PEM   43   /* <signature-credentials-file-pem> */
#define DEF_XML_GENERAL_SNMP_CO        44   /* <SNMP-configuration>    */
#define DEF_XML_GENERAL_ALERT_SSC      45   /* <alert-subsystem-configuration> */
#define DEF_XML_GENERAL_PTTD_CEHU      46   /* <ignore-PTTD-connect-error-host-unreachable> */
#define DEF_XML_GENERAL_TIME_RDA       47   /* <time-repeat-delay-alert> */
#define DEF_XML_GENERAL_THRES_BL_WT    48   /* <backlog-work-thread-threshold> */
#define DEF_XML_GENERAL_THRES_CPUT     49   /* <CPU-time-percent-threshold> */
#define DEF_XML_GENERAL_THRES_MEM      50   /* <memory-threshold>      */
#define DEF_XML_GENERAL_SYN_W_NO       51   /* <watch-syn-no>          */
#define DEF_XML_GENERAL_SYN_W_TIME     52   /* <watch-syn-time>        */
#define DEF_XML_GENERAL_ENA_SION_NPW   53   /* <enable-sign-on-no-password> */
#define DEF_XML_GENERAL_MEM_LS         54   /* <memory-log-size>       */
#define DEF_XML_GENERAL_SIP_L_INETA    55   /* <SIP-local-ineta>       */
#define DEF_XML_GENERAL_SIP_P5060      56   /* <SIP-use-UDP-port-5060> */
#define DEF_XML_GENERAL_UDP_INETA      57   /* <UDP-gw-ineta>          */
#define DEF_XML_GENERAL_UDP_GATE       58   /* <UDP-gate>              */
#define DEF_XML_GENERAL_WIN_NAMED_P    59   /* <Windows-named-pipe>    */
#define DEF_XML_GENERAL_UNIX_D_SOCKET  60   /* <Unix-Domain-Socket>    */
#define DEF_XML_GENERAL_ALLOW_WSP_TR   61   /* <allow-wsp-trace>       */
//#define DEF_XML_GENERAL_SECURITY_TOKEN 43   /* <security-token>        */
#define DEF_XML_GENERAL_SEC_TOKEN_PLAIN 62  /* <security-token-plain>  */
#define DEF_XML_GENERAL_SEC_TOKEN_ENCRY 63  /* <security-token-encrypted> */
#define DEF_XML_GENERAL_VDI_SO_TIME     64  /* <VDI-sign-on-time>      */
#define DEF_XML_GENERAL_SUPP_W_LT_NR    65  /* <suppress-warning-LDAP-template-not-referenced> */
//#define DEF_XML_GENERAL_MAX             47  /* maximum value           */
#define DEF_XML_GENERAL_MAX             65  /* maximum value           */

#ifndef HL_UNIX
static const char * achrs_node_gwcd[] = {
   "diskdirfd",                             /* disk-directory for Dumps */
   "ineta-mgw",                             /* INETA mail-gateway      */
   "email-rcpt",                            /* e-mail recipient        */
   "email-sender",                          /* e-mail sender           */
   "password"                               /* password                */
};
#endif
#ifdef HL_UNIX
static const char * achrs_node_gligw[] = {
   "domain-socket-name",                    /* name of FIFO            */
   "shared-secret"                          /* shared secret           */
};
#define DEF_XML_GEN_LIGW_DSN           0    /* <domain-socket-name>    */
#define DEF_XML_GEN_LIGW_SS            1    /* <shared-secret>         */
#endif

static const char * achrs_node_gen_snmp[] = {
   "trap-send-level",
   "trap-target"
};

#define DEF_XML_GEN_SNMP_TSL           0    /* <trap-send-level>       */
#define DEF_XML_GEN_SNMP_TT            1    /* <trap-target>           */

static const char * achrs_node_g_snmp_tt[] = {
   "gate-out-ineta",
   "target-ineta",
   "target-port",
   "comment"
};

#define DEF_XML_G_SNMP_TT_GOINETA      0    /* <gate-out-ineta>        */
#define DEF_XML_G_SNMP_TT_TAINETA      1    /* <target-ineta>          */
#define DEF_XML_G_SNMP_TT_TAPORT       2    /* <target-port>           */
#define DEF_XML_G_SNMP_TT_COMMENT      3    /* <comment>               */
#define DEF_XML_G_SNMP_TT_MAX          4    /* maximum value           */

static const char * achrs_node_gen_udp_gate[] = {
   "gate-ineta",
   "UDP-port"
};

#define DEF_XML_GEN_UDPG_GINETA        0    /* <gate-ineta>            */
#define DEF_XML_GEN_UDPG_PORT          1    /* <UDP-port>              */

#ifdef B111217
static const char * achrs_node_radius_kw[] = {
   "gate-ineta",
   "radius-ineta",
   "radius-port",
   "timeout",
   "shared-secret"
};

#define DEF_XML_RADIUS_S_GATE_INETA    1
#define DEF_XML_RADIUS_S_RADIUS_INETA  2
#define DEF_XML_RADIUS_S_PORT          3
#define DEF_XML_RADIUS_S_TIMEOUT       4
#define DEF_XML_RADIUS_S_SHARED_SECRET 5
#define DEF_XML_RADIUS_S_MAX           5
#endif

static const char * achrs_node_radius_group_kw[] = {
   "radius-server",
   "corresponding-LDAP-service",
   "option",
   "send-certificate",
   "configuration-desktop",
   "charset",
   "timeout",
   "retry-after-error",
   "comment"
};

#define DEF_XML_RAD_GRO_RADIUS_SERVER       0
#define DEF_XML_RAD_GRO_CORR_LDAP           1
#define DEF_XML_RAD_GRO_OPTION              2
#define DEF_XML_RAD_GRO_SEND_CERTIFICATE    3
#define DEF_XML_RAD_GRO_CONF_DESKTOP        4
#define DEF_XML_RAD_GRO_CHARSET             5
#define DEF_XML_RAD_GRO_TIMEOUT             6
#define DEF_XML_RAD_GRO_RETRY_AFTER_ERROR   7
#define DEF_XML_RAD_GRO_COMMENT             8
#define DEF_XML_RAD_GRO_MAX                 8

static const char * achrs_node_radius_entry_kw[] = {
   "gate-ineta",
   "radius-ineta",
   "UDP-port",
   "shared-secret-plain",
   "shared-secret-encrypted",
   "comment"
};

#define DEF_XML_RAD_ENTRY_GATE_INETA        0
#define DEF_XML_RAD_ENTRY_RADIUS_INETA      1
#define DEF_XML_RAD_ENTRY_UDP_PORT          2
#define DEF_XML_RAD_ENTRY_SHASECR_PLAIN     3
#define DEF_XML_RAD_ENTRY_SHASECR_ENCRYPTED 4
#define DEF_XML_RAD_ENTRY_COMMENT           5
#define DEF_XML_RAD_ENTRY_MAX               6

struct dsd_radius_gr_charset_tab {          /* radius-group charset    */
   char       *achc_name;
   enum ied_charset iec_chs;                /* define character set    */
};

static const struct dsd_radius_gr_charset_tab dsrs_radius_gr_charset_tab[] = {
   { "UTF-8",         ied_chs_utf_8 },      /* Unicode UTF-8           */
   { "ASCII-850",     ied_chs_ascii_850 },  /* ASCII 850               */
   { "ANSI-819",      ied_chs_ansi_819 },   /* ANSI 819                */
   { "LATIN-1",       ied_chs_ansi_819 },   /* ANSI 819                */
   { "ISO-8859-1",    ied_chs_ansi_819 },   /* ANSI 819                */
   { "DOS-US",        ied_chs_oem_437 },    /* DOS-Codepage 437        */
   { "OEM-437",       ied_chs_oem_437 },    /* DOS-Codepage 437        */
   { "WINDOWS-874",   ied_chs_wcp_874 },    /* Windows-Codepage  874   */
   { "WINDOWS-1250",  ied_chs_wcp_1250 },   /* Windows-Codepage 1250   */
   { "WINDOWS-1251",  ied_chs_wcp_1251 },   /* Windows-Codepage 1251   */
   { "WINDOWS-1252",  ied_chs_wcp_1252 },   /* Windows-Codepage 1252   */
   { "WINDOWS-1253",  ied_chs_wcp_1253 },   /* Windows-Codepage 1253   */
   { "WINDOWS-1254",  ied_chs_wcp_1254 },   /* Windows-Codepage 1254   */
   { "WINDOWS-1255",  ied_chs_wcp_1255 },   /* Windows-Codepage 1255   */
   { "WINDOWS-1256",  ied_chs_wcp_1256 },   /* Windows-Codepage 1256   */
   { "WINDOWS-1257",  ied_chs_wcp_1257 },   /* Windows-Codepage 1257   */
   { "WINDOWS-1258",  ied_chs_wcp_1258 },   /* Windows-Codepage 1258   */
   { "WINDOWS-932",   ied_chs_wcp_932 },    /* Windows-Codepage 932 (MBCS) */
   { "WINDOWS-936",   ied_chs_wcp_936 },    /* Windows-Codepage 936 (MBCS) */
   { "WINDOWS-949",   ied_chs_wcp_949 },    /* Windows-Codepage 949 (MBCS) */
   { "WINDOWS-950",   ied_chs_wcp_950 },    /* Windows-Codepage 950 (MBCS) */
   { "LATIN-2",       ied_chs_iso8859_2 },  /* ISO 8859-2              */
   { "ISO-8859-2",    ied_chs_iso8859_2 },  /* ISO 8859-2              */
   { "LATIN-3",       ied_chs_iso8859_3 },  /* ISO 8859-3              */
   { "ISO-8859-3",    ied_chs_iso8859_3 },  /* ISO 8859-3              */
   { "LATIN-4",       ied_chs_iso8859_4 },  /* ISO 8859-4              */
   { "ISO-8859-4",    ied_chs_iso8859_4 },  /* ISO 8859-4              */
   { "ISO-8859-5",    ied_chs_iso8859_5 },  /* ISO 8859-5              */
   { "ISO-IR-144",    ied_chs_iso8859_5 },  /* ISO 8859-5              */
   { "ISO-8859-6",    ied_chs_iso8859_6 },  /* ISO 8859-6              */
   { "ISO-IR-127",    ied_chs_iso8859_6 },  /* ISO 8859-6              */
   { "ECMA-114",      ied_chs_iso8859_6 },  /* ISO 8859-6              */
   { "ASMO-708",      ied_chs_iso8859_6 },  /* ISO 8859-6              */
   { "WINDOWS-28596", ied_chs_iso8859_6 },  /* ISO 8859-6              */
   { "ISO-8859-6",    ied_chs_iso8859_7 },  /* ISO 8859-7              */
   { "ISO-IR-126",    ied_chs_iso8859_7 },  /* ISO 8859-7              */
   { "ELOT-928",      ied_chs_iso8859_7 },  /* ISO 8859-7              */
   { "ECMA-118",      ied_chs_iso8859_7 },  /* ISO 8859-7              */
   { "WINDOWS-28597", ied_chs_iso8859_7 },  /* ISO 8859-7              */
   { "ISO-8859-6",    ied_chs_iso8859_8 },  /* ISO 8859-8              */
   { "ISO-IR-138",    ied_chs_iso8859_8 },  /* ISO 8859-8              */
   { "WINDOWS-28598", ied_chs_iso8859_8 },  /* ISO 8859-8              */
   { "ISO-8859-6",    ied_chs_iso8859_9 },  /* ISO 8859-9              */
   { "LATIN-5",       ied_chs_iso8859_9 },  /* ISO 8859-9              */
   { "ISO-IR-148",    ied_chs_iso8859_9 },  /* ISO 8859-9              */
   { "WINDOWS-28599", ied_chs_iso8859_9 },  /* ISO 8859-9              */
   { "ISO-8859-10",   ied_chs_iso8859_10 }, /* ISO 8859-10             */
   { "LATIN-6",       ied_chs_iso8859_10 }, /* ISO 8859-10             */
   { "ISO-IR-157",    ied_chs_iso8859_10 }, /* ISO 8859-10             */
   { "ISO-8859-11",   ied_chs_iso8859_11 }, /* ISO 8859-11             */
   { "TIS-620",       ied_chs_iso8859_11 }, /* ISO 8859-11             */
   { "ISO-8859-13",   ied_chs_iso8859_13 }, /* ISO 8859-13             */
   { "LATIN-6",       ied_chs_iso8859_13 }, /* ISO 8859-13             */
   { "WINDOWS-28603", ied_chs_iso8859_13 }, /* ISO 8859-13             */
   { "ISO-8859-14",   ied_chs_iso8859_14 }, /* ISO 8859-14             */
   { "LATIN-8",       ied_chs_iso8859_14 }, /* ISO 8859-14             */
   { "ISO-IR-199",    ied_chs_iso8859_14 }, /* ISO 8859-14             */
   { "ISO-8859-15",   ied_chs_iso8859_15 }, /* ISO 8859-15             */
   { "LATIN-9",       ied_chs_iso8859_15 }, /* ISO 8859-15             */
   { "WINDOWS-28605", ied_chs_iso8859_15 }, /* ISO 8859-15             */
   { "ISO-8859-16",   ied_chs_iso8859_16 }, /* ISO 8859-16             */
   { "LATIN-10",      ied_chs_iso8859_16 }, /* ISO 8859-16             */
   { "ISO-IR-226",    ied_chs_iso8859_16 }  /* ISO 8859-16             */
};

struct dsd_radius_gr_option_tab {           /* radius-group option     */
   char       *achc_name;
   int        imc_options;                  /* options                 */
};

static const struct dsd_radius_gr_option_tab dsrs_radius_gr_option_tab[] = {
   {
     "MS-CHAP-V2",
     DEF_RADIUS_GROUP_OPTION_MS_CHAP_V2
   }
};

struct dsd_radius_gr_send_cert_tab {        /* radius-group send-certificate */
   char       *achc_name;
   enum ied_rasc_conf1 iec_rasc_conf1;      /* send certificate        */
};

static const struct dsd_radius_gr_send_cert_tab dsrs_radius_gr_send_cert_tab[] = {
   {
     "attribute-vendor-specific-hob-1",
     ied_rasc_avendsphob1                   /* do from attr vendor specific */
   }
};

struct dsd_radius_gr_conf_desktop_tab {     /* radius-group configuration-desktop */
   char       *achc_name;
   enum ied_pttd_conf1 iec_pttd_conf1;      /* pass thru to desktop configuration */
};

static const struct dsd_radius_gr_conf_desktop_tab dsrs_radius_gr_conf_desktop_tab[] = {
   {
     "attribute-vendor-specific-1",
     ied_pttdc_avendsp1                     /* do from attr vendor sp  */
   },
   {
     "attribute-116",
     ied_pttdc_attr116                      /* do from attr 116        */
   }
};

#ifdef B080324
static const char * achrs_node_blacont_kw[] = {  /* keywords Blade Control */
   "sign-on-time",
   "trimming-in-ineta",
   "trimming-in-port",
   "trimming-twin-list"
};

#define DEF_XML_BLACONT_SIONTI         1
#define DEF_XML_BLACONT_TRINETA        2
#define DEF_XML_BLACONT_TRPORT         3
#define DEF_XML_BLACONT_TRTWLI         4
#define DEF_XML_BLACONT_MAX            4
#endif

static const char * achrs_node_ocsps[] = {  /* for OCSP-responder */
   "OCSP-URL",
   "gate-ineta",
   "OCSP-ineta",
   "OCSP-port",
   "timeout",
   "wait-retry"
};

#define DEF_XML_OCSPS_URL              0
#define DEF_XML_OCSPS_GATE_INETA       1
#define DEF_XML_OCSPS_OCSP_INETA       2
#define DEF_XML_OCSPS_OCSP_PORT        3
#define DEF_XML_OCSPS_TIMEOUT          4
#define DEF_XML_OCSPS_WAIT_RETRY       5
#define DEF_XML_OCSPS_NUMERIC_V        3

static const char * achrs_node_cs_ssl_kw[] = {  /* keywords Client-Side SSL */
   "SSL-config-file",
   "SSL-certdb-file",
   "SSL-password-file",
   "usage-DN"
};

#define DEF_XML_CS_SSL_CONFFI          1
#define DEF_XML_CS_SSL_CEDBFI          2
#define DEF_XML_CS_SSL_PAWOFI          3
#define DEF_XML_CS_SSL_U_DN            4

static const char * achrs_node_targfi_1[] = {  /* for target-filter    */
   "name",
   "allow",
   "deny",
   "use-as-blacklist"
};

static const char * achrs_node_targfi_ele_1[] = {  /* for target-filter element */
   "DNS-name",
   "ineta",
   "protocol",
   "TCP-port",
   "UDP-port"
};

struct dsd_conn_type_tab {                  /* conn-type               */
   char       *achc_name;
   enum ied_conn_type_def iec_coty;         /* connection type         */
};

static const struct dsd_conn_type_tab dsrs_conn_type_tab[] = {
   {
     "primary",
     ied_coty_primary                       /* primary listen          */
   },
   {
     "secondary",
     ied_coty_secondary                     /* secondary listen        */
   },
   {
     "admin",
     ied_coty_admin                         /* for administrator       */
   }
};

struct dsd_protocol_name_no {               /* protocol name and number */
   char       *achc_name;
   char       chc_no;
};

static const struct dsd_protocol_name_no dss_protocol_name_no[] = {
   {
     "TCP",
     IPPROTO_TCP
   },
   {
     "UDP",
     IPPROTO_UDP
   },
   {
     "ICMP",
     IPPROTO_ICMP
   }
};

#define DEF_XML_TFE1_DNS               0
#define DEF_XML_TFE1_INETA             1
#define DEF_XML_TFE1_PROTOCOL          2
#define DEF_XML_TFE1_TCP_PORT          3
#define DEF_XML_TFE1_UDP_PORT          4
#define DEF_XML_TFE1_ALPHA             2

static const char * achrs_node_usgro_kw[] = {  /* for User Group       */
   "user",
   "privileges-mask",
   "gate-out-ineta",
   "select-server",
   "target-filter"
};

#define DEF_XML_USGRO_USER             1
#define DEF_XML_USGRO_PRIV_MASK        2
#define DEF_XML_USGRO_GOUTINETA        3
#define DEF_XML_USGRO_SELSERV          4
#define DEF_XML_USGRO_TARGFI           5

static const char * achrs_node_user_kw[] = {  /* for User Entry        */
   "password-plain",
   "password-encrypted",
   "privileges-mask",
   "desktop-ineta",
   "desktop-port",
   "gate-out-ineta",
   "mac-address",
   "wait-connect",
   "ineta-ppp",
   "ineta-appl",
   "ineta-SIP-gateway",
   "SIP-fullname",
   "SIP-ident",
   "SIP-display-number",
   "SIP-shared-secret"
};
#ifdef B100403
// to-do 21.07.09 KB
// up to four (4) <ineta-ppp>192.1.2.3</ineta-ppp>
// up to four (4) <ineta-appl>192.1.2.4</ineta-appl>
// Oguzhan Alan needs SIP-full-name
#endif

#define DEF_XML_USGUS_PASSWORD_PLAIN   1
#define DEF_XML_USGUS_PASSWORD_ENCRY   2
#define DEF_XML_USGUS_PRIV_MASK        3
#define DEF_XML_USGUS_DESKTOP_INETA    4
#define DEF_XML_USGUS_DESKTOP_PORT     5
#define DEF_XML_USGUS_GOUTINETA        6
#define DEF_XML_USGUS_MACADDR          7
#define DEF_XML_USGUS_WAITCONN         8
#define DEF_XML_USGUS_INETA_PPP        9
#define DEF_XML_USGUS_INETA_APPL       10
#define DEF_XML_USGUS_INETA_SIP_GW     11
#define DEF_XML_USGUS_SIP_FULLNAME     12
#define DEF_XML_USGUS_SIP_IDENT        13
#define DEF_XML_USGUS_SIP_DISPLAY_N    14
#define DEF_XML_USGUS_SIP_SHASE        15
#define DEF_XML_USGUS_MAX              15

static const char * achrs_node_aura_kw[] = {  /* for Authentication Radius */
   "radius-name",
   "configuration-desktop",
   "send-certificate"
};

static const char * achrs_node_cluster_04[] = {  /* for cluster */
   "cluster-entry",
   "load-balancing-diff",
   "load-balancing-formula",
   "interval-load-balancing-probe",
   "time-retry-connect",
   "timeout-receive-millisec-all",
   "deny-not-configured",
   "display-load"
};

#define DEF_XML_CL04_CLUSTER_ENTRY     1
#define DEF_XML_CL04_LBAL_DIFF         2
#define DEF_XML_CL04_LBAL_FORMULA      3
#define DEF_XML_CL04_LBAL_INTV         4
#define DEF_XML_CL04_TIME_RETRY_C      5
#define DEF_XML_CL04_TIMEOUT_RECV      6
#define DEF_XML_CL04_DENY_NOT_CONF     7
#define DEF_XML_CL04_DISPLAY_LOAD      8

static const char * achrs_node_cluster_entry[] = {  /* for cluster-entry */
   "TCP-port",
   "alternate-TCP-port",
   "gate-ineta",
   "backlog",
   "remote-ineta",
   "timeout-millisec",
   "timeout-receive-millisec",
   "group",
   "location",
   "URL"
};

#define DEF_XML_CL_ENT_TCP_PORT        1
#define DEF_XML_CL_ENT_ALT_TCP_PORT    2
#define DEF_XML_CL_ENT_GATE_INETA      3
#define DEF_XML_CL_ENT_BACKLOG         4
#define DEF_XML_CL_ENT_REMOTE_INETA    5
#define DEF_XML_CL_ENT_TIMEOUT_MSEC    6
#define DEF_XML_CL_ENT_TO_RECV_MSEC    7
#define DEF_XML_CL_ENT_GROUP           8
#define DEF_XML_CL_ENT_LOCATION        9
#define DEF_XML_CL_ENT_URL             10

#ifdef B100907
static const char * achrs_node_ldap_template[] = {  /* for LDAP-template */
   "user-attribute",
   "group-attribute",
   "member-attribute",
   "membership-attribute",
   "user-prefix"
};

#define DEF_XML_LDAP_TEMPL_USER_ATTR   1
#define DEF_XML_LDAP_TEMPL_GROUP_ATTR  2
#define DEF_XML_LDAP_TEMPL_MEMBER_ATTR 3
#define DEF_XML_LDAP_TEMPL_MSHIP_ATTR  4
#define DEF_XML_LDAP_TEMPL_UPREF_ATTR  5
#define DEF_XML_LDAP_TEMPL_MAX         5

static const char * achrs_node_ldap_entry[] = {  /* for LDAP-entry */
   "comment",
   "serverineta",
   "serverport",
   "gate-out-ineta",
   "wait-connect",
   "search-nested-groups-level",
   "global-directory",
   "base-dn",
   "timeout-search",
   "retry-after-error",
   "search-result-buffer-size",
   "max-session",
   "dn",
   "password",
   "search-default-attribute",
   "LDAP-template",
   "SSL-config-file",
   "SSL-certdb-file",
   "SSL-password-file"
};

#define DEF_XML_LDAP_ENT_COMMENT       1
#define DEF_XML_LDAP_ENT_SERVER_INETA  2
#define DEF_XML_LDAP_ENT_SERVER_PORT   3
#define DEF_XML_LDAP_ENT_GATE_OUT_I    4
#define DEF_XML_LDAP_ENT_WAIT_CONNECT  5
#define DEF_XML_LDAP_ENT_SEARCH_N_G_L  6
#define DEF_XML_LDAP_ENT_GLOBAL_DIR    7
#define DEF_XML_LDAP_ENT_BASE_DN       8
#define DEF_XML_LDAP_ENT_TIMEOUT_S     9
#define DEF_XML_LDAP_ENT_RETRY_AFTER_E 10
#define DEF_XML_LDAP_ENT_SEARCH_B_S    11
#define DEF_XML_LDAP_ENT_MAX_SESSION   12
#define DEF_XML_LDAP_ENT_DN            13
#define DEF_XML_LDAP_ENT_PASSWORD      14
#define DEF_XML_LDAP_ENT_SEARCH_D_A    15
#define DEF_XML_LDAP_ENT_TEMPLATE      16
#define DEF_XML_LDAP_ENT_SSL_CONFFI    17
#define DEF_XML_LDAP_ENT_SSL_CEDBFI    18
#define DEF_XML_LDAP_ENT_SSL_PAWOFI    19
#endif
static const char * achrs_node_ldap_template[] = {  /* for LDAP-template */
   "user-attribute",
   "group-attribute",
   "member-attribute",
   "membership-attribute",
   "search-default-attribute",
   "user-prefix",
   "editable"
};

#define DEF_XML_LDAP_TEMPL_USER_ATTR   1
#define DEF_XML_LDAP_TEMPL_GROUP_ATTR  2
#define DEF_XML_LDAP_TEMPL_MEMBER_ATTR 3
#define DEF_XML_LDAP_TEMPL_MSHIP_ATTR  4
#define DEF_XML_LDAP_TEMPL_SEARCH_D_A  5
#define DEF_XML_LDAP_TEMPL_UPREF_ATTR  6
#define DEF_XML_LDAP_TEMPL_EDITABLE    7
#define DEF_XML_LDAP_TEMPL_MAX         7

static const char * achrs_node_ldap_entry[] = {  /* for LDAP-entry */
   "comment",
   "serverineta",
   "serverport",
   "gate-out-ineta",
   "wait-connect",
   "search-nested-groups-level",
   "global-directory",
   "base-dn",
   "timeout-search",
   "retry-after-error",
   "search-result-buffer-size",
   "max-session",
   "dn",
   "password",
   "LDAP-template",
   "SSL-config-file",
   "SSL-certdb-file",
   "SSL-password-file"
};

#define DEF_XML_LDAP_ENT_COMMENT       1
#define DEF_XML_LDAP_ENT_SERVER_INETA  2
#define DEF_XML_LDAP_ENT_SERVER_PORT   3
#define DEF_XML_LDAP_ENT_GATE_OUT_I    4
#define DEF_XML_LDAP_ENT_WAIT_CONNECT  5
#define DEF_XML_LDAP_ENT_SEARCH_N_G_L  6
#define DEF_XML_LDAP_ENT_GLOBAL_DIR    7
#define DEF_XML_LDAP_ENT_BASE_DN       8
#define DEF_XML_LDAP_ENT_TIMEOUT_S     9
#define DEF_XML_LDAP_ENT_RETRY_AFTER_E 10
#define DEF_XML_LDAP_ENT_SEARCH_B_S    11
#define DEF_XML_LDAP_ENT_MAX_SESSION   12
#define DEF_XML_LDAP_ENT_DN            13
#define DEF_XML_LDAP_ENT_PASSWORD      14
#define DEF_XML_LDAP_ENT_TEMPLATE      15
#define DEF_XML_LDAP_ENT_SSL_CONFFI    16
#define DEF_XML_LDAP_ENT_SSL_CEDBFI    17
#define DEF_XML_LDAP_ENT_SSL_PAWOFI    18

static const char * achrs_node_l2tp_gw_entry[] = {  /* for L2TP-gateway */
   "serverineta",
   "serverport",
   "gate-ineta",
   "authenticate-use-charset",
   "authenticate-use-userid",
   "authenticate-use-password-plain",
   "authenticate-use-password-encrypted"
};

#define DEF_XML_L2TP_GW_SERVER_INETA   0
#define DEF_XML_L2TP_GW_SERVER_PORT    1
#define DEF_XML_L2TP_GW_GATE_I         2
#define DEF_XML_L2TP_GW_AUTH_CHARSET   3
#define DEF_XML_L2TP_GW_AUTH_USERID    4
#define DEF_XML_L2TP_GW_AUTH_PWD_PLAIN 5
#define DEF_XML_L2TP_GW_AUTH_PWD_ENCRY 6
#define DEF_XML_L2TP_GW_MAX            7

static const char * achrs_node_krb5_kdc[] = {  /* Kerberos-5-KDC       */
   "comment",
   "corresponding-LDAP-service",
   "default-realm",
   "clockskew",
   "ticket-lifetime",
   "renewable-lifetime",
   "allow-initial-ticket",
   "trace-level",
   "server-entry"
};

#define DEF_XML_KRB5_KDC_COMMENT          0
#define DEF_XML_KRB5_KDC_CORR_LDAP        1
#define DEF_XML_KRB5_KDC_DEF_REALM        2
#define DEF_XML_KRB5_KDC_CLOCKSKEW        3
#define DEF_XML_KRB5_KDC_TICKET_LIFET     4
#define DEF_XML_KRB5_KDC_RENEWA_LIFET     5
#define DEF_XML_KRB5_KDC_ALLOW_INIT_TI    6
#define DEF_XML_KRB5_KDC_TRACE_LEVEL      7
#define DEF_XML_KRB5_KDC_SERVER_ENTRY     8

static const char * achrs_node_krb5_server[] = {  /* Kerberos-5 server-entry */
   "comment",
   "serverineta",
   "serverport",
   "gate-ineta",
   "timeout",
   "retry-after-error",
   "max-ticketsize",
   "max-session"
};

/*
05.12.11 KB
TCP-port-tickets
TCP-port-password-change
*/

#define DEF_XML_KRB5_SERVER_COMMENT       0
#define DEF_XML_KRB5_SERVER_S_INETA       1
#define DEF_XML_KRB5_SERVER_S_PORT        2
#define DEF_XML_KRB5_SERVER_GATE_INETA    3
#define DEF_XML_KRB5_SERVER_TIMEOUT       4
#define DEF_XML_KRB5_SERVER_RETRY_AFTER_E 5
#define DEF_XML_KRB5_SERVER_MAX_TICKET_S  6
#define DEF_XML_KRB5_SERVER_MAX_SESSION   7

static const char * achrs_node_raw_packet_if[] = {  /* raw-packet-interface */
// "TUN-adapter-name",
   "TUN-adapter-ineta",
   "TUN-adapter-use-interface-ineta",
   "strategy-inst-win-driver",
   "TCP-connect-timeout-millisec",
   "TCP-connect-number-of-try",
   "PPP-server",
   "PPP-ineta-pool",
   "TUN-use-ineta",
   "appl-use-tcp-source-port",
   "appl-use-random-tcp-source-port"
};

#define DEF_XML_RPI_TA_INETA              0
#define DEF_XML_RPI_TA_UIF_INETA          1
#define DEF_XML_RPI_STRAT_DRIVER          2
#define DEF_XML_RPI_TCPC_TOMS             3
#define DEF_XML_RPI_TCPC_NOT              4
#define DEF_XML_RPI_PPP_SERVER            5
#define DEF_XML_RPI_PPP_INETA_POOL        6
#define DEF_XML_RPI_TUN_USE_INETA         7
#define DEF_XML_RPI_APPL_TCPS_PORT        8
#define DEF_XML_RPI_APPL_RANDOM_TCPSP     9
#define DEF_XML_RPI_MAX                   10

#ifndef HL_UNIX
struct dsd_conf_strat_driver_e {            /* strategy-inst-win-driver */
   char       *achc_keyword;                /* function name           */
   enum ied_strategy_inst_win_driver iec_siwd;  /* strategy install - uninstall Windows TUN driver */
};

static struct dsd_conf_strat_driver_e dsrs_strat_driver[] = {  /* strategy-inst-win-driver */
   {
     "no-install-or-uninstall",
     ied_siwd_no_inst_uninst                /* no install or uninstall */
   },
   {
     "only-install-when-needed",
     ied_siwd_only_inst                     /* only install when needed */
   },
   {
     "uninstall-at-startup",
     ied_siwd_uninst_startup                /* uninstall at startup    */
   },
   {
     "uninstall-all-possible",
     ied_siwd_uninst_all                      /* uninstall all possible  */
   }
};
#endif

static const char * achrs_node_rpi_ineta[] = {  /* raw-packet-interface INETA */
   "single-ineta",
   "ineta-start",
   "ineta-end"
};

#define DEF_XML_RPI_INETA_SINGLE          0
#define DEF_XML_RPI_INETA_START           1
#define DEF_XML_RPI_INETA_END             2

static const char * achrs_node_rpi_ppp_se[] = {  /* raw-packet-interface PPP server */
   "DNS-ineta-IPV4-1",
   "DNS-ineta-IPV4-2",
   "NBNS-ineta-IPV4-1",
   "NBNS-ineta-IPV4-2",
   "DNS-ineta-IPV6-1",
   "DNS-ineta-IPV6-2",
   "NBNS-ineta-IPV6-1",
   "NBNS-ineta-IPV6-2"
};

#ifdef XYZ1
#define DEF_XML_RPI_PPP_SE_IPV4_DNS1      0
#define DEF_XML_RPI_PPP_SE_IPV4_DNS2      1
#define DEF_XML_RPI_PPP_SE_IPV4_NBNS1     2
#define DEF_XML_RPI_PPP_SE_IPV4_NBNS2     3
#endif
#define DEF_XML_RPI_PPP_SE_IPV4_MAX       3
#define DEF_XML_RPI_PPP_SE_MAX            8

#ifdef XYZ1
// struct for configuration of INETAs
struct dsd_wsptun_conf_1 {
   BOOL       boc_use_ipv4;                 /* use IPV4                */
   BOOL       boc_use_ipv6;                 /* use IPV4                */
   char       chrc_ipv4_dns_pri[4];         /* primary DNS INETA IPV4  */
   char       chrc_ipv4_dns_sec[4];         /* secondary DNS INETA IPV4 */
   char       chrc_ipv4_nbns_pri[4];        /* primary wins INETA IPV4 */
   char       chrc_ipv4_nbns_sec[4];        /* secondary wins INETA IPV4 */
   char       chrc_ipv6_dns_pri[16];        /* primary DNS INETA IPV6  */
   char       chrc_ipv6_dns_sec[16];        /* secondary DNS INETA IPV6 */
   char       chrc_ipv6_nbns_pri[16];       /* primary wins INETA IPV6 */
   char       chrc_ipv6_nbns_sec[16];       /* secondary wins INETA IPV6 */
};

#endif

static int imrs_rpi_ppp_se_d[] = {
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv4_dns_pri ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv4_dns_sec ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv4_nbns_pri ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv4_nbns_sec ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv6_dns_pri ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv6_dns_sec ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv6_nbns_pri ),
   offsetof( struct dsd_wsptun_conf_1, chrc_ipv6_nbns_sec )
};

static const char * achrs_node_rpi_auts_port[] = {  /* raw-packet-interface appl-use-tcp-source-port */
   "port-start",
   "port-end"
};

static const char * achrs_node_domain_info[] = {  /* connection domain-information */
   "comment",
   "server-dotted-ineta",
   "server-DNS-ineta",
   "server-DNS-domain-name",
   "server-DNS-computer-name",
   "server-DNS-tree-name",
   "NetBIOS-domain-name",
   "permanently-moved-URL",
   "use-full-permanently-moved-URL",
   "authentication-type",
   "use-as-default",
#ifndef B160423
/* new parameters */
#endif
   "group-id",
   "auth-token"
};

#define DEF_XML_DOM_INFO_COMMENT     0
#define DEF_XML_DOM_INFO_S_DOT_INETA 1
#define DEF_XML_DOM_INFO_S_DNS_INETA 2
#define DEF_XML_DOM_INFO_S_DNS_DOM_N 3
#define DEF_XML_DOM_INFO_S_DNS_COM_N 4
#define DEF_XML_DOM_INFO_S_DNS_TREE  5
#define DEF_XML_DOM_INFO_NETB_DOM_N  6
#define DEF_XML_DOM_INFO_PERM_M_URL  7
#define DEF_XML_DOM_INFO_USE_PM_URL  8
#define DEF_XML_DOM_INFO_AUTH_TYPE   9
#define DEF_XML_DOM_INFO_USE_AS_DEF  10
#ifndef B160423
/* new parameters */
#endif
#define DEF_XML_DOM_INFO_GROUP_ID    11
#define DEF_XML_DOM_INFO_AUTH_TOKEN  12

static const int imrs_node_domain_info_disp[] = {  /* connection domain-information */
   offsetof( struct dsd_domain_info_1, dsc_ucs_comment ),  /* comment  */
   0,
   0,
   offsetof( struct dsd_domain_info_1, dsc_ucs_dns_domain_name ),  /* server-DNS-domain-name */
   offsetof( struct dsd_domain_info_1, dsc_ucs_dns_computer_name ),  /* server-DNS-computer-name */
   offsetof( struct dsd_domain_info_1, dsc_ucs_dns_tree_name ),  /* server-DNS-tree-name */
   offsetof( struct dsd_domain_info_1, dsc_ucs_netbios_domain_name ),  /* NetBIOS-domain-name */
   offsetof( struct dsd_domain_info_1, dsc_ucs_permmov_url ),  /* permanently-moved-URL */
   0,
   0,
   0,
#ifndef B160423
/* new parameters */
#endif
   offsetof( struct dsd_domain_info_1, dsc_ucs_group_id ),  /* group Id */
   offsetof( struct dsd_domain_info_1, dsc_ucs_auth_token )  /* authentication token */
};

struct dsd_auth_type_e {                    /* definition authentication-type */
   char       *achc_keyword;                /* authentication name     */
   enum ied_dom_inf_auth_type iec_diat;     /* domain information authentication-type */
};

static struct dsd_auth_type_e adsrs_node_auth_type[] = {  /* connection domain-information authentication-type */
  { "XML-DB",     ied_diat_xml_db },        /* XML-DB                  */
  { "radius",     ied_diat_radius },        /* Radius                  */
  { "Kerberos-5", ied_diat_krb5   },        /* Kerberos 5              */
  { "LDAP",       ied_diat_ldap   },        /* LDAP                    */
  { "RPC-DC",     ied_diat_rpc_dc }         /* RPC-DC                  */
};

static const char chrs_msgtxt_sl[] = "server-list ";
static const char chrs_msgtxt_se[] = " server-entry";
static const char chrs_msgtxt_co[] = "connection";

#define DEF_XML_CONN_GATEPORT        0
#define DEF_XML_CONN_PM_FR_PORT      1      /* permanently-moved-from-port */
#define DEF_XML_CONN_PM_TO_PORT      2      /* permanently-moved-to-port */
#define DEF_XML_CONN_PM_URL          3      /* permanently-moved-URL   */
#define DEF_XML_CONN_PM_DOMAIN_INF   4      /* domain-information      */
#define DEF_XML_CONN_HTTP_REDIR_S    5      /* HTTP-redirect-library   */
#define DEF_XML_CONN_HTTP_REDIR_O    6      /* HTTP-redirect-library-object */
#define DEF_XML_CONN_PLAIN_HTTP_L_S  7      /* plain-HTTP-library      */
#define DEF_XML_CONN_PLAIN_HTTP_L_O  8      /* plain-HTTP-library-object */
#define DEF_XML_CONN_NOT_CL_LBAL     9      /* do-not-close-by-load-balancing */
#define DEF_XML_CONN_CONN_TYPE       10     /* conn-type               */
#define DEF_XML_CONN_KRB5_KEYTAB     11     /* Kerberos-5-keytab-file  */
#define DEF_XML_CONN_KRB5_PRINC      12     /* Kerberos-5-service-principal-name */
#define DEF_XML_CONN_SERVERINETA     13
#define DEF_XML_CONN_SERVERPORT      14
#define DEF_XML_CONN_DNS_LOOKUP      15     /* DNS-lookup-before-connect */
#define DEF_XML_CONN_BACKLOG         16
#define DEF_XML_CONN_GININETA        17
#define DEF_XML_CONN_GOUTINETA       18
#define DEF_XML_CONN_CONNRR          19     /* connect-round-robin     */
#define DEF_XML_CONN_USEINETAAPPL    20     /* use-ineta-appl          */
#define DEF_XML_CONN_USECLSSSL       21     /* use-client-side-SSL     */
#define DEF_XML_CONN_WTSSERVLI       22
#define DEF_XML_CONN_WTSBRPORT       23     /* wts-broadcast-port      */
#define DEF_XML_CONN_WTSCHNAME       24
#ifdef OLD_111205
#define DEF_XML_CONN_BLASERVLI     20
#define DEF_XML_CONN_BLABRPORT     21
#define DEF_XML_CONN_BLACHNAME     22
#endif
#define DEF_XML_CONN_VDISOUSLI       25     /* VDI-suos-list           */
#define DEF_XML_CONN_VDIBRPORT       26     /* VDI-broadcast-port      */
#define DEF_XML_CONN_VDICHNAME       27     /* VDI-check-name          */
#define DEF_XML_CONN_SCPROT          28
#define DEF_XML_CONN_HCPROXA         29
#define DEF_XML_CONN_TARGETFI        30
#ifdef OLD_111205
#define DEF_XML_CONN_AUTHLIB       23
#endif
#define DEF_XML_CONN_AUTHLIB_S       31     /* authentication-library */
#define DEF_XML_CONN_AUTHLIB_OBJ     32     /* authentication-library-object */
#ifdef D_FUNC01
#define DEF_XML_CONN_AUTHMED       18
#define DEF_XML_CONN_AUTHCOF       19
#define DEF_XML_CONN_AUTHPA1       20
#endif
#ifdef OLD_111205
#define DEF_XML_CONN_AUTHRADIUS    24
#endif
#define DEF_XML_CONN_RADIUS_GROUP    33     /* radius-group            */
//#define DEF_XML_CONN_DYN_RADIUS_GR 31       /* dynamic-radius          */
#define DEF_XML_CONN_USERLIST        34
#define DEF_XML_CONN_LANGUAGE        35
#define DEF_XML_CONN_SELSERV         36
#define DEF_XML_CONN_TIMEOUT         37
#define DEF_XML_CONN_MAXSESS         38
#define DEF_XML_CONN_CONFFI          39
#define DEF_XML_CONN_CEDBFI          40
#define DEF_XML_CONN_PAWOFI          41
#define DEF_XML_CONN_THRESH_SESS     42     /* threshold-session       */
#define DEF_XML_CONN_KRB5_KDC        43     /* Kerberos-5-KDC          */
//#define DEF_XML_CONN_DYN_KRB5_KDC  42       /* dynamic Kerberos-5-KDC  */
#define DEF_XML_CONN_LDAP_SERV       44     /* LDAP-service            */
//#define DEF_XML_CONN_DYN_LDAP      44       /* dynamic LDAP            */
#define DEF_XML_CONN_RPC_DC          45     /* RPC-DC                  */
#define DEF_XML_CONN_L2TP_GW         46     /* L2TP-gateway            */
#define DEF_XML_CONN_SERVER_NW       47     /* server-network          */
#define DEF_XML_CONN_AUTHMETH        48     /* authentication-method   */
#define DEF_XML_CONN_CHECK_SSTP_CB      49     /* do-not-check-SSTP-channel-bindings */
#define DEF_XML_CONN_DISA_NS_CL      50     /* disable-naegle-send-client */
#define DEF_XML_CONN_DISA_NS_SE      51     /* disable-naegle-send-server */
#define DEF_XML_CONN_CO_OTHER_SE     52     /* option-connect-other-server */
#define DEF_XML_CONN_DSDHHRE1        53     /* disable-SDH-HOB-RDP-EXT1 */
#define DEF_XML_CONN_SDH_OBJECT      54     /* server-data-hook-object */
#define DEF_XML_CONN_SDH_S           55     /* server-data-hook        */
#define DEF_XML_CONN_MAX             54     /* without server-data-hook */
//boc_use_csssl;                /* use client-side-SSL     */

struct dsd_conndef_e {                      /* connection definition   */
   char       *achc_keyword;                /* function name           */
   int        imc_mask;                     /* mask how used           */
};

#define D_MASK_CLIENT_ONLY         1
#define D_MASK_CLIENT_AND_SERVER   2

static const struct dsd_conndef_e dsrs_conndef_e[] = {
  { "gateport", D_MASK_CLIENT_ONLY },
  { "permanently-moved-from-port", D_MASK_CLIENT_ONLY },
  { "permanently-moved-to-port", D_MASK_CLIENT_ONLY },
  { "permanently-moved-URL", D_MASK_CLIENT_ONLY },
  { "domain-information", D_MASK_CLIENT_ONLY },
  { "HTTP-redirect-library", D_MASK_CLIENT_ONLY },
  { "HTTP-redirect-library-object", D_MASK_CLIENT_ONLY },
  { "plain-HTTP-library", D_MASK_CLIENT_ONLY },
  { "plain-HTTP-library-object", D_MASK_CLIENT_ONLY },
  { "do-not-close-by-load-balancing", D_MASK_CLIENT_ONLY },
  { "conn-type", D_MASK_CLIENT_ONLY },
  { "Kerberos-5-keytab-file", D_MASK_CLIENT_ONLY },
  { "Kerberos-5-service-principal-name", 0 },
  { "serverineta", 0 },
  { "serverport", 0 },
  { "DNS-lookup-before-connect", 0 },
  { "backlog", D_MASK_CLIENT_ONLY },
  { "gate-in-ineta", D_MASK_CLIENT_ONLY },
  { "gate-out-ineta", 0 },
  { "connect-round-robin", 0 },
//{ "use-ineta-appl", D_MASK_CLIENT_ONLY },
  { "use-ineta-appl", 0 },
  { "use-client-side-SSL", 0 },
  { "wts-server-list", 0 },
#ifdef OLD_111208
  { "wts-br-port", 0 },
#endif
  { "wts-broadcast-port", 0 },
//{ "wts-check-name", D_MASK_CLIENT_ONLY },
  { "wts-check-name", 0 },
#ifdef OLD_111205
  { "blade-server-list", 0 },
  { "blade-br-port", 0 },
  { "blade-check-name", 0 },
#endif
  { "VDI-suos-list", 0 },
  { "VDI-broadcast-port", 0 },
  { "VDI-check-name", 0 },
  { "protocol", 0 },
  { "hcproxauth", 0 },
  { "target-filter", 0 },
  { "authentication-library", D_MASK_CLIENT_ONLY },
  { "authentication-library-object", D_MASK_CLIENT_ONLY },
#ifdef D_FUNC01
  { "authmethod", D_MASK_CLIENT_ONLY },
  { "auth-config-file", D_MASK_CLIENT_ONLY },
  { "authparm1", D_MASK_CLIENT_ONLY },
#endif
#ifdef OLD_111205
  { "authentication-radius", D_MASK_CLIENT_AND_SERVER },
#endif
  { "radius-group", D_MASK_CLIENT_AND_SERVER },
//{ "dynamic-radius", D_MASK_CLIENT_AND_SERVER },
  { "user-list", D_MASK_CLIENT_ONLY },
  { "language", D_MASK_CLIENT_ONLY },
  { "select-server", D_MASK_CLIENT_ONLY },
  { "timeout", D_MASK_CLIENT_AND_SERVER },
  { "max-session", D_MASK_CLIENT_ONLY },
  { "SSL-config-file", D_MASK_CLIENT_ONLY },
  { "SSL-certdb-file", D_MASK_CLIENT_ONLY },
  { "SSL-password-file", D_MASK_CLIENT_ONLY },
  { "threshold-session", D_MASK_CLIENT_ONLY },
  { "Kerberos-5-KDC", D_MASK_CLIENT_ONLY },
//{ "dynamic-Kerberos-5-KDC", D_MASK_CLIENT_ONLY },
  { "LDAP-service", D_MASK_CLIENT_AND_SERVER },
//{ "dynamic-LDAP", D_MASK_CLIENT_AND_SERVER },
  { "RPC-DC", D_MASK_CLIENT_AND_SERVER },
  { "L2TP-gateway", D_MASK_CLIENT_AND_SERVER },
  { "server-network", D_MASK_CLIENT_AND_SERVER },
//{ "PPP-authentication-method", D_MASK_CLIENT_ONLY },
  { "PPP-authentication-method", 0 },
  { "do-not-check-SSTP-channel-bindings", 0 },
  { "disable-naegle-send-client", D_MASK_CLIENT_AND_SERVER },
  { "disable-naegle-send-server", D_MASK_CLIENT_AND_SERVER },
  { "option-connect-other-server", 0 },
  { "disable-SDH-HOB-RDP-EXT1", 0 },
  { "server-data-hook-object", 0 },
  { "server-data-hook", 0 }
};

#ifdef B080609
static struct dsd_sdh_lib1 dss_sdh_lib1_rdp1 = { NULL, NULL,
   (amd_hlclib01) &m_rdp1_hlclib01, NULL };
#endif
static struct dsd_ext_lib1 dss_ext_lib1_rdp1 = {
   NULL,                                    /* adsc_next - field for chaining */
   TRUE,                                    /* boc_loaded - library has been loaded */
#ifndef HL_UNIX
   0,                                       /* umc_load_err - error from load library */
#else
   NULL,                                    /* achc_load_err - error from load library */
#endif
   1,                                       /* imc_usage_count - usage count */
   FALSE,                                   /* boc_hrl_checked - HTTP-redirect was checked */
   FALSE,                                   /* boc_phl_checked - plain-HTTP-library was checked */
   FALSE,                                   /* boc_at3_checked - HOB-WSP-AT3 was checked */
   TRUE,                                    /* boc_sdh_checked - server-data-hook was checked */
   FALSE,                                   /* boc_bgt_checked - background-task was checked */
   NULL,                                    /* dsc_hlibmod - address of library */
   NULL,                                    /* amc_hrl_entry - entry for HTTP-redirect-library */
   NULL,                                    /* amc_hrl_conf - entry for HTTP-redirect-library configuration */
   NULL,                                    /* amc_phl_entry - entry for plain-HTTP-library */
   NULL,                                    /* amc_phl_conf - entry for plain-HTTP-library configuration */
   NULL,                                    /* amc_at3_entry - entry for HOB-WSP-AT3 call */
   NULL,                                    /* amc_at3_conf - entry for HOB-WSP-AT3 configuration */
   (amd_hlclib01) &m_rdp1_hlclib01,         /* amc_hlclib01 - entry for SDH call */
   NULL,                                    /* amc_hlclib_conf - entry for SDH configuration */
   NULL,                                    /* amc_bgt_entry - entry for background-task call */
   NULL                                     /* amc_bgt_conf - entry for background-task configuration */
};

#ifdef NEW_150412
static struct dsd_ext_lib1 dss_ext_lib1_rdp_rdg_out_1 = {
   NULL,                                    /* adsc_next - field for chaining */
   TRUE,                                    /* boc_loaded - library has been loaded */
#ifndef HL_UNIX
   0,                                       /* umc_load_err - error from load library */
#else
   NULL,                                    /* achc_load_err - error from load library */
#endif
   1,                                       /* imc_usage_count - usage count */
   FALSE,                                   /* boc_hrl_checked - HTTP-redirect was checked */
   FALSE,                                   /* boc_phl_checked - plain-HTTP-library was checked */
   FALSE,                                   /* boc_at3_checked - HOB-WSP-AT3 was checked */
   TRUE,                                    /* boc_sdh_checked - server-data-hook was checked */
   FALSE,                                   /* boc_bgt_checked - background-task was checked */
   NULL,                                    /* dsc_hlibmod - address of library */
   NULL,                                    /* amc_hrl_entry - entry for HTTP-redirect-library */
   NULL,                                    /* amc_hrl_conf - entry for HTTP-redirect-library configuration */
   NULL,                                    /* amc_phl_entry - entry for plain-HTTP-library */
   NULL,                                    /* amc_phl_conf - entry for plain-HTTP-library configuration */
   NULL,                                    /* amc_at3_entry - entry for HOB-WSP-AT3 call */
   NULL,                                    /* amc_at3_conf - entry for HOB-WSP-AT3 configuration */
   (amd_hlclib01) &m_rdp_rdg_out_hlclib01,  /* amc_hlclib01 - entry for SDH call */
   NULL,                                    /* amc_hlclib_conf - entry for SDH configuration */
   NULL,                                    /* amc_bgt_entry - entry for background-task call */
   NULL                                     /* amc_bgt_conf - entry for background-task configuration */
};

static struct dsd_ext_lib1 dss_ext_lib1_rdp_rdg_in_1 = {
   NULL,                                    /* adsc_next - field for chaining */
   TRUE,                                    /* boc_loaded - library has been loaded */
#ifndef HL_UNIX
   0,                                       /* umc_load_err - error from load library */
#else
   NULL,                                    /* achc_load_err - error from load library */
#endif
   1,                                       /* imc_usage_count - usage count */
   FALSE,                                   /* boc_hrl_checked - HTTP-redirect was checked */
   FALSE,                                   /* boc_phl_checked - plain-HTTP-library was checked */
   FALSE,                                   /* boc_at3_checked - HOB-WSP-AT3 was checked */
   TRUE,                                    /* boc_sdh_checked - server-data-hook was checked */
   FALSE,                                   /* boc_bgt_checked - background-task was checked */
   NULL,                                    /* dsc_hlibmod - address of library */
   NULL,                                    /* amc_hrl_entry - entry for HTTP-redirect-library */
   NULL,                                    /* amc_hrl_conf - entry for HTTP-redirect-library configuration */
   NULL,                                    /* amc_phl_entry - entry for plain-HTTP-library */
   NULL,                                    /* amc_phl_conf - entry for plain-HTTP-library configuration */
   NULL,                                    /* amc_at3_entry - entry for HOB-WSP-AT3 call */
   NULL,                                    /* amc_at3_conf - entry for HOB-WSP-AT3 configuration */
   (amd_hlclib01) &m_rdp_rdg_in_hlclib01,   /* amc_hlclib01 - entry for SDH call */
   NULL,                                    /* amc_hlclib_conf - entry for SDH configuration */
   NULL,                                    /* amc_bgt_entry - entry for background-task call */
   NULL                                     /* amc_bgt_conf - entry for background-task configuration */
};
#endif

#ifdef XYZ1
struct dsd_ext_lib1 {                       /* external loaded library */
   struct dsd_ext_lib1 *adsc_next;          /* field for chaining      */
   BOOL       boc_loaded;                   /* library has been loaded */
#ifndef HL_UNIX
   DWORD      umc_load_err;                 /* error from load library */
#else
   char       *achc_load_err;               /* error from load library */
#endif
   int        imc_usage_count;              /* usage count             */
   BOOL       boc_hrl_checked;              /* HTTP-redirect was checked */
   BOOL       boc_at3_checked;              /* HOB-WSP-AT3 was checked */
   BOOL       boc_sdh_checked;              /* server-data-hook was checked */
   BOOL       boc_bgt_checked;              /* background-task was checked */
   HL_HMODULE dsc_hlibmod;                  /* address of library      */
   amd_call_hrl_1 amc_hrl_entry;            /* entry for HTTP-redirect-library */
   amd_hlr_conf amc_hrl_conf;               /* entry for HTTP-redirect-library configuration */
   amd_call_wspat3_1 amc_at3_entry;         /* entry for HOB-WSP-AT3 call */
// to-do 11.12.11 KB - is wrong type, but other header file
   amd_hlclib_conf amc_at3_conf;            /* entry for HOB-WSP-AT3 configuration */
   amd_hlclib01 amc_hlclib01;               /* entry for SDH call          */
   amd_hlclib_conf amc_hlclib_conf;         /* entry for SDH configuration */
   amd_call_bgt_1 amc_bgt_entry;            /* entry for background-task call */
   amd_bgt_conf amc_bgt_conf;               /* entry for background-task configuration */
};

#endif

struct dsd_conf_service_type {              /* configuration service type definition */
   char       *achc_keyword;                /* service type            */
   struct dsd_service_conf_1 * (* amc_conf) ( DOMNode *,
                       void * (* amc_call_dom) ( DOMNode *, ied_hlcldom_def ),   /* call DOM */
                       HL_WCHAR * );

};

static const struct dsd_conf_service_type dsrs_conf_service_type[] = {
  { "Virus-Checking-ICAP-HTTP", &m_service_vc_icap_http_conf }
};

static const HL_WCHAR wcrs_const_any[] = { (HL_WCHAR) 'A', (HL_WCHAR) 'N', (HL_WCHAR) 'Y', 0 };

struct dsd_func_e {                         /* function element        */
   char       *achc_function;               /* function name           */
   int        inc_func_value;               /* function value          */
};

static const struct dsd_func_e dsrs_func_e[] = {
   { "DIRECT", DEF_FUNC_DIR },
#ifndef HL_UNIX
   { "RDP", DEF_FUNC_RDP },
   { "HOB-RDP-EXT1", ied_scp_hrdpe1 },      /* protocol HOB MS RDP Extension 1 */
   { "ICA", DEF_FUNC_ICA },
#endif
   { "PASS-THRU-TO-DESKTOP", DEF_FUNC_PTTD },
   { "SELECT-SOCKS5-HTTP", DEF_FUNC_SS5H },
   { "HOB-PPP-T1", DEF_FUNC_HPPPT1 },       /* set function HOB-PPP-T1 Tunnel */
   { "SSTP", DEF_FUNC_SSTP },               /* set function SSTP Tunnel */
   { "CASCADED-WSP", DEF_FUNC_CASC_WSP },   /* set function CASCADED-WSP */
   { "L2TP", DEF_FUNC_L2TP },               /* set function L2TP UDP connection */
#ifdef XYZ1
   { "RDG-OUT", DEF_FUNC_RDG_OUT },         /* set function remote desktop gateway out */
   { "RDG-IN", DEF_FUNC_RDG_IN },           /* set function remote desktop gateway in */
#endif
   { "WTSGATE", DEF_FUNC_WTS },
   { "VDI-WSP-GATE", DEF_FUNC_VDI_WSP }
};

struct dsd_ppp_auth_e {                     /* ppp authentication element */
   char       *achc_param;                  /* parameter name          */
   ied_ppp_auth_def iec_ppp_auth;           /* authentication-methods  */
};

static const struct dsd_ppp_auth_e dsrs_ppp_auth_e[] = {
   { "pass-thru", ied_pppa_pass_thru },     /* pass-thru               */
   { "none", ied_pppa_none },               /* no authentication       */
   { "PAP", ied_pppa_pap },                 /* PAP                     */
   { "CHAP", ied_pppa_chap },               /* CHAP                    */
   { "MS-CHAP-V2", ied_pppa_ms_chap_v2 },   /* MS-CHAP-V2              */
   { "EAP", ied_pppa_eap }                  /* EAP                     */
};

#ifdef HL_UNIX
static HL_WCHAR wcs_empty = 0;
static HL_WCHAR wcrs_const_https[] = { 0X0048, 0X0054, 0X0054, 0X0050, 0X0053, 0 };
static HL_WCHAR wcrs_const_sep_1[] = { 0X003A, 0X002F, 0X002F };  /* "://" */
#endif

#ifdef HL_IPV6
extern BOOL   bog_ipv6;                     /* set if IP Version 6     */
#endif

extern "C" BOOL bog_log;                    /* status event log        */
#ifdef HL_UNIX
extern "C" enum ied_charset ieg_charset_system;  /* character set in use */
#endif
extern struct dsd_radius_control dsg_radius_control;  /* control radius */
extern struct dsd_cdaux_control dsg_cdaux_control;  /* control m_cdaux */

static BOOL m_general_snmp( struct dsd_conf_serv *, DOMNode * );
static void m_general_udp_gate( struct dsd_conf_serv *, DOMNode * );
static void m_conf_udp_gw_ineta( DOMNode *, struct dsd_loconf_1 * );
static struct dsd_domain_info_1 * m_conf_domain_info_1( struct dsd_conf_serv *, DOMNode * );
static struct dsd_targfi_1 * m_conf_targfi_1( struct dsd_conf_serv *, DOMNode * );
static BOOL m_conf_conn( struct dsd_conf_serv * );
static BOOL m_conf_hrl_ele( struct dsd_conf_serv *, int );
static BOOL m_conf_phl_ele( struct dsd_conf_serv *, int );
static int m_conf_phl_load( struct dsd_conf_serv *, int );
static BOOL m_conf_hobwspat3( struct dsd_conf_serv *, int );
static int m_conf_sdh_load( struct dsd_conf_serv *, int );
static void m_conf_bgt_1( DOMNode *, struct dsd_conf_serv * );
static struct dsd_ext_lib1 * m_conf_ext_lib_load( HL_WCHAR *, struct dsd_loconf_1 * );
static void m_conf_cluster( DOMNode *, struct dsd_loconf_1 * );
static int m_get_cluster_entry_number( HL_WCHAR *, HL_WCHAR *, HL_WCHAR * );
static void m_conf_ldap_t( struct dsd_ldap_t_dummy *, struct dsd_ldap_t_dummy * );
static void m_conf_ldap_s( DOMNode *, struct dsd_loconf_1 *, struct dsd_ldap_t_dummy * );
static void m_conf_service( DOMNode *, struct dsd_loconf_1 * );
static void m_conf_radius_group( DOMNode *, struct dsd_conf_serv * );
static void m_conf_hrl_obj( DOMNode *, struct dsd_conf_serv * );
static void m_conf_phl_obj( DOMNode *, struct dsd_conf_serv * );
static void m_conf_wspat_obj( DOMNode *, struct dsd_conf_serv * );
static void m_conf_sdh_obj( DOMNode *, struct dsd_conf_serv * );
static void m_conf_l2tp_gw( DOMNode *, struct dsd_conf_serv * );
static void m_conf_krb5_kdc( DOMNode *, struct dsd_conf_serv * );
static void m_conf_raw_packet_if( DOMNode *, struct dsd_conf_serv * );
static void m_msg_open_listen( void *, char *, int );
static void m_msg_open_radius( void *, char *, int );
#ifdef D_DIAGNOSE_01
static void m_check_rpi( struct dsd_raw_packet_if_conf * );
#endif
#ifdef INCL_TEST_RPC
static void m_test_rpc_gen( struct dsd_conf_serv *adsp_cs );
#endif

struct dsd_conf_serv {                      /* control configuration c */
   struct dsd_loconf_1 *adsc_loconf_1_fill;  /* configuration to be filled */
   struct dsd_domain_info_def_1 *adsc_domain_info_def_1_ch;  /* chain of domain-information definition */
   struct dsd_user_group *adsc_usgro_anchor;  /* user-group entries    */
#ifdef OLD_1112
   struct dsd_radius_entry *adsc_raent_anchor;  /* radius entries      */
#endif
   struct dsd_targfi_1 *adsc_targfi_1_anchor;  /* chain target-filter  */
   struct dsd_server_list_1 *adsc_server_list_1_anchor;  /* chain server-list */
   struct dsd_ldap_group *adsc_ldap_group;  /* chain of LDAP groups    */
#ifdef B090829
   struct dsd_krb5_kdc_1 *adsc_krb5_kdc_1;  /* chain of Kerberos 5 KDC */
#endif
   DOMNode    *adsc_node_conf;              /* part of configuration   */
// BOOL       boc_return;                   /* return success          */
#ifdef B080324
   BOOL       boc_blacont_def;              /* BLADE Control defined   */
#endif
   BOOL       boc_supp_w_lt_nr;             /* suppress-warning-LDAP-template-not-referenced */
   BOOL       boc_dyn_radius;               /* dynamic-radius          */
   BOOL       boc_dyn_krb5;                 /* dynamic-Kerberos-5-KDC  */
   BOOL       boc_dyn_ldap;                 /* dynamic-LDAP            */
   BOOL       boc_dsdhhre1;                 /* disable-SDH-HOB-RDP-EXT1 */
   char       *achc_msgtext_1;              /* message text 1          */
   HL_WCHAR   *awcc_msgtext_1;              /* message text variable 1 */
   char       *achc_msgtext_2;              /* message text 2          */
   char       *achc_msgtext_3;              /* message text 3          */
// WCHAR      *awcc_msgtext_2;              /* message text variable 2 */
   HL_WCHAR   *awcc_name_value;             /* name of this entry      */
   struct dsd_gate_1 dsc_gate;              /* gateway listening       */
   struct dsd_server_conf_1 dsc_server_conf_1_c;  /* configuration server */
#ifdef B111219
   struct dsd_radius_conf dsc_radius_conf;  /* radius configuration    */
#endif
#ifdef B080407
   HL_WCHAR   *awcc_gateport;               /* service gate / port     */
#endif
#ifdef B141227
   HL_WCHAR   *awcc_in_ineta;               /* value of INETA input    */
#endif
   struct dsd_chain_listen_ineta_1 *adsc_cli1;  /* chain INETA listen  */
   HL_WCHAR   *awcc_node_tm_url;            /* value permanently-moved-URL */
   HL_WCHAR   *awcc_node_krb5_princ;        /* value Kerberos-5-service-principal-name */
   HL_WCHAR   *awcc_node_serverineta;       /* value serverineta       */
   struct dsd_temp_node dsc_tn_krb5_keytab;  /* value Kerberos-5-keytab-file */
#ifdef B111222
   void **    avpc_radius_chain;            /* chain of radius names   */
#endif
   void **    avpc_usgro_chain;             /* chain of user groups    */
   void **    avpc_selserv_chain;           /* chain of server-lists   */
   void **    aarc_radius_array;            /* array of radius-server  */
   void **    aarc_krb5_array;              /* array of KRB5           */
   void **    aarc_ldap_array;              /* array of LDAP           */
   struct dsd_hrl_def_1 *adsc_hrl_def;      /* for loading of HTTP-redirect-library */
   struct dsd_hrl_obj_1 *adsc_hrl_obj;      /* HTTP-redirect-library-object */
   struct dsd_phl_def_1 *adsc_phl_def;      /* for loading of plain-HTTP-library */
#ifdef B130227
   struct dsd_phl_obj_1 *adsc_phl_obj;      /* plain-HTTP-library-object */
#endif
   struct dsd_phl_def_1 *adsc_phl_chain;    /* chain of plain-HTTP-libraries */
   struct dsd_wspat_def_1 *adsc_hobwspat3_def_1;  /* authentication library definition */
   struct dsd_wspat_obj_1 *adsc_wspat_obj;  /* definition authentication-library-object */
   struct dsd_sdh_def_1 *adsc_sdhlib_chain;  /* chain server data hook global */
   struct dsd_wtsg_1 *adsc_wtsg1_ch;        /* chain for WTSGATE       */
#ifdef OLD01
   BOOL       boc_auli_set;                 /* authentification set    */
   HL_WCHAR   *awcc_auli_libname;           /* value of authentication */
   HL_WCHAR   *awcc_auli_filename;          /* value of authentication */
   HL_WCHAR   *awcc_auli_staparm1;          /* value of authentication */
   HL_WCHAR   *awcc_auli_staparm2;          /* value of authentication */
   HL_WCHAR   *awcc_auli_staparm3;          /* value of authentication */
#endif
   struct dsd_temp_snmp_tt_1 *adsc_tstt_1_ch;  /* chain of temporary SNMP trap target */
   struct dsd_snmp_conf dsc_snmp_conf;      /* SNMP configuration      */
   struct dsd_temp_udp_gate_1 *adsc_tug1_ch;  /* chain of temporary UDP-gate */
   char       *achc_fconfig;                /* SSL-config-file         */
   unsigned int unc_len_fconfig;            /* len name SSL-config-file */
   char       *achc_fcertdb;                /* SSL-certdb-file         */
   unsigned int unc_len_fcertdb;            /* len name SSL-certdb-file */
   char       *achc_password;               /* SSL-password-file       */
   unsigned int unc_len_password;           /* len name SSL-password-file */
   char       chrc_prot_1[ DEF_MAX_LEN_PROT ];  /* protocol UTF-8      */
};

struct dsd_user_ineta_c1 {                  /* user entry configured INETA */
   struct dsd_user_ineta_c1 *adsc_next;     /* next in chain           */
   int        imc_func;                     /* function of INETA       */
   struct dsd_ineta_single_1 dsc_ineta_s1;  /* single INETA target / listen / configured */
};

struct dsd_targfi_dummy {                   /* dummy target-filter     */
   struct dsd_targfi_dummy *adsc_next;      /* next in chain           */
   DOMNode    *adsc_node_targfi_d;          /* save section target-filter */
};

struct dsd_ldap_s_dummy {                   /* dummy LDAP service      */
   struct dsd_ldap_s_dummy *adsc_next;      /* next in chain           */
   DOMNode    *adsc_node_ldap_s_d;          /* save section LDAP service */
};

struct dsd_ldap_t_dummy {                   /* dummy LDAP template     */
   struct dsd_ldap_t_dummy *adsc_next;      /* next in chain           */
   DOMNode    *adsc_node_ldap_t_d;          /* save section LDAP template */
   HL_WCHAR * awcc_te_name;                 /* LDAP template name      */
   struct dsd_ldap_template *adsc_ldap_template;  /* storage LDAP template */
   BOOL       boc_referenced;               /* entry is referenced     */
};

struct dsd_service_dummy {                  /* dummy service           */
   struct dsd_service_dummy *adsc_next;     /* next in chain           */
   DOMNode    *adsc_node_service_d;         /* save section service    */
};

struct dsd_ineta_temp_1 {                   /* temporary INETA         */
   struct dsd_ineta_temp_1 *adsc_next;      /* next in chain           */
   int        imc_func;                     /* function                */
   int        imc_no_ineta;                 /* number of INETAs        */
   BOOL       boc_last_in_chunk;            /* this is last in chunk   */
   unsigned short int usc_family;           /* family IPV4 / IPV6      */
   unsigned short int usc_length;           /* length of following address */
   char       chrc_ineta_start[16];         /* INETA start             */
   char       chrc_ineta_end[16];           /* INETA end including     */
};

struct dsd_port_temp_1 {                    /* temporary port          */
   struct dsd_port_temp_1 *adsc_next;       /* next in chain           */
   BOOL       boc_invalid;                  /* entry is invalid        */
   unsigned short int usc_port_start;       /* port-start              */
   unsigned short int usc_port_end;         /* port-end                */
};

#ifdef B100726
struct dsd_temp_snmp_tt_1 {                 /* temporary SNMP trap target */
   struct dsd_temp_snmp_tt_1 *adsc_next;    /* for chaining            */
   HL_WCHAR * awcc_comment;                 /* comment                 */
   int        imc_port;                     /* UDP port trap target    */
   struct dsd_udp_param_1 dsc_udp_param_1;  /* definition UDP parameter */
};
#endif
struct dsd_temp_snmp_tt_1 {                 /* temporary SNMP trap target */
   struct dsd_temp_snmp_tt_1 *adsc_next;    /* for chaining            */
   HL_WCHAR * awcc_go_ineta;                /* gate-out-ineta          */
   HL_WCHAR * awcc_tt_ineta;                /* target-ineta            */
   HL_WCHAR * awcc_comment;                 /* comment                 */
   int        imc_port;                     /* UDP port trap target    */
   int        imc_xml_lineno;               /* line number in XML configuration file */
   int        imc_xml_col;                  /* column in XML configuration file */
   BOOL       boc_invalid;                  /* the entry is invalid    */
   struct dsd_udp_param_1 dsc_udp_param_1;  /* definition UDP parameter */
};

struct dsd_temp_udp_gate_1 {                /* temporary UDP-gate      */
   struct dsd_temp_udp_gate_1 *adsc_next;   /* for chaining            */
   HL_WCHAR * awcc_g_ineta;                 /* gate-ineta              */
   int        imc_port;                     /* UDP port                */
   int        imc_xml_lineno;               /* line number in XML configuration file */
   int        imc_xml_col;                  /* column in XML configuration file */
};

struct dsd_radius_pass_msg_1 {              /* pass message for radius */
   struct dsd_radius_group *adsc_radius_group;  /* definition Radius group */
   struct dsd_radius_entry *adsc_radius_entry;  /* definition Radius server */
   int        imc_xml_lineno;               /* line number in XML configuration file */
   int        imc_xml_col;                  /* column in XML configuration file */
};

/*+-------------------------------------------------------------------+*/
/*| Procedure division.                                               |*/
/*+-------------------------------------------------------------------+*/

/** parse XML configuration file and retrieve settins                  */
extern "C" BOOL m_build_conf_01( XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument *adpnode,
                                 struct dsd_loconf_1 *adsp_loconf_1_fill,
                                 amd_startprog amp_startprog ) {
   struct dsd_conf_serv dsl_cs;             /* for subroutines         */
   struct dsd_wsp_startprog dsl_wsp_startprog;  /* pass parameters start program */
   int        iml_rc;                       /* return code             */
   int        iml_cmp;                      /* compare values          */
   int        iu1, iu2;                     /* working variable        */
   int        iml1, iml2, iml3;             /* working variables       */
   int        inl1, inl2, inl3, inl4, inl5, inl6;  /* working variables */
#ifdef B080407
   int        iml_sock_max, iml_sock_act;   /* count sockets           */
#endif
#ifndef B080407
   int        iml_stor_1;                   /* length of storage       */
#endif
// DWORD      dwl1;                         /* working variable        */
   char       *achl1, *achl2;               /* working variables       */
   char       *achl_w1;                     /* working variable        */
   HL_WCHAR   *awcl1, *awcl2;               /* working variables       */
   HL_WCHAR   wcl1;                         /* working variable        */
   HL_LONGLONG ill1, ill2;                  /* working variables       */
   BOOL       bol_rc;                       /* return value            */
   DWORD      dwl_error;                    /* return errors           */
#ifdef HL_UNIX
   char       **aach_wp1;                   /* work-pointer            */
#endif
// char     *au1, *au2;
// BOOL     bou1;
   BOOL       bol1, bol2;                   /* working variables       */
   enum ied_opli_ret iel_oplir;             /* return from open listen */
   struct dsd_gate_1 *adsl_gate_w1;         /* gateway                 */
   HL_WCHAR   *awcl_sip_local_ineta;        /* SIP-local-ineta defined */
   struct dsd_save_conf *adsl_sc_w1;        /* save configured item - working-variable */
   struct dsd_save_conf *adsl_sc_w2;        /* save configured item - working-variable */
   struct dsd_save_conf *adsl_sc_udp_gw_ineta;  /* save configured item UDP gateway INETA */
   struct dsd_temp_snmp_tt_1 *adsl_tstt_1_w1;  /* working variable     */
   struct dsd_temp_snmp_tt_1 *adsl_tstt_1_w2;  /* working variable     */
   struct dsd_snmp_trap_target *adsl_snmp_trap_target_w1;  /* working variable */
   struct dsd_temp_udp_gate_1 *adsl_tug1_w1;  /* temporary UDP-gate    */
   struct dsd_ext_lib1 *adsl_ext_lib1_acsdh;  /* automatic configured Server-Data-Hook */
   struct dsd_domain_info_def_1 *adsl_domain_info_def_1_w1;  /* working variable domain-information definition */
   time_t     dsl_time_1;                   /* for time                */
   BOOL       borl_general[ DEF_XML_GENERAL_MAX ];
#ifdef B080324
   BOOL       rboblacont[ DEF_XML_BLACONT_MAX ];
#endif
#ifdef OLD01
   BOOL borl_radius[ DEF_XML_RADIUS_S_MAX ];
#endif
   BOOL       bol_usgro_priv_mask;          /* privileges defined      */
   BOOL       bol_usgro_goutineta;
   BOOL       bol_usgro_selserv;
#ifdef OLD_1112
   BOOL       bol_radius_used;              /* needs Radius support    */
#endif
#ifdef OLD01
   BOOL borl_usgus[ DEF_XML_USGUS_MAX ];
#endif
#define DEF_XML_AULI_LIBNAME       1
#define DEF_XML_AULI_FILENAME      2
#define DEF_XML_AULI_STAPARM1      3
#define DEF_XML_AULI_STAPARM2      4
#define DEF_XML_AULI_STAPARM3      5
#define DEF_XML_AULI_USAGENAME     6
   BOOL       borl_ocsps[ 6 ];              /* for OCSP section        */
#ifdef OLD01
   BOOL       borl_csssl[ 4 ];              /* for client-side-SSL     */
#endif
#ifdef OLD01
   struct hostent *duhostEntry;
#endif
   BOOL       bol_log;                      /* no event log yet        */
   int        iml_priority_process;         /* priority of process     */
   int        iml_no_cpu;                   /* number of CPUs          */
#ifdef D_FUNC01
   en_auth_type ienuauty;                   /* type of authentication  */
// char     byarrufnauthcf[ MAX_PATH ];     /* file name auth config   */
   en_at_funcauth ienuatfa;                 /* parm1 value             */
   void     *aud_auth_startup;              /* returned from auth sta  */
#endif
   struct dsd_cs_ssl_conf_p {               /* configuration parameters Client-Side SSL */
     char     *achc_fconfig;                /* SSL-config-file         */
     unsigned int unc_len_fconfig;          /* len name SSL-config-file */
     char     *achc_fcertdb;                /* SSL-certdb-file         */
     unsigned int unc_len_fcertdb;          /* len name SSL-certdb-file */
     char     *achc_password;               /* SSL-password-file       */
     unsigned int unc_len_password;         /* len name SSL-password-file */
   } dsl_cs_ssl_cp;
   enum ied_lierr iel_lierr;                /* state LISTEN-ERROR      */
   HL_WCHAR   *awcl_installation_name;      /* installation-name UTF-16 */
#ifndef HL_UNIX
   HL_WCHAR   *awcl_rev_server;             /* for RegisterEventSourceW */
   HL_WCHAR   *awcl_rev_source;             /* for RegisterEventSourceW */
   HL_WCHAR   *awcl_windows_pipe_name;      /* <Windows-named-pipe>    */
#else
   HL_WCHAR   *awcl_unix_domain_socket;     /* <Unix-Domain-Socket>    */
#ifndef B160423
   HL_WCHAR   *awcl_general_ext_random_g_domain_socket_name;  /* external Random Generator */
#endif
#endif
   HL_WCHAR   *awcl_general_security_token;  /* security-token UTF-16  */
   char       *achl_general_sec_token_mem;  /* security-token UTF-8    */
   int        iml_len_general_sec_token;    /* length security-token UTF-8 */
   int        iml_def_prot;                 /* set defined protocols   */
   class dsd_file_read_1 dsl_file_read_1;   /* class read input file   */
#ifdef B130405
   BOOL       bol_http;                     /* server-entry HTTP def   */
#endif
   DOMNode *adunode1;
   DOMNode *adunode2;
   DOMNode *adunode3;
   DOMNode *adunode4;
   DOMNode *adunode5;
   DOMNode *adunode_save1;
   DOMNode *adunode_general;                /* save section general    */
#ifdef B080324
   DOMNode *adunode_blade_control;          /* save section blade-cont */
#endif
   DOMNode    *adsl_node_03;
   DOMNode    *adsl_node_ocsp;              /* save OCSP-section       */
   DOMNode    *adsl_node_csssl;             /* save client-side-SSL    */
   DOMNode    *adsl_node_confp;             /* save configuration-parameters */
   DOMNode    *adsl_node_cluster;           /* save cluster            */
   DOMNode *adunode_name;
   DOMNode *adunode_4_name;
#ifndef HL_UNIX
   DOMNode    *adsl_node_gen_wcd;           /* save section win-co-dum */
#endif
   struct dsd_targfi_dummy *adsl_targfi_dummy_anchor;  /* anchor target-filter */
   struct dsd_targfi_dummy *adsl_targfi_dummy_last;  /* last in chain target-filter */
   struct dsd_targfi_dummy *adsl_targfi_dummy_w1;  /* working-variable target-filter */
   struct dsd_targfi_1 *adsl_targfi_w1;     /* working variable        */
   struct dsd_targfi_1 *adsl_targfi_w2;     /* working variable        */
   struct dsd_targfi_1 *adsl_targfi_w3;     /* working variable        */
   struct dsd_ldap_s_dummy *adsl_ldap_s_dummy_anchor;  /* anchor LDAP services */
   struct dsd_ldap_s_dummy *adsl_ldap_s_dummy_last;  /* last in chain LDAP service */
   struct dsd_ldap_s_dummy *adsl_ldap_s_dummy_w1;  /* working-variable LDAP service */
   struct dsd_ldap_t_dummy *adsl_ldap_t_dummy_anchor;  /* anchor LDAP templates */
   struct dsd_ldap_t_dummy *adsl_ldap_t_dummy_last;  /* last in chain LDAP template */
   struct dsd_ldap_t_dummy *adsl_ldap_t_dummy_w1;  /* working-variable LDAP template */
   struct dsd_service_dummy *adsl_service_dummy_anchor;  /* anchor services */
   struct dsd_service_dummy *adsl_service_dummy_last;  /* last in chain service */
   struct dsd_service_dummy *adsl_service_dummy_w1;  /* working-variable service */
   struct dsd_save_conf *adsl_sc_anchor;    /* anchor configured nodes */
   struct dsd_save_conf *adsl_sc_last;      /* last in chain configured node found */
   struct dsd_l2tp_conf *adsl_l2tp_conf_w1;  /* working variable       */
   struct dsd_l2tp_conf *adsl_l2tp_conf_w2;  /* working variable       */
   struct dsd_l2tp_conf *adsl_l2tp_conf_w3;  /* working variable       */
   HL_WCHAR   *awcl_w1;
   HL_WCHAR * awcu1;
   HL_WCHAR * awcu2;
   HL_WCHAR * awcu3_name;
   HL_WCHAR * awcu3_value;
   HL_WCHAR * awcu4_name;
   HL_WCHAR * awcu4_value;
   HL_WCHAR * awcu_name_value;              /* value of name           */
   HL_WCHAR * awcu_4_name_value;            /* value of name           */
#ifdef D_FUNC01
   HL_WCHAR * awcu_auth_config_file;        /* value of file name      */
#endif
#ifdef B060518
   HL_WCHAR   *awcl_node_wol_r_ineta;       /* save ge wol relay ineta */
#endif
   struct dsd_pttd_ineta *adsl_pttd_ineta_w1;  /* wake-on-lan relays   */
   struct dsd_pttd_ineta *adsl_pttd_ineta_w2;  /* wake-on-lan relays   */
   struct dsd_pttd_ineta *adsl_pttd_ineta_w3;  /* wake-on-lan relays   */
   struct dsd_wspat_obj_1 *adsl_wspat_obj_w1;  /* working variable     */
   struct dsd_wspat_obj_1 *adsl_wspat_obj_w2;  /* working variable     */
   struct dsd_wspat_obj_1 *adsl_wspat_obj_w3;  /* working variable     */
   struct dsd_radius_group *adsl_radius_group_w1;  /* definition Radius group */
   struct dsd_radius_group *adsl_radius_group_w2;  /* definition Radius group */
   struct dsd_radius_group *adsl_radius_group_w3;  /* definition Radius group */
   struct dsd_krb5_kdc_1 *adsl_krb5_kdc_1_w1;  /* definition Kerberos 5 KDC */
   struct dsd_krb5_kdc_1 *adsl_krb5_kdc_1_w2;  /* definition Kerberos 5 KDC */
   struct dsd_krb5_kdc_1 *adsl_krb5_kdc_1_w3;  /* definition Kerberos 5 KDC */
   struct dsd_ldap_group *adsl_ldap_group_w1;  /* definition LDAP group */
   struct dsd_ldap_group *adsl_ldap_group_w2;  /* definition LDAP group */
   struct dsd_ldap_group *adsl_ldap_group_w3;  /* definition LDAP group */
   HL_WCHAR   *awcl_ocsps_url;              /* OCSP section URL        */
   HL_WCHAR   *awcl_ocsps_ocsp_ineta;       /* OCSP section OCSP-ineta */
   int        inrl_ocsps_numeric_v[3];      /* OCSP section numeric va */
   struct dsd_ocspext_1 dsl_ocspext_1_1;    /* OCSP structure extensio */
   struct dsd_hl_ocsp_d_1 *adsl_hl_ocsp_d_1;  /* HOBLink OCSP Definition */
   char       *achl_ocsp_ineta;             /* OCSP ineta char         */
   char       *achl_msg1_text;              /* for message             */
   HL_WCHAR   *awcl_msg1_node;              /* for message             */
#ifndef B080407
   struct dsd_listen_ineta_1 *adsl_listen_ineta_1_w1;  /* temporary storage */
   struct dsd_gate_listen_1 *adsl_gate_listen_1_w1;  /* listen part of gateway */
   struct dsd_ineta_single_1 *adsl_ineta_s_w1;  /* single INETA listen */
#endif
   char       *achrl_gwcd_text[5];          /* store text fields       */
   struct dsd_server_list_1 dsl_server_list_1_c;  /* conf server-list  */
   struct dsd_server_list_1 *adsl_server_list_1_w1;  /* working variable server-list */
   struct dsd_server_conf_1 *adsl_server_conf_1_w1;  /* working variable server-entry */
   struct dsd_server_conf_1 *adsl_server_conf_1_w2;  /* working variable server-entry */
   struct dsd_server_conf_1 *adsl_server_conf_1_w3;  /* working variable server-entry */
   struct dsd_server_list_1 *adsl_seli_1_w1;  /* working variable      */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_ext_lib1 *adsl_ext_lib1_w2;   /* external loaded library */
#ifdef B080324
   BOOL     bol_blacont_used;               /* BLADE Control used      */
   int      iml_blacont_sign_on_time;       /* sign on time            */
   HL_WCHAR * awcl_blacont_ineta;           /* IP-address tr twi       */
   int      iml_blacont_port;               /* port for inbound tr twi */
#define DEF_BLACONT_TWURL_TAB      16       /* increase table          */
   HL_WCHAR ** awcrl_blacont_twin_url_c;    /* table of twin URL curr  */
   HL_WCHAR ** awcrl_blacont_twin_url_o;    /* table of twin URL old   */
   int      iml_blacont_twurl_no_ele;       /* number of elements in t */
   int      iml_blacont_twurl_no_stor;      /* number of elements stor */
#endif
// void       *aud_auth_startup;            /* returned from auth sta  */
   struct dsd_wtsg_1 *adsl_wtsg1_1;         /* for WTSGATE             */
#ifdef B111217
#ifndef OLD01
   HL_WCHAR   *awcrl_radius_s_tab[ DEF_XML_RADIUS_S_MAX ];
   int        inl_radius_s_timeout;         /* value timeout radius-se */
#else
   HL_WCHAR   **aadsl_radius_s_var;         /* addr of addr            */
   WCHAR      *awcl_radius_s_gate_ineta;    /* value INETA gate        */
   WCHAR      *awcl_radius_s_radius_ineta;  /* value INETA radius-serv */
   WCHAR      *awcl_radius_s_port;          /* value port radius-serv  */
   int        inl_radius_s_timeout;         /* value timeout radius-se */
   WCHAR      *awcl_radius_s_shared_secret;  /* value shared secret    */
#endif
#endif
#ifdef OLD_1112
// struct dsd_radius_entry *adsl_raent_anchor;  /* radius entries      */
   struct dsd_radius_entry *adsl_raent_1;   /* working variable        */
   struct dsd_radius_entry *adsl_raent_2;   /* working variable        */
   ied_radius_e_def iel_red;                /* status of radius entry  */
#endif
#ifdef B111222
   void **    avpl_radius_ch_1;             /* working variable        */
#endif
   void **    avpl_selserv_chain;           /* chain of server-lists   */
   void **    avpl_usgro_ch_1;              /* working variable        */
   void **    avpl_selserv_ch_1;            /* working variable        */
   void **    avpl_selserv_ch_2;            /* working variable        */
   void **    avpl_selserv_ch_3;            /* working variable        */
   struct dsd_phl_def_1 *adsl_phl_ch_1;     /* working variable        */
// struct dsd_sdh_def_1 *adsl_sdhlib_chain;  /* chain server data hook */
   struct dsd_sdh_def_1 *adsl_sdhlib_ch_1;  /* working variable        */
   HL_WCHAR   *awcrl_user_var_tab[ DEF_XML_USGUS_MAX ];
   int        *adsl_user_var_n;             /* addr of number          */
   char       *achl_user_pwd_1;             /* address of password     */
   int        iml_len_user_pwd_1;           /* length of password      */
   struct dsd_user_group *adsl_usgro_w1;    /* structure user group    */
   struct dsd_user_group *adsl_usgro_w2;    /* structure user group    */
// struct dsd_user_group *adsl_usgro_anchor;  /* user-group entries    */
   struct dsd_user_entry *adsl_usent_w1;    /* structure user entry    */
   struct dsd_user_ineta_c1 *adsl_user_ineta_c1_ch;  /* user entry configured INETA */
   struct dsd_user_ineta_c1 *adsl_user_ineta_c1_w1;  /* user entry configured INETA */
   struct dsd_user_ineta_c1 *adsl_user_ineta_c1_new;  /* user entry configured INETA */
   struct dsd_filename_1 *adsl_filename_1_w1;  /* for filenames        */
#ifdef HL_UNIX
   struct dsd_filename_1 *adsl_filename_1_w2;  /* for filenames        */
#endif
   struct dsd_user_group dsl_usgro;         /* structure in stack      */
   struct dsd_user_entry dsl_usent;         /* structure in stack      */
   struct dsd_ineta_single_ret dsl_ineta_sret_sip_gw;
   struct dsd_ineta_single_ret dsl_ineta_sret_work;
   struct dsd_bind_ineta_1 dsl_bind_ineta_1_work;
   struct dsd_unicode_string dsl_ucs_l;     /* unicode string          */
#ifdef HL_SPECIAL_OFFER_CEBIT_04
   int        inl_count_user;               /* count the users         */
#endif
#ifdef OLD_1305
#ifndef HL_UNIX
   char       chrl_work1[512];              /* working variable        */
#else
   char       chrl_work1[ 16 * 1024 ];      /* working variable        */
#endif
#endif
#ifndef OLD_1305
   union {
#ifndef HL_UNIX
     char       chrl_work1[512];            /* work area               */
#else
     char       chrl_work1[ 16 * 1024 ];    /* work area               */
#endif
     struct dsd_unicode_string dsrl_ucs_cert_dns_names[ MAX_CERT_DNS_NAMES ];  /* maximum number of SSL certificate DNS names */
   };
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 called" );
#endif
// m_conf_conn( &dsl_cs );
   /* clear fields in loaded configuration                             */
   adsp_loconf_1_fill->adsc_gate_anchor = NULL;  /* clear anchor cha   */
#ifdef XYZ1
   adsp_loconf_1_fill->inc_max_poss_workthr = DEF_NO_WTHR_S_DEFAULT;
   adsp_loconf_1_fill->inc_max_act_workthr = DEF_NO_WTHR_A_DEFAULT;
#endif
   adsp_loconf_1_fill->inc_max_poss_workthr = 0;
   adsp_loconf_1_fill->inc_max_act_workthr = 0;
   adsp_loconf_1_fill->inc_prio_work_thread = DEF_PRIO_DEFAULT;
   adsp_loconf_1_fill->imc_epoch_loaded = (int) time( &dsl_time_1 );  /* get current time - date and time loaded */
   adsp_loconf_1_fill->adsc_snmp_conf = NULL;
   adsp_loconf_1_fill->adsc_ldap_group = NULL;  /* chain of LDAP groups */
   adsp_loconf_1_fill->adsc_radius_group = NULL;  /* chain of radius-group */
   strftime( adsp_loconf_1_fill->byrc_time, sizeof(adsp_loconf_1_fill->byrc_time),
             "%a %B %d %Y %H:%M:%S %Z",
             localtime( &dsl_time_1 ) );
   memset( &dsl_wsp_startprog, 0, sizeof(struct dsd_wsp_startprog) );  /* pass parameters start program */
/* 08.12.04 KB UUUUU */
// adsp_loconf_1_fill->inc_network_stat = 9;  /* give network statistic  */
   /* start DOM / XERCES processing                                    */
   adunode1 = (DOMNode *) adpnode->getDocumentElement();
   if (adunode1 == 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01001W Error no document element found" );
     return FALSE;
   }
   if (adunode1->getNodeType() != DOMNode::ELEMENT_NODE) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01002W Error first element is not ELEMENT_NODE" );
     return FALSE;
   }
   awcu1 = (HL_WCHAR *) adunode1->getNodeName();
   bol1 = m_cmp_u16z_u8z( &inl1, awcu1, "sslgate-configuration" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     m_hlnew_printf( HLOG_EMER1, "HWSPXMLC01003W Error first element name not \"sslgate-configuration\" / \"%(ux)s\"",
                     awcu1 );
     return FALSE;
   }
   adunode2 = adunode1->getFirstChild();
   if (adunode2 == NULL) {
     m_hlnew_printf( HLOG_EMER1, "HWSPXMLC01004W Error element name \"sslgate-configuration\" has no child" );
     return FALSE;
   }
   dsl_cs.adsc_loconf_1_fill = adsp_loconf_1_fill;  /* configuration to be filled */
   dsl_cs.avpc_selserv_chain = NULL;        /* no servers selected     */
#ifdef B080324
   dsl_cs.boc_blacont_def = FALSE;          /* BLADE Control not def   */
   bol_blacont_used = FALSE;                /* BLADE Control not used  */
   awcrl_blacont_twin_url_c = NULL;         /* table of twin URL       */
#endif
   dsl_cs.boc_supp_w_lt_nr = FALSE;         /* suppress-warning-LDAP-template-not-referenced */
#ifdef OLD_1112
   dsl_cs.adsc_raent_anchor = NULL;         /* radius entries          */
#endif
   dsl_cs.adsc_targfi_1_anchor = NULL;      /* clear chain target-filter */
   dsl_cs.adsc_usgro_anchor = NULL;         /* user-group entries      */
   dsl_cs.adsc_server_list_1_anchor = NULL;  /* chain server-list      */
   dsl_cs.adsc_tug1_ch = NULL;              /* chain of temporary UDP-gate */
   memset( &dsl_cs.dsc_snmp_conf, 0, sizeof(struct dsd_snmp_conf) );
   dsl_cs.adsc_tstt_1_ch = NULL;            /* clear chain of temporary SNMP trap target */
   dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf = NULL;  /* clear SNMP configuration */
   dsl_cs.adsc_loconf_1_fill->imc_udp_gate_ipv4_port = 0;  /* SNMP UDP port IPV4 */
   dsl_cs.adsc_loconf_1_fill->imc_udp_gate_ipv6_port = 0;  /* SNMP UDP port IPV6 */
#ifdef NOTYET050816
   dss_radius_control.adsc_raent_anchor = NULL;  /* no entry yet       */
   dss_radius_control.adsc_rathr_anchor = NULL;  /* no entry yet       */
   dss_radius_control.imc_port_wol = DEF_WOL_PORT;  /* po wake-on-lan  */
   dss_radius_control.umc_wol_r_ineta = INADDR_ANY;  /* IP-a wol relay */
#endif
#ifdef B060518
   awcl_node_wol_r_ineta = NULL;            /* save ge wol relay ineta */
#endif
#ifdef OLD_1112
   dsg_radius_control.adsc_raent_anchor = NULL;  /* no entry yet       */
#endif
#ifdef B120213
#ifndef B080322
   dsg_radius_control.adsc_rarf_anchor = NULL;  /* no entry yet        */
#else
   dsg_radius_control.adsc_rathr_anchor = NULL;  /* no entry yet       */
#endif
#endif
   dsg_radius_control.imc_port_wol = DEF_WOL_PORT;  /* po wake-on-lan  */
   iml_no_cpu = m_get_no_cpu();             /* number of CPUs          */
#ifdef HL_SPECIAL_OFFER_CEBIT_04
   inl_count_user = 0;                      /* count the users         */
#endif
   /* search general first                                             */
   adunode_general = adunode2;              /* get node                */
   do {
     if (adunode_general->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adunode_general->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &inl1, awcu2, "general" );
       if ((bol1) && (inl1 == 0)) {         /* strings are equal       */
         break;
       }
#else
       if (!wcscmp( awcu2, L"general" )) break;
#endif
     }
     adunode_general = adunode_general->getNextSibling();
   } while (adunode_general);
#ifdef TRACEHL1
   if (adunode_general) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section general %(ux)s", awcu2 );
   }
#endif
#ifdef B080324
   /* search blade-control next                                        */
   adunode_blade_control = adunode2;        /* get node                */
   do {
     if (adunode_blade_control->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adunode_blade_control->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "blade-control" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         break;
       }
#else
       if (!wcscmp( awcu2, L"blade-control" )) break;
#endif
     }
     adunode_blade_control = adunode_blade_control->getNextSibling();
   } while (adunode_blade_control);
#ifdef TRACEHL1
   if (adunode_blade_control) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section blade-control %(ux)s", awcu2 );
   }
#endif
#endif
   /* search OCSP-section next                                         */
   adsl_node_ocsp = adunode2;               /* get node                */
   do {
     if (adsl_node_ocsp->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_ocsp->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "OCSP-section" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         break;
       }
#else
       if (!wcscmp( awcu2, L"OCSP-section" )) break;
#endif
     }
     adsl_node_ocsp = adsl_node_ocsp->getNextSibling();
   } while (adsl_node_ocsp);
#ifdef TRACEHL1
   if (adsl_node_ocsp) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section OCSP-section %(ux)s", awcu2 );
   }
#endif
   /* search client-side-SSL                                           */
   adsl_node_csssl = adunode2;              /* get node                */
   do {
     if (adsl_node_csssl->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_csssl->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "client-side-SSL" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         break;
       }
#else
       if (!wcscmp( awcu2, L"client-side-SSL" )) break;
#endif
     }
     adsl_node_csssl = adsl_node_csssl->getNextSibling();
   } while (adsl_node_csssl);
#ifdef TRACEHL1
   if (adsl_node_csssl) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section client-side-SSL %(ux)s", awcu2 );
   }
#endif
   /* search target-filter                                             */
   adsl_targfi_dummy_anchor = NULL;         /* no target-filter found yet */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "target-filter" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_targfi_dummy_w1 = (struct dsd_targfi_dummy *) malloc( sizeof(struct dsd_targfi_dummy) );
         adsl_targfi_dummy_w1->adsc_node_targfi_d = adsl_node_03;  /* save section target-filter */
         /* keep original order                                        */
         adsl_targfi_dummy_w1->adsc_next = NULL;  /* clear chain       */
         if (adsl_targfi_dummy_anchor == NULL) {  /* is first element  */
           adsl_targfi_dummy_anchor = adsl_targfi_dummy_w1;  /* set new chain */
           adsl_targfi_dummy_last = adsl_targfi_dummy_w1;  /* set last in chain */
         } else {                           /* middle in chain         */
           adsl_targfi_dummy_last->adsc_next = adsl_targfi_dummy_w1;  /* append to chain */
           adsl_targfi_dummy_last = adsl_targfi_dummy_w1;  /* set last in chain */
         }
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search configuration-parameters                                  */
   adsl_node_confp = adunode2;              /* get node                */
   do {
     if (adsl_node_confp->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_confp->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "configuration-parameters" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         break;
       }
#else
       if (!wcscmp( awcu2, L"configuration-parameters" )) break;
#endif
     }
     adsl_node_confp = adsl_node_confp->getNextSibling();
   } while (adsl_node_confp);
#ifdef TRACEHL1
   if (adsl_node_confp) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section configuration-parameters %(ux)s", awcu2 );
   }
#endif
   /* search cluster                                                   */
   adsl_node_cluster = adunode2;            /* get node                */
   do {
     if (adsl_node_cluster->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_cluster->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "cluster" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         break;
       }
     }
     adsl_node_cluster = adsl_node_cluster->getNextSibling();
   } while (adsl_node_cluster);
#ifdef TRACEHL1
   if (adsl_node_cluster) {
     m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 found section cluster %(ux)s", awcu2 );
   }
#endif
   /* search LDAP-service                                              */
   adsl_ldap_s_dummy_anchor = NULL;         /* no LDAP service found yet */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "LDAP-service" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_ldap_s_dummy_w1 = (struct dsd_ldap_s_dummy *) malloc( sizeof(struct dsd_ldap_s_dummy) );
         adsl_ldap_s_dummy_w1->adsc_node_ldap_s_d = adsl_node_03;  /* save section LDAP service */
         /* keep original order                                        */
         adsl_ldap_s_dummy_w1->adsc_next = NULL;  /* clear chain       */
         if (adsl_ldap_s_dummy_anchor == NULL) {  /* is first element  */
           adsl_ldap_s_dummy_anchor = adsl_ldap_s_dummy_w1;  /* set new chain */
           adsl_ldap_s_dummy_last = adsl_ldap_s_dummy_w1;  /* set last in chain */
         } else {                           /* middle in chain         */
           adsl_ldap_s_dummy_last->adsc_next = adsl_ldap_s_dummy_w1;  /* append to chain */
           adsl_ldap_s_dummy_last = adsl_ldap_s_dummy_w1;  /* set last in chain */
         }
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search LDAP-template                                             */
   adsl_ldap_t_dummy_anchor = NULL;         /* no LDAP template found yet */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "LDAP-template" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_ldap_t_dummy_w1 = (struct dsd_ldap_t_dummy *) malloc( sizeof(struct dsd_ldap_t_dummy) );
         memset( adsl_ldap_t_dummy_w1, 0, sizeof(struct dsd_ldap_t_dummy) );
         adsl_ldap_t_dummy_w1->adsc_node_ldap_t_d = adsl_node_03;  /* save section LDAP template */
         /* keep original order                                        */
         adsl_ldap_t_dummy_w1->adsc_next = NULL;  /* clear chain       */
         if (adsl_ldap_t_dummy_anchor == NULL) {  /* is first element  */
           adsl_ldap_t_dummy_anchor = adsl_ldap_t_dummy_w1;  /* set new chain */
           adsl_ldap_t_dummy_last = adsl_ldap_t_dummy_w1;  /* set last in chain */
         } else {                           /* middle in chain         */
           adsl_ldap_t_dummy_last->adsc_next = adsl_ldap_t_dummy_w1;  /* append to chain */
           adsl_ldap_t_dummy_last = adsl_ldap_t_dummy_w1;  /* set last in chain */
         }
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search service                                                   */
   adsl_service_dummy_anchor = NULL;        /* no service found yet    */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "service" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_service_dummy_w1 = (struct dsd_service_dummy *) malloc( sizeof(struct dsd_service_dummy) );
         adsl_service_dummy_w1->adsc_node_service_d = adsl_node_03;  /* save section service */
         /* keep original order                                        */
         adsl_service_dummy_w1->adsc_next = NULL;  /* clear chain      */
         if (adsl_service_dummy_anchor == NULL) {  /* is first element */
           adsl_service_dummy_anchor = adsl_service_dummy_w1;  /* set new chain */
           adsl_service_dummy_last = adsl_service_dummy_w1;  /* set last in chain */
         } else {                           /* middle in chain         */
           adsl_service_dummy_last->adsc_next = adsl_service_dummy_w1;  /* append to chain */
           adsl_service_dummy_last = adsl_service_dummy_w1;  /* set last in chain */
         }
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
/* 27.09.08 KB */
   adsl_sc_anchor = NULL;                   /* no configured node found yet */
   /* search radius-group                                              */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "radius-group" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_radius_group;  /* radius-group */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search Kerberos-5-KDC                                            */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "Kerberos-5-KDC" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_krb5_kdc;  /* Kerberos-5-KDC */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search HTTP-redirect-library-object                              */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "HTTP-redirect-library-object" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_http_redir_obj;  /* HTTP-redirect-library-object */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search plain-HTTP-library-object                                 */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "plain-HTTP-library-object" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_plain_http_lib_obj;  /* plain-HTTP-library-object */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search authentication-library-object                             */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "authentication-library-object" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_hob_wspat3_obj;  /* authentication-library-object */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search server-data-hook-object                                   */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "server-data-hook-object" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_sdh_obj;  /* SDH object */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search background-task                                           */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "background-task" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_bgt;  /* backgroud task */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search L2TP-gateway                                              */
   adsl_node_03 = adunode2;                 /* get node                */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "L2TP-gateway" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
         adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
         adsl_sc_w1->iec_saveconf = ied_saveconf_l2tp_gw;  /* L2TP gateway */
         /* keep original order                                        */
         adsl_sc_w1->adsc_next = NULL;      /* clear chain             */
         if (adsl_sc_anchor == NULL) {      /* is first element        */
           adsl_sc_anchor = adsl_sc_w1;     /* set new chain           */
         } else {                           /* middle in chain         */
           adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain   */
         }
         adsl_sc_last = adsl_sc_w1;         /* set last in chain       */
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   /* search raw-packet-interface                                      */
   adsl_node_03 = adunode2;                 /* get node                */
   bol2 = FALSE;                            /* check defined double    */
   do {                                     /* loop over all sections  */
     if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu2 = (HL_WCHAR *) adsl_node_03->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcu2, "raw-packet-interface" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (bol2 == FALSE) {               /* first occurence         */
           adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
           adsl_sc_w1->adsc_node = adsl_node_03;  /* save section service */
           adsl_sc_w1->iec_saveconf = ied_saveconf_rpi;  /* raw-packet-interface */
           /* keep original order                                      */
           adsl_sc_w1->adsc_next = NULL;    /* clear chain             */
           if (adsl_sc_anchor == NULL) {    /* is first element        */
             adsl_sc_anchor = adsl_sc_w1;   /* set new chain           */
           } else {                         /* middle in chain         */
             adsl_sc_last->adsc_next = adsl_sc_w1;  /* append to chain */
           }
           adsl_sc_last = adsl_sc_w1;       /* set last in chain       */
           bol2 = TRUE;                     /* check defined double    */
         } else {                           /* defined double          */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error element name \"sslgate-configuration\" \"raw-packet-interface\" defined multiple times - ignored" );
         }
       }
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);

   /* process general                                                  */
   awcl_installation_name = NULL;           /* installation-name UTF-16 */
#ifndef HL_UNIX
   adsl_node_gen_wcd = NULL;                /* save section win-co-dum */
   awcl_rev_server = NULL;                  /* for RegisterEventSourceW */
   awcl_rev_source = NULL;                  /* for RegisterEventSourceW */
   awcl_windows_pipe_name = NULL;           /* <Windows-named-pipe>    */
#else
   awcl_unix_domain_socket = NULL;          /* <Unix-Domain-Socket>    */
#ifndef B160423
   awcl_general_ext_random_g_domain_socket_name = NULL;  /* external Random Generator */
#endif
#endif
   awcl_general_security_token = NULL;      /* security-token UTF-16   */
   achl_general_sec_token_mem = NULL;       /* security-token UTF-8    */
   adsl_sc_udp_gw_ineta = NULL;             /* clear save configured item UDP gateway INETA */
   awcl_sip_local_ineta = NULL;             /* clear SIP-local-ineta   */
   bol_log = FALSE;                         /* no event log yet        */
   iel_lierr = ied_le_ignore;               /* state LISTEN-ERROR      */
   iml_priority_process = DEF_PRIO_DEFAULT;
   adsp_loconf_1_fill->inc_prio_work_thread = DEF_PRIO_DEFAULT;
   if (adunode_general == NULL) goto p_buco_gen_00;
   adunode3 = adunode_general->getFirstChild();
   if (adunode3 == NULL) {                  /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01020W Error element name \"sslgate-configuration\" \"general\" has no child - ignored" );
     goto p_buco_gen_00;
   }
   memset( borl_general, 0, sizeof(borl_general) );
   do {                                     /* loop over nodes level 3 */
     iu1 = 0;                               /* clear index             */
     if (adunode3->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
       while (TRUE) {
         iu1++;                             /* increment index         */
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, (char *) achrs_node_general[ iu1 - 1 ] );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           break;
         }
         if (iu1 >= (sizeof(achrs_node_general) / sizeof(achrs_node_general[0]))) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01021W Error element name \"sslgate-configuration\" \"general\"\
 has invalid child \"%(ux)s\" - ignored", awcu3_name );
           iu1 = 0;                         /* is not valid            */
           break;                           /* end of loop             */
         }
       }
       if ((iu1 > 0) && (borl_general[ iu1 - 1 ])) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01022W Error element name \"sslgate-configuration\" \"general\"\
 child double \"%(ux)s\" - ignored", awcu3_name );
         iu1 = 0;
       }
       while (iu1 > 0) {                    /* only if valid node found */
         if (iu1 == DEF_XML_GENERAL_WICOREDU) {
#ifndef HL_UNIX
           adsl_node_gen_wcd = adunode3;    /* save section win-co-dum */
#else
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01034W Error element general name \"windows-core-dump\" not valid in Unix environment - ignored" );
           iu1 = 0;                         /* this parameter not valid */
#endif
           break;
         }
#ifdef B141228
         if (iu1 == DEF_XML_GENERAL_SWAP_FILE) {  /* <swap-file>       */
           dsl_ucs_l.ac_str = awcu3_value;  /* address of string       */
           dsl_ucs_l.imc_len_str = -1;      /* length string in elements */
           dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string */
#ifdef HL_UNIX
           adsl_filename_1_w1 = dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain;  /* chain of filenames for swap file */
           adsl_filename_1_w2 = NULL;
           while (adsl_filename_1_w1) {     /* loop over chain of filenames for swap file */
             bol2 = HL_M_CMP_FN( &iml1, &adsl_filename_1_w1->dsc_ucs_file_name, &dsl_ucs_l );
             if ((bol2) && (iml1 == 0)) {   /* strings are equal       */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element name \"sslgate-configuration\" \"general\" \"swap-file\"\
 value \"%(ux)s\" defined double - ignored",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               awcu4_name );
               break;
             }
             adsl_filename_1_w2 = adsl_filename_1_w1;  /* save last filename */
             adsl_filename_1_w1 = adsl_filename_1_w1->adsc_next;  /* get next in chain */
           }
           if (adsl_filename_1_w1) break;
#endif
           iml1 = m_len_vx_ucs( HL_FN_CHARSET,
                                &dsl_ucs_l )
                    + 1;
#ifndef HL_UNIX
           iml1 *= sizeof(HL_WCHAR);
#endif
           adsl_filename_1_w1 = (struct dsd_filename_1 *) malloc( sizeof(struct dsd_filename_1) + iml1 );
           adsl_filename_1_w1->adsc_next = NULL;
           adsl_filename_1_w1->dsc_ucs_file_name.ac_str = adsl_filename_1_w1 + 1;  /* address of string */
           adsl_filename_1_w1->dsc_ucs_file_name.imc_len_str = -1;  /* length string in elements */
           adsl_filename_1_w1->dsc_ucs_file_name.iec_chs_str = HL_FN_CHARSET;
           m_cpy_vx_ucs( adsl_filename_1_w1 + 1, iml1, HL_FN_CHARSET,
                         &dsl_ucs_l );
#ifndef HL_UNIX
           dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain = adsl_filename_1_w1;  /* chain of filenames for swap file */
           break;
#endif
#ifdef HL_UNIX
           if (adsl_filename_1_w2 == NULL) {  /* first in chain        */
             dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain = adsl_filename_1_w1;  /* chain of filenames for swap file */
           } else {
             adsl_filename_1_w2->adsc_next = adsl_filename_1_w1;  /* append to chain */
           }
           iu1 = 0;                         /* parameter may be defined multiple times */
           break;
#endif
         }
#endif
#ifdef B160423
         if (iu1 == DEF_XML_GENERAL_SIG_CRED_FILE) {  /* <signature-credentials-file> */
// to-do 27.12.14 KB
         }
#endif
         if (iu1 == DEF_XML_GENERAL_SNMP_CO) {  /* <SNMP-configuration> */
           bol1 = m_general_snmp( &dsl_cs, adunode3 );
#ifdef B100726
// to-do 25.07.10 KB double
           if (dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf == NULL) break;
#endif
           if (bol1 == FALSE) break;        /* configuration was not valid */
           borl_general[ DEF_XML_GENERAL_SNMP_CO - 1 ] = TRUE;
           break;
         }
         if (iu1 == DEF_XML_GENERAL_ALERT_SSC) {  /* <alert-subsystem-configuration> */
           dsl_wsp_startprog.adsc_node_ass_conf = adunode3;  /* save section */
           break;
         }
         if (iu1 == DEF_XML_GENERAL_UDP_GATE) {  /* <UDP-gate>         */
           m_general_udp_gate( &dsl_cs, adunode3 );
           break;
         }
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {            /* no child found          */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01023W Error element general name \"%(ux)s\" has no child - ignored",
                           awcu3_name );
           iu1 = 0;                         /* this parameter not valid */
           break;
         }
#ifdef HL_UNIX
#ifdef TRACE_LIGW_01
         if (iu1 == DEF_XML_GENERAL_LISTENGW) {
           adsl_node_03 = adunode4;
           do {
             if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
               m_hlnew_printf( HLOG_TRACE1, "HWSPXMLC-T1 DEF_XML_GENERAL_LISTENGW ELEMENT_NODE found %p",
                               adsl_node_03 );
             }
             adsl_node_03 = adsl_node_03->getNextSibling();
           } while (adsl_node_03);          /* for all siblings        */
         }
#endif
         if (iu1 == DEF_XML_GENERAL_LISTENGW) {  /* listen-gateway may have children */
           adsl_node_03 = adunode4;         /* get the node            */
           bol1 = FALSE;                    /* no valid child found    */
           do {                             /* loop over all siblings  */
             if (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {
               bol1 = TRUE;                 /* valid child found       */
               awcu4_name = (HL_WCHAR *) adsl_node_03->getNodeName();
               iml1 = 0;                    /* clear index             */
               do {
                 bol2 = m_cmp_u16z_u8z( &iml2, awcu4_name, (char *) achrs_node_gligw[ iml1 ] );
                 if ((bol2) && (iml2 == 0)) {  /* strings are equal    */
                   break;
                 }
                 iml1++;                    /* increment index         */
               } while (iml1 < (sizeof(achrs_node_gligw) / sizeof(achrs_node_gligw[0])));
               do {
                 if (iml1 >= (sizeof(achrs_node_gligw) / sizeof(achrs_node_gligw[0]))) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW Error element name \"sslgate-configuration\" \"general\" \"listen-gateway\"\
 has invalid child \"%(ux)s\" - ignored", awcu4_name );
                   break;
                 }
                 switch (iml1) {            /* check value found       */
                   case DEF_XML_GEN_LIGW_DSN:  /* <domain-socket-name> */
                     aach_wp1 = &adsp_loconf_1_fill->achc_ligw_pipe_name;  /* pipe name of Listen Gateway */
                     break;
                   case DEF_XML_GEN_LIGW_SS:  /* <shared-secret>       */
                     aach_wp1 = &adsp_loconf_1_fill->achc_ligw_shared_secret;  /* shared secret of Listen Gateway */
                     break;
                 }
                 if (*aach_wp1 != NULL) {   /* text field already filled */
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW Error element name \"sslgate-configuration\" \"general\" \"listen-gateway\"\
 child double \"%(ux)s\" - ignored", awcu4_name );
                   break;
                 }
                 adunode5 = adsl_node_03->getFirstChild();
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0xxxxW Error element \"general\" \"listen-gateway\" name \"%(ux)s\" has no child - ignored",
                                   awcu4_name );
                   break;
                 }
                 do {                       /* search text node        */
                   if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
                     awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
                     break;
                   }
                   adunode5 = adunode5->getNextSibling();
                 } while (adunode5);
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW Error element \"general\" \"listen-gateway\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                                   awcu4_name );
                   break;
                 }
                 *aach_wp1 = XMLString::transcode( (XMLCh *) awcu4_value );
               } while (FALSE);
             }
             adsl_node_03 = adsl_node_03->getNextSibling();
           } while (adsl_node_03);          /* for all siblings        */
           if (bol1) {                      /* valid child found       */
             if (   (adsp_loconf_1_fill->achc_ligw_pipe_name == NULL)  /* pipe name of Listen Gateway */
                 && (adsp_loconf_1_fill->achc_ligw_shared_secret == NULL)) {  /* shared secret of Listen Gateway */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW Error element \"general\" \"listen-gateway\" no valid node found - ignored" );
             } else {
               adsp_loconf_1_fill->boc_listen_gw = TRUE;  /* use listen-gateway */
             }
#ifdef TRACE_LIGW_01
             m_hlnew_printf( HLOG_TRACE1, "HWSPXMLC-T2 DEF_XML_GENERAL_LISTENGW ELEMENT_NODE valid found %p",
                             adsl_node_03 );
#endif
             break;                         /* all done with node      */
           }
         }
#ifndef B160423
         if (iu1 == DEF_XML_GENERAL_EXT_RANDOM_G) {  /* external-random-generator may have children */
           adsl_node_03 = adunode4;         /* get the node            */
           bol2 = FALSE;                    /* no elements found       */
           do {                             /* loop over all siblings  */
             while (adsl_node_03->getNodeType() == DOMNode::ELEMENT_NODE) {  /* pseudo-loop */
               bol2 = TRUE;                 /* elements found          */
               awcu4_name = (HL_WCHAR *) adsl_node_03->getNodeName();
               bol_rc = m_cmp_vx_vx( &iml_cmp,
                                     awcu4_name, -1, ied_chs_utf_16,
                                     "domain-socket-name", -1, ied_chs_utf_8 );
               bol1 = FALSE;                /* value not valid         */
               while ((bol_rc) && (iml_cmp == 0)) {  /* pseudo-loop    */
                 if (awcl_general_ext_random_g_domain_socket_name) {  /* external Random Generator */
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"domain-socket-name\" double - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ) );
                   break;
                 }
                 adunode5 = adsl_node_03->getFirstChild();
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"%(ux)s\" has no child - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                                   awcu4_name );
                   break;
                 }
                 do {                       /* search text node        */
                   if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
                     awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
                     break;
                   }
                   adunode5 = adunode5->getNextSibling();
                 } while (adunode5);
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                                   awcu4_name );
                   break;
                 }
                 awcl_general_ext_random_g_domain_socket_name = awcu4_value;  /* external Random Generator */
                 bol1 = TRUE;               /* value valid             */
                 break;
               }
               if (bol1) break;             /* value valid             */
               bol_rc = m_cmp_vx_vx( &iml_cmp,
                                     awcu4_name, -1, ied_chs_utf_16,
                                     "UDS-timeout-millisec", -1, ied_chs_utf_8 );
//             bol1 = FALSE;                /* value not valid         */
               while ((bol_rc) && (iml_cmp == 0)) {  /* pseudo-loop    */
                 if (adsp_loconf_1_fill->imc_ext_random_g_timeout_ms > 0) {  /* timeout external Random Generator */
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"UDS-timeout-millisec\" double - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ) );
                   break;
                 }
                 adunode5 = adsl_node_03->getFirstChild();
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"%(ux)s\" has no child - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                                   awcu4_name );
                   break;
                 }
                 do {                       /* search text node        */
                   if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
                     awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
                     break;
                   }
                   adunode5 = adunode5->getNextSibling();
                 } while (adunode5);
                 if (adunode5 == NULL) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                                   MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                                   awcu4_name );
                   break;
                 }
                 adsp_loconf_1_fill->imc_ext_random_g_timeout_ms  /* timeout external Random Generator */
                   = m_get_wc_number( awcu4_value );
                 if (adsp_loconf_1_fill->imc_ext_random_g_timeout_ms < 0) {
                   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element \"general\" \"external-random-generator\" name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                                   MAC_XML_LINENO( adunode5 ), MAC_XML_COL( adunode5 ),
                                   awcu4_name, awcu4_value );
                   adsp_loconf_1_fill->imc_ext_random_g_timeout_ms = 0;  /* timeout external Random Generator */
                   break;
                 }
                 bol1 = TRUE;               /* value valid             */
                 break;
               }
               if (bol1) break;             /* value valid             */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element name \"sslgate-configuration\" \"general\" \"external-random-generator\"\
 has invalid child \"%(ux)s\" - ignored",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               awcu4_name );
               break;
             }
             adsl_node_03 = adsl_node_03->getNextSibling();
           } while (adsl_node_03);          /* for all siblings        */
           if (bol2) {                      /* elements found          */
             if (awcl_general_ext_random_g_domain_socket_name == NULL) {  /* external Random Generator */
               adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name = EXT_RANDOM_G_UDS_NAME;  /* external Random Generator */
             }
             break;                         /* all done with node      */
           }
         }
#endif
#endif
         switch (iu1) {                     /* index of text - nodes with children */
           case DEF_XML_GENERAL_UDP_INETA:  /* <UDP-gw-ineta>          */
             /* save entry for later                                   */
             adsl_sc_w1 = (struct dsd_save_conf *) malloc( sizeof(struct dsd_save_conf) );
             adsl_sc_w1->adsc_node = adunode4;  /* save the node       */
             adsl_sc_w1->adsc_next = NULL;  /* clear chain             */
             /* keep in original order                                 */
             if (adsl_sc_udp_gw_ineta == NULL) {  /* first element     */
               adsl_sc_udp_gw_ineta = adsl_sc_w1;  /* save configured item UDP gateway INETA */
             } else {                       /* append to chain         */
               adsl_sc_w2 = adsl_sc_udp_gw_ineta;  /* get chain        */
               while (TRUE) {               /* loop to find last element */
                 if (adsl_sc_w2->adsc_next == NULL) break;  /* last element found */
                 adsl_sc_w2 = adsl_sc_w2->adsc_next;  /* get next element */
               }
               adsl_sc_w2->adsc_next = adsl_sc_w1;  /* save configured item UDP gateway INETA */
             }
             iu1 = 0;                       /* node has been processed */
             break;                         /* all done                */
         }
         if (iu1 == 0) break;               /* node has been processed */
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu3_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);                /* for all siblings        */
         if (adunode4 == NULL) {            /* no text found           */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01024W Error element general name \"%(ux)s\" no TEXT_NODE found - ignored",
                           awcu3_name );
           iu1 = 0;                         /* node is invalid         */
           break;
         }
#ifdef TRACEHL1
         m_hlnew_printf( HLOG_TRACE1, "general loop iu1=%d element general name \"%(ux)s\" value \"%(ux)s\" found",
                         iu1, awcu3_name, awcu3_value );
#endif
         if (   (iu1 == DEF_XML_GENERAL_CONF_VERS)  /* <configuration-version> */
             || (iu1 == DEF_XML_GENERAL_MAXPOSSWTHR)
             || (iu1 == DEF_XML_GENERAL_MAXACTWTHR)
             || (iu1 == DEF_XML_GENERAL_PRIOWT)
             || (iu1 == DEF_XML_GENERAL_PRIOPR)
             || (iu1 == DEF_XML_GENERAL_MAX_UTIL_THR)  /* <max-util-thread> */
             || (iu1 == DEF_XML_GENERAL_MAX_SOCK_THR)  /* <max-sockets-per-thread> */
             || (iu1 == DEF_XML_GENERAL_REPINTV)
             || (iu1 == DEF_XML_GENERAL_WOLPORT)
             || (iu1 == DEF_XML_GENERAL_TIME_C_DF)  /* <time-cache-disk-file>  */
             || (iu1 == DEF_XML_GENERAL_TIME_R_DF)  /* <time-reload-disk-file> */
             || (iu1 == DEF_XML_GENERAL_CMA_TO_LOCAL)  /* <cma-timeout-local> */
             || (iu1 == DEF_XML_GENERAL_CMA_TO_CLUSTER)  /* <cma-timeout-cluster> */
             || (iu1 == DEF_XML_GENERAL_NET_STAT_LEVEL)  /* <network-statistic-level> */
             || (iu1 == DEF_XML_GENERAL_TIME_RDA)  /* <time-repeat-delay-alert> */
             || (iu1 == DEF_XML_GENERAL_THRES_BL_WT)  /* <backlog-work-thread-threshold> */
             || (iu1 == DEF_XML_GENERAL_THRES_CPUT)  /* <CPU-time-percent-threshold> */
             || (iu1 == DEF_XML_GENERAL_SYN_W_NO)  /* <watch-syn-no>   */
             || (iu1 == DEF_XML_GENERAL_SYN_W_TIME)  /* <watch-syn-time> */
             || (iu1 == DEF_XML_GENERAL_VDI_SO_TIME)) {  /* <VDI-sign-on-time> */
           iu2 = m_get_wc_number( awcu3_value );
           if (iu2 < 0) {
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01025W line=%d col=%d Error element general name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                             MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                             awcu3_name, awcu3_value );
             iu1 = 0;
             break;
           }
         } else if (   (iu1 == DEF_XML_GENERAL_TCP_SNDBUF)  /* <TCP-sndbuf> */
                    || (iu1 == DEF_XML_GENERAL_TCP_RCVBUF)  /* <TCP-rcvbuf> */
                    || (iu1 == DEF_XML_GENERAL_SWAP_IN_MEM)  /* <size-swap-in-memory> */
                    || (iu1 == DEF_XML_GENERAL_MAX_SWAP_SIZE)  /* <max-swap-size> */
                    || (iu1 == DEF_XML_GENERAL_FILE_S_MAX)
                    || (iu1 == DEF_XML_GENERAL_FILE_STOR)
                    || (iu1 == DEF_XML_GENERAL_THRES_MEM)  /* <memory-threshold> */
                    || (iu1 == DEF_XML_GENERAL_MEM_LS)) {  /* <memory-log-size> */
           ill1 = m_get_bytes_no( awcu3_value );
           if (ill1 < 0) {
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01035W Error element general name \"%(ux)s\" byte value invalid \"%(ux)s\" - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
           }
         } else if (   (iu1 == DEF_XML_GENERAL_EVELOG)
                    || (iu1 == DEF_XML_GENERAL_SYSLOG)  /* <prot-syslog> */
                    || (iu1 == DEF_XML_GENERAL_PROT_INCL_PID)  /* <prot-include-pid> */
                    || (iu1 == DEF_XML_GENERAL_PRI_FP_IN_REP)  /* <print-fingerprint-in-report> */
                    || (iu1 == DEF_XML_GENERAL_LISTENGW)  /* <listen-gateway> */
#ifndef B160423
/* new parameters */
#endif
                    || (iu1 == DEF_XML_GENERAL_EXT_RANDOM_G)  /* <external-random-generator> */
                    || (iu1 == DEF_XML_GENERAL_RELOCONF)
                    || (iu1 == DEF_XML_GENERAL_TCP_KEEPALIVE)  /* <TCP-keepalive> */
                    || (iu1 == DEF_XML_GENERAL_CLUSEDM)  /* <clear-used-memory> */
                    || (iu1 == DEF_XML_GENERAL_EXT_RANDOM_G)  /* <external-random-generator> */
                    || (iu1 == DEF_XML_GENERAL_AUTH_HIDE_MSG)  /* <authentication-hide-message> */
                    || (iu1 == DEF_XML_GENERAL_PTTD_CEHU)  /* <ignore-PTTD-connect-error-host-unreachable> */
                    || (iu1 == DEF_XML_GENERAL_ENA_SION_NPW)  /* <enable-sign-on-no-password> */
                    || (iu1 == DEF_XML_GENERAL_SIP_P5060)  /* <SIP-use-UDP-port-5060> */
                    || (iu1 == DEF_XML_GENERAL_ALLOW_WSP_TR)  /* <allow-wsp-trace> */
                    || (iu1 == DEF_XML_GENERAL_SUPP_W_LT_NR)) {  /* <suppress-warning-LDAP-template-not-referenced> */
           /* check YES or NO                                          */
           do {                             /* pseudo-loop             */
             bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
             if ((bol1) && (inl1 == 0)) {   /* strings are equal       */
               bol2 = TRUE;                 /* set parameter YES       */
               break;
             }
             bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
             if ((bol1) && (inl1 == 0)) {   /* strings are equal       */
               bol2 = FALSE;                /* set parameter NO        */
               break;
             }
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01026W line=%d col=%d Error element general name \"%(ux)s\" value neither YES nor NO - \"%(ux)s\" - ignored",
                             MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
           } while (FALSE);
         }
         switch (iu1) {                     /* index of text           */
           case DEF_XML_GENERAL_CONF_VERS:  /* <configuration-version> */
             if (iu2 == DEF_CONFIGURATION_VERSION) break;
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04000W line=%d col=%d general <configuration-version> value %d not as requested %d - check configuration program",
                             MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                             iu2, DEF_CONFIGURATION_VERSION );
             iu1 = 0;                       /* ignore this parameter   */
             break;
           case DEF_XML_GENERAL_EVELOG:
#ifndef HL_UNIX
             bol_log = bol2;                /* with event log now      */
             break;
#else
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01040W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Unix environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#endif
           case DEF_XML_GENERAL_EVSERVERN:  /* <event-server-name>     */
#ifndef HL_UNIX
             awcl_rev_server = awcu3_value;  /* for RegisterEventSourceW */
             break;
#else
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01041W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Unix environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#endif
           case DEF_XML_GENERAL_EVSOURCEN:  /* <event-source-name>     */
#ifndef HL_UNIX
             awcl_rev_source = awcu3_value;  /* for RegisterEventSourceW */
             break;
#else
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01042W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Unix environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#endif
           case DEF_XML_GENERAL_SYSLOG:     /* <prot-syslog>           */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01060W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             bol_log = bol2;                /* with event log now      */
             break;
#endif
           case DEF_XML_GENERAL_PROT_INCL_PID:  /* <prot-include-pid>  */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01060W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             adsp_loconf_1_fill->boc_prot_include_pid = bol2;  /* <prot-include-pid> */
             break;
#endif
           case DEF_XML_GENERAL_TOD_MARK_LOG:  /* <time-of-day-mark-log> */
             awcl_w1 = awcu3_value;
#define AIML_WORK ((int *) chrl_work1)
             iml1 = 0;                      /* first field             */
             iml2 = 0;                      /* number of characters    */
             *(AIML_WORK + 0) = *(AIML_WORK + 1) = 0;
             achl_w1 = NULL;                /* no error message yet    */
             do {                           /* pseudo-loop             */
               while (*awcl_w1) {           /* loop over input characters */
                 if ((*awcl_w1 >= '0') && (*awcl_w1 <= '9')) {
                   if (iml2 >= 2) {         /* number of digits        */
                     if (iml1 == 0) {       /* search hours            */
                       achl_w1 = "too many digits for hours";
                       break;
                     }
                     achl_w1 = "too many digits for minutes";
                     break;
                   }
                   *(AIML_WORK + iml1) *= 10;
                   *(AIML_WORK + iml1) += *awcl_w1 - '0';
                   iml2++;                  /* number of digits        */
                 } else if (*awcl_w1 == ':') {
                   if (iml1 != 0) {
                     achl_w1 = "too many separators :";
                     break;
                   }
                   if (iml2 == 0) {
                     achl_w1 = "no digits for hours found";
                     break;
                   }
                   iml1 = 1;                /* now minutes             */
                   iml2 = 0;                /* number of digits        */
                 } else {
                   achl_w1 = "invalid character";
                   break;
                 }
                 awcl_w1++;                 /* next character input    */
               }
               if (iml1 == 0) {             /* no : found              */
                 achl_w1 = "separator : missing";
                 break;
               }
               if (iml2 != 2) {             /* number of digits        */
                 achl_w1 = "not two digits for minutes";
                 break;
               }
               if (*(AIML_WORK + 0) >= 24) {
                 achl_w1 = "hours out of range";
                 break;
               }
               if (*(AIML_WORK + 1) >= 60) {
                 achl_w1 = "minutes out of range";
                 break;
               }
               adsp_loconf_1_fill->imc_tod_mark_log  /* <time-of-day-mark-log> seconds from midnight, +1 */
                 = (*(AIML_WORK + 0) * 60 + *(AIML_WORK + 1)) * 60 + 1;
             } while (FALSE);
             if (achl_w1 == NULL) break;    /* no error message        */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04020W line=%d col=%d Error element general name \"time-of-day-mark-log\" value \"%(ux)s\" not hh:mm - %s - ignored",
                             MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                             awcu3_value, achl_w1 );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#undef AIML_WORK
           case DEF_XML_GENERAL_PIDFILE:    /* <pid-file>              */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01061W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             iml1 = m_count_wchar_z_to_utf8( awcu3_value );
             adsp_loconf_1_fill->achc_pid_file = (char *) malloc( iml1 + 1 );
             m_trans_wchar_z_to_utf8( adsp_loconf_1_fill->achc_pid_file, awcu3_value );
             *(adsp_loconf_1_fill->achc_pid_file + iml1) = 0;  /* make zero-terminated */
             break;
#endif
           case DEF_XML_GENERAL_LISTENERR:  /* <listen-error>          */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01062W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             bol1 = m_cmp_u16z_u8z( &iml1, awcu3_value, "ignore" );
             if ((bol1) && (iml1 == 0)) {   /* strings are equal       */
               break;
             }
             bol1 = m_cmp_u16z_u8z( &iml1, awcu3_value, "wait" );
             if ((bol1) && (iml1 == 0)) {   /* strings are equal       */
               iel_lierr = ied_le_wait;     /* state LISTEN-ERROR      */
               break;
             }
             bol1 = m_cmp_u16z_u8z( &iml1, awcu3_value, "abend" );
             if ((bol1) && (iml1 == 0)) {   /* strings are equal       */
               iel_lierr = ied_le_abend;    /* state LISTEN-ERROR      */
               break;
             }
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01033W Error element general name \"%(ux)s\" value neither \"ignore\" nor \"wait\" nor \"abend\" - \"%(ux)s\" - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;
             break;
#endif
           case DEF_XML_GENERAL_LISTENGW:   /* <listen-gateway>        */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01063W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
#ifdef TRACE_LIGW_01
             adsl_node_03 = adunode4->getFirstChild();
#endif
             adsp_loconf_1_fill->boc_listen_gw = bol2;  /* use listen-gateway */
             break;
#endif
#ifndef B160423
           case DEF_XML_GENERAL_EXT_RANDOM_G:  /* <external-random-generator> */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             if (awcl_general_ext_random_g_domain_socket_name) break;  /* external Random Generator */
//           adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name = "ABCD";  /* external Random Generator */
             adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name = EXT_RANDOM_G_UDS_NAME;  /* external Random Generator */
             adsp_loconf_1_fill->imc_ext_random_g_timeout_ms = EXT_RANDOM_G_TIMEOUT_MS;  /* timeout external Random Generator */
             break;
#endif
           case DEF_XML_GENERAL_EXT_SEC_SERV:  /* <external-security-server> */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d general <external-security-server> not supported in this version of the WSP - ignored",
                             MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ) );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#endif
           case DEF_XML_GENERAL_RELOCONF:
             adsp_loconf_1_fill->boc_reload_conf = bol2;  /* allow reload configuration */
             break;
           case DEF_XML_GENERAL_TCP_SNDBUF:  /* <TCP-sndbuf>           */
             if (ill1 > DEF_MAX_TCP_SND_RCV) {  /* maximum TCP option value */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d general <TCP-sndbuf> value %lld greater allowed maximum %d - ignored",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1, DEF_MAX_TCP_SND_RCV );
               iu1 = 0;                     /* ignore this parameter   */
               break;
             }
             adsp_loconf_1_fill->imc_tcp_sndbuf = (int) ill1;  /* set TCP SNDBUF */
             break;
           case DEF_XML_GENERAL_TCP_RCVBUF:  /* <TCP-rcvbuf>           */
             if (ill1 > DEF_MAX_TCP_SND_RCV) {  /* maximum TCP option value */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d general <TCP-rcvbuf> value %lld greater allowed maximum %d - ignored",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1, DEF_MAX_TCP_SND_RCV );
               iu1 = 0;                     /* ignore this parameter   */
               break;
             }
             adsp_loconf_1_fill->imc_tcp_rcvbuf = (int) ill1;  /* set TCP RCVBUF */
             break;
           case DEF_XML_GENERAL_TCP_KEEPALIVE:  /* <TCP-keepalive>     */
             adsp_loconf_1_fill->boc_tcp_keepalive = bol2;  /* set TCP KEEPALIVE */
             break;
           case DEF_XML_GENERAL_SWAP_IN_MEM:  /* <size-swap-in-memory> */
#ifdef B141229
// to-do 08.01.13 KB - warning if not multiple of ...
             adsp_loconf_1_fill->imc_swap_mem_size = (int) (ill1 >> SHIFT_BLOCK_SWAP);  /* <size-swap-in-memory> in 64 KB units */
#endif
             if (ill1 > MAX_SWAP_STOR_SIZE) {  /* maximum size swap storage */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04010W line=%d col=%d general <size-swap-in-memory> value %lld too high - set to maximum %lld.",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1, MAX_SWAP_STOR_SIZE );
               ill1 = MAX_SWAP_STOR_SIZE;   /* maximum size swap storage */
             }
             adsp_loconf_1_fill->imc_swap_mem_size  /* <size-swap-in-memory> in 64 KB units */
               = (int) (((HL_LONGLONG) ill1 + LEN_BLOCK_SWAP - 1) >> SHIFT_BLOCK_SWAP);
             if (((HL_LONGLONG) adsp_loconf_1_fill->imc_swap_mem_size << SHIFT_BLOCK_SWAP)
                   != ill1) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04011W line=%d col=%d general <size-swap-in-memory> rounded up from %lld to %lld.",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1,
                               (HL_LONGLONG) adsp_loconf_1_fill->imc_swap_mem_size << SHIFT_BLOCK_SWAP );
             }
             break;
           case DEF_XML_GENERAL_MAX_SWAP_SIZE:  /* <max-swap-size>     */
#ifdef B141229
// to-do 08.01.13 KB - warning if not multiple of ...
             adsp_loconf_1_fill->imc_max_swap_size = (int) (ill1 >> SHIFT_BLOCK_SWAP);  /* <max-swap-size> in 64 KB units */
#endif
             if (ill1 > MAX_SWAP_STOR_SIZE) {  /* maximum size swap storage */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04012W line=%d col=%d general <max-swap-size> value %lld too high - set to maximum %lld.",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1, MAX_SWAP_STOR_SIZE );
               ill1 = MAX_SWAP_STOR_SIZE;   /* maximum size swap storage */
             }
             adsp_loconf_1_fill->imc_max_swap_size  /* <max-swap-size> in 64 KB units */
               = (int) (((HL_LONGLONG) ill1 + LEN_BLOCK_SWAP - 1) >> SHIFT_BLOCK_SWAP);
             if (((HL_LONGLONG) adsp_loconf_1_fill->imc_max_swap_size << SHIFT_BLOCK_SWAP)
                   != ill1) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04013W line=%d col=%d general <max-swap-size> rounded up from %lld to %lld.",
                               MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                               ill1,
                               (HL_LONGLONG) adsp_loconf_1_fill->imc_max_swap_size << SHIFT_BLOCK_SWAP );
             }
             break;
           case DEF_XML_GENERAL_SWAP_FILE:  /* <swap-file>             */
             dsl_ucs_l.ac_str = awcu3_value;  /* address of string     */
             dsl_ucs_l.imc_len_str = -1;    /* length string in elements */
             dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string */
#ifdef HL_UNIX
             adsl_filename_1_w1 = dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain;  /* chain of filenames for swap file */
             adsl_filename_1_w2 = NULL;
             while (adsl_filename_1_w1) {     /* loop over chain of filenames for swap file */
               bol2 = HL_M_CMP_FN( &iml1, &adsl_filename_1_w1->dsc_ucs_file_name, &dsl_ucs_l );
               if ((bol2) && (iml1 == 0)) {   /* strings are equal       */
                 m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0xxxxW line=%d col=%d Error element name \"sslgate-configuration\" \"general\" \"swap-file\"\
 value \"%(ux)s\" defined double - ignored",
                                 MAC_XML_LINENO( adunode3 ), MAC_XML_COL( adunode3 ),
                                 awcu4_name );
                 break;
               }
               adsl_filename_1_w2 = adsl_filename_1_w1;  /* save last filename */
               adsl_filename_1_w1 = adsl_filename_1_w1->adsc_next;  /* get next in chain */
             }
             if (adsl_filename_1_w1) {
               iu1 = 0;                     /* parameter may be defined multiple times */
               break;
             }
#endif
             iml1 = m_len_vx_ucs( HL_FN_CHARSET,
                                  &dsl_ucs_l )
                      + 1;
#ifndef HL_UNIX
             iml1 *= sizeof(HL_WCHAR);
#endif
             adsl_filename_1_w1 = (struct dsd_filename_1 *) malloc( sizeof(struct dsd_filename_1) + iml1 );
             adsl_filename_1_w1->adsc_next = NULL;
             adsl_filename_1_w1->dsc_ucs_file_name.ac_str = adsl_filename_1_w1 + 1;  /* address of string */
             adsl_filename_1_w1->dsc_ucs_file_name.imc_len_str = -1;  /* length string in elements */
             adsl_filename_1_w1->dsc_ucs_file_name.iec_chs_str = HL_FN_CHARSET;
             m_cpy_vx_ucs( adsl_filename_1_w1 + 1, iml1, HL_FN_CHARSET,
                           &dsl_ucs_l );
#ifndef HL_UNIX
             dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain = adsl_filename_1_w1;  /* chain of filenames for swap file */
             break;
#endif
#ifdef HL_UNIX
             if (adsl_filename_1_w2 == NULL) {  /* first in chain      */
               dsl_cs.adsc_loconf_1_fill->adsc_swap_fn_chain = adsl_filename_1_w1;  /* chain of filenames for swap file */
             } else {
               adsl_filename_1_w2->adsc_next = adsl_filename_1_w1;  /* append to chain */
             }
             iu1 = 0;                       /* parameter may be defined multiple times */
             break;
#endif
           case DEF_XML_GENERAL_MAXPOSSWTHR:
             if (iu2 == 0) break;           /* nothing to do           */
             if (iu2 < DEF_NO_WTHR_MINIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01400W general max-poss-work-thread %d too small", iu2 );
               iu2 = DEF_NO_WTHR_MINIMUM;   /* set minimum value       */
             }
             if (iu2 > DEF_NO_WTHR_MAXIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01401W general max-poss-work-thread %d too big", iu2 );
               iu2 = DEF_NO_WTHR_MAXIMUM;   /* set maximum value       */
             }
             adsp_loconf_1_fill->inc_max_poss_workthr = iu2;
             break;
           case DEF_XML_GENERAL_MAXACTWTHR:
             if (iu2 == 0) break;           /* nothing to do           */
             if (iu2 < DEF_NO_WTHR_MINIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01402W general max-active-work-thread %d too small", iu2 );
               iu2 = DEF_NO_WTHR_MINIMUM;   /* set minimum value       */
             }
             if (iu2 > DEF_NO_WTHR_MAXIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01403W general max-active-work-thread %d too big", iu2 );
               iu2 = DEF_NO_WTHR_MAXIMUM;   /* set maximum value       */
             }
             adsp_loconf_1_fill->inc_max_act_workthr = iu2;
             break;
           case DEF_XML_GENERAL_PRIOWT:
             if (iu2 <= 0)
               iu2 = DEF_PRIO_DEFAULT;
             if (iu2 < DEF_PRIO_MINIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01029W prio-work-thread %d too small", iu2 );
               iu2 = DEF_PRIO_MINIMUM;
             }
             if (iu2 > DEF_PRIO_MAXIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01030W prio-work-thread %d too big", iu2 );
               iu2 = DEF_PRIO_MAXIMUM;
             }
             adsp_loconf_1_fill->inc_prio_work_thread = iu2;
             break;
           case DEF_XML_GENERAL_PRIOPR:
             if (iu2 <= 0) iu2 = DEF_PRIO_DEFAULT;
             if (iu2 < DEF_PRIO_MINIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01031W prio-process %d too small", iu2 );
               iu2 = DEF_PRIO_MINIMUM;
             }
             if (iu2 > DEF_PRIO_MAXIMUM) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01032W prio-process %d too big", iu2 );
               iu2 = DEF_PRIO_MAXIMUM;
             }
             iml_priority_process = iu2;    /* save for later          */
             break;
           case DEF_XML_GENERAL_MAX_UTIL_THR:  /* <max-util-thread>    */
             adsp_loconf_1_fill->imc_max_util_thread = iu2;  /* <max-util-thread> */
             break;
           case DEF_XML_GENERAL_REPINTV:
             adsp_loconf_1_fill->inc_report_intv = iu2;  /* set value found */
             break;
           case DEF_XML_GENERAL_WOLRINETA:
#ifdef B060518
             awcl_node_wol_r_ineta = awcu3_value;  /* save ge wol relay ineta */
#endif
#ifdef B060527
             iu1 = 0;                       /* multiple values allowed */
             inl1 = -1;                     /* set default port        */
             achl1 = XMLString::transcode( (XMLCh *) awcu3_value );
             achl2 = achl1 + strlen( achl1 );
             while ((achl2 > achl1) && (*achl2 != ':')) achl2--;
             if (achl2 > achl1) {           /* separator found         */
               *achl2++ = 0;                /* INETA zero-terminated   */
               inl1 = 0;                    /* clear value port        */
               while (*achl2) {             /* valid digit             */
                 if ((*achl2 < '0') || (*achl2 > '9')) {
                   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01430W wake-on-lan-relay-ineta port contains invalid digit %c",
                                   *achl2 );
                   break;
                 }
                 inl1 *= 10;
                 inl1 += *achl2++ - '0';
               }
               if (*achl2) {                /* port not valid          */
                 XMLString::release( &achl1 );  /* free INETA again    */
                 break;
               }
               if (inl1 <= 0) {             /* port invalid number     */
                 m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01xxxW wake-on-lan-relay-ineta port contains zero" );
                 XMLString::release( &achl1 );  /* free INETA again    */
                 break;
               }
             }
             adsl_pttd_ineta_w1 = (struct dsd_pttd_ineta *) malloc( sizeof(struct dsd_pttd_ineta) );
             memset( adsl_pttd_ineta_w1, 0, sizeof(struct dsd_pttd_ineta) );
             *((UNSIG_MED *) adsl_pttd_ineta_w1->chrc_ineta) = m_get_ineta_single( achl1 );
             XMLString::release( &achl1 );  /* free INETA again        */
             if (*((UNSIG_MED *) adsl_pttd_ineta_w1->chrc_ineta) == 0XFFFFFFFF) {
               m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01xxxW wake-on-lan-relay-ineta port contains invalid INETA %(ux)s",
                               awcu3_value );
               free( adsl_pttd_ineta_w1 );     /* free memory again       */
               break;
             }
             /* entry is valid, append to chain                        */
             adsl_pttd_ineta_w1->inc_family = AF_INET;
             adsl_pttd_ineta_w1->inc_port = inl1;
#endif
             iu1 = 0;                       /* multiple values allowed */
             adsl_pttd_ineta_w1 = (struct dsd_pttd_ineta *) malloc( sizeof(struct dsd_pttd_ineta) );
             memset( adsl_pttd_ineta_w1, 0, sizeof(struct dsd_pttd_ineta) );
             adsl_pttd_ineta_w1->awcc_def_xml = awcu3_value;  /* definition in XML file */
             adsl_pttd_ineta_w1->adsc_next = adsp_loconf_1_fill->adsc_pttd_ineta;
             adsp_loconf_1_fill->adsc_pttd_ineta = adsl_pttd_ineta_w1;
             break;                         /* all done                */
           case DEF_XML_GENERAL_WOLPORT:    /* wake-on-lan port        */
             dsg_radius_control.imc_port_wol = iu2;  /* set value found */
             break;
           case DEF_XML_GENERAL_TIME_C_DF:  /* <time-cache-disk-file>  */
             adsp_loconf_1_fill->inc_time_cache_disk_file = iu2;  /* time in seconds */
             break;
           case DEF_XML_GENERAL_TIME_R_DF:  /* <time-reload-disk-file> */
             adsp_loconf_1_fill->inc_time_reload_disk_file = iu2;  /* time in seconds */
             break;
           case DEF_XML_GENERAL_FILE_S_MAX:  /* <disk-file-size-max>   */
             adsp_loconf_1_fill->ilc_disk_file_size_max = ill1;  /* length one file */
             break;
           case DEF_XML_GENERAL_FILE_STOR:  /* <disk-file-storage>     */
             adsp_loconf_1_fill->ilc_disk_file_storage = ill1;  /* maximum storage */
             break;
           case DEF_XML_GENERAL_NET_STAT_LEVEL:  /* <network-statistic-level> */
             adsp_loconf_1_fill->inc_network_stat = iu2;
             break;
           case DEF_XML_GENERAL_CLUSEDM:    /* <clear-used-memory>     */
             adsp_loconf_1_fill->boc_clear_used_mem = bol2;  /* clear used memory */
             break;                         /* all done                */
           case DEF_XML_GENERAL_PTTD_CEHU:  /* <ignore-PTTD-connect-error-host-unreachable> */
             adsp_loconf_1_fill->boc_pttd_cehu = bol2;  /* <ignore-PTTD-connect-error-host-unreachable> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_TIME_RDA:   /* <time-repeat-delay-alert> */
             adsp_loconf_1_fill->imc_time_rda = iu2;  /* <time-repeat-delay-alert> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_THRES_BL_WT:  /* <backlog-work-thread-threshold> */
             adsp_loconf_1_fill->imc_bl_wothr_thres = iu2;  /* <backlog-work-thread-threshold> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_THRES_CPUT:  /* <CPU-time-percent-threshold> */
             if (iu2 > 100) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01xxxW Error element general name \"%(ux)s\" value (percentage) %d too high - ignored",
                               awcu3_name, iu2 );
               iu1 = 0;                     /* ignore this value       */
               break;                       /* all done                */
             }
             adsp_loconf_1_fill->imc_thres_cput = iu2;  /* <CPU-time-percent-threshold> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_THRES_MEM:  /* <memory-threshold>      */
             adsp_loconf_1_fill->ilc_thres_mem = ill1;  /* <memory-threshold> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_SYN_W_NO:   /* <watch-syn-no>          */
             if (iu2 > 100) {               /* more than onehundred percent */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01xxxW Error element general name \"%(ux)s\" value (percentage) %d too high - ignored",
                               awcu3_name, iu2 );
               iu1 = 0;                     /* ignore this value       */
               break;                       /* all done                */
             }
             adsp_loconf_1_fill->imc_syn_w_no = iu2;  /* <watch-syn-no> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_SYN_W_TIME:  /* <watch-syn-time>       */
             adsp_loconf_1_fill->imc_syn_w_time = iu2;  /* <watch-syn-time> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_ENA_SION_NPW:  /* <enable-sign-on-no-password> */
             adsp_loconf_1_fill->boc_sion_npw = bol2;  /* <enable-sign-on-no-password> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_MEM_LS:     /* <memory-log-size>       */
             ill2 = MAX_MEM_LOG_32;         /* for 32-bit systems      */
             if (sizeof(void *) > sizeof(int)) {  /* 64-bit system     */
               ill2 = MAX_MEM_LOG_64;
             }
             if (ill1 > ill2) {
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01xxxW Error element general name \"%(ux)s\" value %lld too high - maximum %lld - ignored",
                               awcu3_name, ill1, ill2 );
               iu1 = 0;                     /* ignore this value       */
               break;                       /* all done                */
             }
             adsp_loconf_1_fill->ilc_mem_ls = ill1;  /* <memory-log-size> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_SIP_L_INETA:  /* <SIP-local-ineta>     */
             awcl_sip_local_ineta = awcu3_value;  /* SIP-local-ineta defined */
             break;                         /* all done                */
           case DEF_XML_GENERAL_SIP_P5060:  /* <SIP-use-UDP-port-5060> */
             adsp_loconf_1_fill->boc_sip_p5060 = bol2;  /* <SIP-use-UDP-port-5060> */
             break;                         /* all done                */
           case DEF_XML_GENERAL_WIN_NAMED_P:  /* <Windows-named-pipe>  */
#ifndef HL_UNIX
             awcl_windows_pipe_name = awcu3_value;  /* <Windows-named-pipe> */
             break;                         /* all done                */
#else
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01043W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Unix environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#endif
           case DEF_XML_GENERAL_UNIX_D_SOCKET:  /* <Unix-Domain-Socket> */
#ifndef HL_UNIX
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01044W Error element general name \"%(ux)s\" value \"%(ux)s\" not valid in Windows environment - ignored",
                             awcu3_name, awcu3_value );
             iu1 = 0;                       /* ignore this parameter   */
             break;
#else
             awcl_unix_domain_socket = awcu3_value;  /* <Unix-Domain-Socket> */
             break;                         /* all done                */
#endif
           case DEF_XML_GENERAL_ALLOW_WSP_TR:  /* <allow-wsp-trace>    */
             adsp_loconf_1_fill->boc_allow_wsp_trace = bol2;  /* <allow-wsp-trace> */
             break;                         /* all done                */
#ifdef B120808
           case DEF_XML_GENERAL_SECURITY_TOKEN:  /* <security-token>   */
             awcl_general_security_token = awcu3_value;  /* security-token UTF-16 */
             break;                         /* all done                */
#endif
           case DEF_XML_GENERAL_SEC_TOKEN_PLAIN:  /* <security-token-plain> */
             if (achl_general_sec_token_mem == NULL) {  /* security-token UTF-8    */
               awcl_general_security_token = awcu3_value;  /* security-token UTF-16 */
               break;
             }
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element general name \"<security-token-plain>\" but security-token-enrypted already defined - ignored",
                             MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ) );
             iu1 = 0;                       /* node ignored            */
             break;
           case DEF_XML_GENERAL_SEC_TOKEN_ENCRY:  /* <security-token-encrypted> */
             if (awcl_general_security_token == NULL) {  /* security-token UTF-16 */
               dsl_ucs_l.ac_str = awcu3_value;  /* address of string       */
               dsl_ucs_l.imc_len_str = -1;  /* length string in elements */
               dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string */
               iml1 = (HL_WCSLEN( awcu3_value ) + 4 - 1) / 4 * 3;
               achl_general_sec_token_mem = (char *) malloc( iml1 );  /* <security-token-encrypted> */
               iml_len_general_sec_token = m_get_ucs_base64( &iml2, &iml3,
                                                             achl_general_sec_token_mem, iml1,
                                                             &dsl_ucs_l );
               if (iml_len_general_sec_token <= 0) {  /* returned  error */
                 m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element general name \"<security-token-encrypted>\" base64 error %d position %d in string \"%(ux)s\" - ignored",
                                 MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                                 iml2, iml3, awcu3_value );
                 free( achl_general_sec_token_mem );  /* free memory again */
                 achl_general_sec_token_mem = NULL;  /* no security-token UTF-8 */
                 iu1 = 0;                   /* node ignored            */
                 break;
               }
               bol1 = m_check_vx( achl_general_sec_token_mem, iml_len_general_sec_token, ied_chs_utf_8 );  /* check Unicode UTF-8 */
               if (bol1) break;             /* string is valid         */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element general name \"<security-token-encrypted>\" string \"%(ux)s\" decoded no valid UTF-8 - ignored",
                               MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                               awcu3_value );
               free( achl_general_sec_token_mem );  /* free memory again */
               achl_general_sec_token_mem = NULL;  /* no security-token UTF-8 */
               iu1 = 0;                     /* node ignored            */
               break;
             }
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element general name \"<security-token-encrypted>\" but security-token-plain already defined - ignored",
                             MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ) );
             iu1 = 0;                       /* node ignored            */
             break;
           case DEF_XML_GENERAL_VDI_SO_TIME:  /* <VDI-sign-on-time>    */
             adsp_loconf_1_fill->imc_vdi_sign_on_time = iu2;  /* VDI sign on time */
             break;                         /* all done                */
           case DEF_XML_GENERAL_SUPP_W_LT_NR:  /* <suppress-warning-LDAP-template-not-referenced> */
             dsl_cs.boc_supp_w_lt_nr = bol2;  /* suppress-warning-LDAP-template-not-referenced */
             break;                         /* all done                */
         }
         break;
       }
       if (iu1 > 0) {                       /* parameter processed     */
         borl_general[ iu1 - 1 ] = TRUE;    /* mark for not double     */
       }
     }
     adunode3 = adunode3->getNextSibling();
   } while (adunode3);
   iml1 = 0;                                /* clear value             */
   if (adsp_loconf_1_fill->imc_syn_w_no) iml1++;
   if (adsp_loconf_1_fill->imc_syn_w_time) iml1++;
   if (iml1 == 1) {                         /* only one variable set   */
      m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01xxxW Error elements general <watch-syn-no> %d / <watch-syn-time> %d - combination invalid - ignored",
                      adsp_loconf_1_fill->imc_syn_w_no, adsp_loconf_1_fill->imc_syn_w_time );
     adsp_loconf_1_fill->imc_syn_w_no = 0;  /* clear <watch-syn-no>    */
     adsp_loconf_1_fill->imc_syn_w_time = 0;  /* clear <watch-syn-time> */
   }

   p_buco_gen_00:                           /* general values read     */
#ifndef HL_UNIX
   if (bol_log == FALSE) {                  /* log not open            */
     if (awcl_rev_server) {                 /* for RegisterEventSourceW */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01090W Error element general name \"event-server-name\" value \"%(ux)s\" defined, but log not opened - ignored",
                       awcl_rev_server );
     }
     if (awcl_rev_source) {                 /* for RegisterEventSourceW */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01091W Error element general name \"event-source-name\" value \"%(ux)s\" defined, but log not opened - ignored",
                       awcl_rev_source );
     }
   } else {                                 /* open log now            */
     if (awcl_rev_server) {                 /* for RegisterEventSourceW */
       iml1 = (HL_WCSLEN( awcl_rev_server ) + 1) * sizeof(HL_WCHAR);
       adsp_loconf_1_fill->awcc_rev_server = (WCHAR *) malloc( iml1 );
       memcpy( adsp_loconf_1_fill->awcc_rev_server, awcl_rev_server, iml1 );
     }
     if (awcl_rev_source) {                 /* for RegisterEventSourceW */
       iml1 = (HL_WCSLEN( awcl_rev_source ) + 1) * sizeof(HL_WCHAR);
       adsp_loconf_1_fill->awcc_rev_source = (WCHAR *) malloc( iml1 );
       memcpy( adsp_loconf_1_fill->awcc_rev_source, awcl_rev_source, iml1 );
     }
   }
#ifdef B160423
   if (awcl_windows_pipe_name) {            /* <Windows-named-pipe>    */
     iml1 = (HL_WCSLEN( awcl_windows_pipe_name ) + 1) * sizeof(HL_WCHAR);
     adsp_loconf_1_fill->awcc_windows_pipe_name = (WCHAR *) malloc( iml1 );
     memcpy( adsp_loconf_1_fill->awcc_windows_pipe_name, awcl_windows_pipe_name, iml1 );
   }
#endif
#endif
#ifdef HL_UNIX
   if (   (adsp_loconf_1_fill->boc_reload_conf)
       && (adsp_loconf_1_fill->achc_pid_file == NULL)) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01095W Error element general <reload-configuration> configured YES but no <pid-file> - reload configuration not possible" );
     adsp_loconf_1_fill->boc_reload_conf = FALSE;  /* cannot reload configuration file */
   }
#ifdef B160423
   if (awcl_unix_domain_socket) {           /* <Unix-Domain-Socket>    */
     iml1 = m_len_vx_vx( ied_chs_utf_8,     /* Unicode UTF-8           */
                         awcl_unix_domain_socket, -1, ied_chs_utf_16 )  /* Unicode UTF-16 = WCHAR */
              + 1;
     adsp_loconf_1_fill->achc_unix_domain_socket = (char *) malloc( iml1 );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_unix_domain_socket, iml1, ied_chs_utf_8,  /* Unicode UTF-8 */
                  awcl_unix_domain_socket, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   }
#ifndef B160423
/* new parameters */
   if (awcl_general_ext_random_g_domain_socket_name) {  /* external Random Generator */
     iml1 = m_len_vx_vx( ied_chs_utf_8,     /* Unicode UTF-8           */
                         awcl_general_ext_random_g_domain_socket_name, -1, ied_chs_utf_16 )  /* Unicode UTF-16 = WCHAR */
              + 1;
     adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name = (char *) malloc( iml1 );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name, iml1, ied_chs_utf_8,  /* Unicode UTF-8 */
                  awcl_general_ext_random_g_domain_socket_name, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   }
#endif
#endif
#endif
#ifndef B160423
   if (awcl_installation_name) {            /* installation-name UTF-16 */
     iml1 = m_len_vx_vx( ied_chs_utf_8,     /* Unicode UTF-8           */
                         awcl_installation_name, -1, ied_chs_utf_16 )  /* Unicode UTF-16 = WCHAR */
              + 1;
     adsp_loconf_1_fill->achc_installation_name = (char *) malloc( iml1 );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_installation_name, iml1, ied_chs_utf_8,  /* Unicode UTF-8 */
                  awcl_installation_name, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   }
#ifdef HL_UNIX
   if (awcl_unix_domain_socket) {           /* <Unix-Domain-Socket>    */
     iml1 = m_len_vx_vx( ieg_charset_system,  /* character-set system  */
                         awcl_unix_domain_socket, -1, ied_chs_utf_16 )  /* Unicode UTF-16 = WCHAR */
              + 1;
     adsp_loconf_1_fill->achc_unix_domain_socket = (char *) malloc( iml1 );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_unix_domain_socket, iml1, ieg_charset_system,  /* character-set system */
                  awcl_unix_domain_socket, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   }
#ifndef B160423
/* new parameters */
   if (awcl_general_ext_random_g_domain_socket_name) {  /* external Random Generator */
     iml1 = m_len_vx_vx( ieg_charset_system,  /* character-set system  */
                         awcl_general_ext_random_g_domain_socket_name, -1, ied_chs_utf_16 )  /* Unicode UTF-16 = WCHAR */
              + 1;
     adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name = (char *) malloc( iml1 );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name, iml1, ieg_charset_system,  /* character-set system */
                  awcl_general_ext_random_g_domain_socket_name, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   }
   if (   (adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name)
       && (adsp_loconf_1_fill->imc_ext_random_g_timeout_ms == 0)) {  /* timeout external Random Generator */
     adsp_loconf_1_fill->imc_ext_random_g_timeout_ms = EXT_RANDOM_G_TIMEOUT_MS;  /* timeout external Random Generator */
   }
#endif
#endif
#endif
   if (awcl_general_security_token) {       /* security-token UTF-16   */
     adsp_loconf_1_fill->imc_len_security_token  /* length of security-token */
       = m_len_vx_vx( ied_chs_utf_8,        /* Unicode UTF-8           */
                      awcl_general_security_token, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
     adsp_loconf_1_fill->achc_security_token  /* security-token UTF-8  */
       = (char *) malloc( adsp_loconf_1_fill->imc_len_security_token );
     m_cpy_vx_vx( adsp_loconf_1_fill->achc_security_token,
                  adsp_loconf_1_fill->imc_len_security_token,
                  ied_chs_utf_8,            /* Unicode UTF-8           */
                  awcl_general_security_token,
                  -1,
                  ied_chs_utf_16 );         /* Unicode UTF-16 = WCHAR  */
   }
   if (achl_general_sec_token_mem) {        /* security-token UTF-8    */
     adsp_loconf_1_fill->imc_len_security_token  /* length of security-token */
       = iml_len_general_sec_token;         /* length security-token UTF-8 */
     adsp_loconf_1_fill->achc_security_token  /* security-token UTF-8  */
       = achl_general_sec_token_mem;        /* security-token UTF-8    */
   }
   /* log may have changed                                             */
   if (bog_log != bol_log) {                /* log status has changed  */
     bog_log = bol_log;
     if (bog_log) {                         /* log open now            */
       m_open_log();                        /* call subroutine open log */
     }
   }
   m_disp_conf_file( TRUE );
   /* set number of work threads                                       */
   if (   (adsp_loconf_1_fill->inc_max_poss_workthr != 0)
       && (adsp_loconf_1_fill->inc_max_act_workthr != 0)) {
     if (adsp_loconf_1_fill->inc_max_poss_workthr
           < adsp_loconf_1_fill->inc_max_act_workthr) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01404W general max-poss-work-thread %d smaller than max-active-work-thread %d - set default values",
                   adsp_loconf_1_fill->inc_max_poss_workthr,
                   adsp_loconf_1_fill->inc_max_act_workthr );
       adsp_loconf_1_fill->inc_max_poss_workthr = DEF_NO_WTHR_S_DEFAULT;
       adsp_loconf_1_fill->inc_max_act_workthr = DEF_NO_WTHR_A_DEFAULT;
     }
   } else if (   (adsp_loconf_1_fill->inc_max_poss_workthr == 0)
              && (adsp_loconf_1_fill->inc_max_act_workthr == 0)) {
     adsp_loconf_1_fill->inc_max_poss_workthr = iml_no_cpu << 4;
     if (adsp_loconf_1_fill->inc_max_poss_workthr < DEF_NO_WTHR_S_DEFAULT) {
       adsp_loconf_1_fill->inc_max_poss_workthr = DEF_NO_WTHR_S_DEFAULT;
     }
     adsp_loconf_1_fill->inc_max_act_workthr = iml_no_cpu << 1;
     if (adsp_loconf_1_fill->inc_max_act_workthr < DEF_NO_WTHR_A_DEFAULT) {
       adsp_loconf_1_fill->inc_max_act_workthr = DEF_NO_WTHR_A_DEFAULT;
     }
   } else if (adsp_loconf_1_fill->inc_max_poss_workthr > 0) {
     adsp_loconf_1_fill->inc_max_act_workthr
       = adsp_loconf_1_fill->inc_max_poss_workthr >> 3;
     if (adsp_loconf_1_fill->inc_max_act_workthr < DEF_NO_WTHR_MINIMUM) {
       adsp_loconf_1_fill->inc_max_act_workthr = DEF_NO_WTHR_MINIMUM;
     }
   } else {
     adsp_loconf_1_fill->inc_max_poss_workthr
       = adsp_loconf_1_fill->inc_max_act_workthr << 3;
     if (adsp_loconf_1_fill->inc_max_poss_workthr > DEF_NO_WTHR_MAXIMUM) {
       adsp_loconf_1_fill->inc_max_poss_workthr = DEF_NO_WTHR_MAXIMUM;
     }
   }
#ifdef NOTYET050816
   /* set priority process                                             */
   if (iml_priority_process != ims_priority_process) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPM007I SetPriorityClass to %d", iml_priority_process );
     ims_priority_process = iml_priority_process;
     bou1 = SetPriorityClass( GetCurrentProcess(),
                              imrs_priority[ iml_priority_process - DEF_PRIO_MINIMUM ] );
     if (bou1 == FALSE) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPM008W SetPriorityClass Error %d", GetLastError() );
     }
   }
#endif
   do {                                     /* SWAP-STOR               */
     if (   (adsp_loconf_1_fill->imc_swap_mem_size == 0)  /* <size-swap-in-memory> in 64 KB units */
         && (adsp_loconf_1_fill->imc_max_swap_size == 0)) {  /* <max-swap-size> in 64 KB units */
       if (adsp_loconf_1_fill->adsc_swap_fn_chain == NULL) break;  /* chain of filenames for swap file */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04014W general <swap-file> configured but no <max-swap-size> and <size-swap-in-memory> - SWAP-STOR not usable" );
       while (adsp_loconf_1_fill->adsc_swap_fn_chain) {  /* free chain of filenames for swap file */
         adsl_filename_1_w1 = adsp_loconf_1_fill->adsc_swap_fn_chain;  /* get chain of filenames for swap file */
         adsp_loconf_1_fill->adsc_swap_fn_chain = adsl_filename_1_w1->adsc_next;  /* remove from chain of filenames for swap file */
         free( adsl_filename_1_w1 );        /* free memory of file name */
       }
       break;
     }
     if (   (adsp_loconf_1_fill->imc_swap_mem_size == 0)  /* <size-swap-in-memory> in 64 KB units */
         && (adsp_loconf_1_fill->imc_max_swap_size > 0)) {  /* <max-swap-size> in 64 KB units */
       adsp_loconf_1_fill->imc_swap_mem_size = adsp_loconf_1_fill->imc_max_swap_size;
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04015W general <size-swap-in-memory> not configured - set to <max-swap-size> %lld.",
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_swap_mem_size << SHIFT_BLOCK_SWAP );
       break;
     }
     if (   (adsp_loconf_1_fill->imc_swap_mem_size > 0)  /* <size-swap-in-memory> in 64 KB units */
         && (adsp_loconf_1_fill->imc_max_swap_size == 0)) {  /* <max-swap-size> in 64 KB units */
       adsp_loconf_1_fill->imc_max_swap_size = adsp_loconf_1_fill->imc_swap_mem_size;
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04016W general <max-swap-size> not configured - set to <size-swap-in-memory> %lld.",
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_max_swap_size << SHIFT_BLOCK_SWAP );
       break;
     }
     if (adsp_loconf_1_fill->imc_swap_mem_size  /* <size-swap-in-memory> in 64 KB units */
           > adsp_loconf_1_fill->imc_max_swap_size) {  /* <max-swap-size> in 64 KB units */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04017W general <size-swap-in-memory> %lld greater <max-swap-size> %lld - set to <max-swap-size>",
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_swap_mem_size << SHIFT_BLOCK_SWAP,
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_max_swap_size << SHIFT_BLOCK_SWAP );
       adsp_loconf_1_fill->imc_swap_mem_size = adsp_loconf_1_fill->imc_max_swap_size;
     }
     if (    (adsp_loconf_1_fill->imc_max_swap_size  /* <max-swap-size> in 64 KB units */
                > adsp_loconf_1_fill->imc_swap_mem_size)  /* <size-swap-in-memory> in 64 KB units */
         &&  (adsp_loconf_1_fill->adsc_swap_fn_chain == NULL)) {  /* chain of filenames for swap file */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC04018W general <max-swap-size> %lld greater <size-swap-in-memory> %lld but no <swap-file> configured - set <max-swap-size> to <size-swap-in-memory>",
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_max_swap_size << SHIFT_BLOCK_SWAP,
                       (HL_LONGLONG) adsp_loconf_1_fill->imc_swap_mem_size << SHIFT_BLOCK_SWAP );
       adsp_loconf_1_fill->imc_max_swap_size = adsp_loconf_1_fill->imc_swap_mem_size;
     }
   } while (FALSE);
#ifndef HL_UNIX
   if (adsl_node_gen_wcd == NULL) {         /* save section win-co-dump */
#ifdef B080324
     goto p_buco_blacont_00;
#endif
#ifdef B111217
     goto p_buco_radius_s_00;
#endif
     goto p_buco_end_part_one;              /* end of part one         */
   }
   /* parameters windows core dump                                     */
   adunode4 = adsl_node_gen_wcd->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01420W Error element name \"sslgate-configuration\" \"general\" \"windows-core-dump\" has no child - ignored" );
#ifdef B080324
     goto p_buco_blacont_00;
#endif
#ifdef B111217
     goto p_buco_radius_s_00;
#endif
     goto p_buco_end_part_one;              /* end of part one         */
   }
   memset( achrl_gwcd_text, 0, sizeof(achrl_gwcd_text) );  /* store text fields */
   do {
     if (adunode4->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
       inl1 = 0;                            /* clear index             */
       do {
#ifndef OLD01
         bol1 = m_cmp_u16z_u8z( &inl2, awcu4_name, (char *) achrs_node_gwcd[ inl1 ] );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           break;
         }
#else
         if (!wcscmp( awcu4_name, awcrs_node_gwcd[ inl1 ])) break;
#endif
         inl1++;                            /* increment index         */
       } while (inl1 < (sizeof(achrs_node_gwcd) / sizeof(achrs_node_gwcd[0])));
       do {
         if (inl1 >= (sizeof(achrs_node_gwcd) / sizeof(achrs_node_gwcd[0]))) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01421W Error element name \"sslgate-configuration\" \"general\" \"windows-core-dump\"\
 has invalid child \"%(ux)s\" - ignored", awcu4_name );
           break;
         }
         if (achrl_gwcd_text[inl1] != NULL) {  /* store text fields    */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01422W Error element name \"sslgate-configuration\" \"general\" \"windows-core-dump\"\
 child double \"%(ux)s\" - ignored", awcu4_name );
           break;
         }
         adunode5 = adunode4->getFirstChild();
         if (adunode5 == NULL) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01423W Error element \"general\" \"windows-core-dump\" name \"%(ux)s\" has no child - ignored",
                       awcu4_name );
           break;
         }
         do {                               /* search text node        */
           if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
             awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
             break;
           }
           adunode5 = adunode5->getNextSibling();
         } while (adunode5);
         if (adunode5 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01424W Error element \"general\" \"windows-core-dump\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                       awcu4_name );
           break;
         }
         achrl_gwcd_text[inl1] = XMLString::transcode( (XMLCh *) awcu4_value );
       } while (FALSE);
     }
     adunode4 = adunode4->getNextSibling();
   } while (adunode4);
   if (achrl_gwcd_text[0] == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01425W Error element \"general\" \"windows-core-dump\" defined but <diskdirfd> missing - ignored, no windows-core-dump" );
     dsg_wcord1.achc_diskdirfd = NULL;      // disk-directory for Dumps
     dsg_wcord1.achc_ineta_mgw = NULL;      // INETA mail-gateway
     dsg_wcord1.achc_email_rcpt = NULL;     // e-mail recipient
     dsg_wcord1.achc_email_sender = NULL;   // e-mail sender
     dsg_wcord1.achc_password = NULL;       // password
   } else {
     inl2 = 0;                              /* clear length storage    */
     inl1 = 0;                              /* clear index             */
     do {
       if (achrl_gwcd_text[inl1] != NULL) {
         inl2 += strlen( achrl_gwcd_text[inl1] ) + 1;  /* add length   */
       }
       inl1++;                              /* next variable           */
     } while (inl1 < (sizeof(achrs_node_gwcd) / sizeof(achrs_node_gwcd[0])));
     achl1 = (char *) malloc( inl2 );       /* acquire storage         */
     inl1 = 0;                              /* clear index             */
     do {
       achl2 = NULL;                        /* no text yet             */
       if (achrl_gwcd_text[inl1] != NULL) {
         inl2 = strlen( achrl_gwcd_text[inl1] ) + 1;  /* get length    */
         memcpy( achl1, achrl_gwcd_text[inl1], inl2 );
         achl2 = achl1;                     /* save address this text  */
         achl1 += inl2;                     /* add length of this text */
       }
       switch (inl1) {
         case 0:
           dsg_wcord1.achc_diskdirfd = achl2;  // disk-directory for Dumps
           break;
         case 1:
           dsg_wcord1.achc_ineta_mgw = achl2;  // INETA mail-gateway
           break;
         case 2:
           dsg_wcord1.achc_email_rcpt = achl2;  // e-mail recipient
           break;
         case 3:
           dsg_wcord1.achc_email_sender = achl2;  // e-mail sender
           break;
         case 4:
           dsg_wcord1.achc_password = achl2;  // password
           break;
       }
       inl1++;                              /* next variable           */
     } while (inl1 < (sizeof(achrs_node_gwcd) / sizeof(achrs_node_gwcd[0])));
   }
   inl1 = 0;                                /* clear index             */
   do {
     if (achrl_gwcd_text[inl1] != NULL) {
       XMLString::release( &achrl_gwcd_text[inl1] );  /* free text again */
     }
     inl1++;                                /* next variable           */
   } while (inl1 < (sizeof(achrs_node_gwcd) / sizeof(achrs_node_gwcd[0])));
#endif
#ifdef B080324

   p_buco_blacont_00:                       /* blade control           */
#ifdef B111217
   if (adunode_blade_control == NULL) goto p_buco_radius_s_00;
#endif
   if (adunode_blade_control == NULL) {
     goto p_buco_end_part_one;              /* end of part one         */
   }
   adunode3 = adunode_blade_control->getFirstChild();
   if (adunode3 == 0) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01050W Error element name \"sslgate-configuration\" \"blade-control\" has no child - ignored" );
#ifdef B111217
     goto p_buco_radius_s_00;
#endif
     goto p_buco_end_part_one;              /* end of part one         */
   }
   memset( rboblacont, 0, sizeof(rboblacont) );
   iml_blacont_sign_on_time = -1;           /* sign on time            */
   awcl_blacont_ineta = NULL;               /* IP-address tr twi       */
   iml_blacont_port = -1;                   /* port for inbound tr twi */
// adl_blatw_1 = NULL;                      /* chain of twin WSP       */
   iml_blacont_twurl_no_ele = 0;            /* number of elements in t */
   iml_blacont_twurl_no_stor = 0;           /* number of elements stor */
   do {
     inl1 = 0;                              /* clear index             */
     if (adunode3->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
#ifndef OLD01
       inl1 = sizeof(achrs_node_blacont_kw) / sizeof(achrs_node_blacont_kw[0]);
       do {
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, (char *) achrs_node_blacont_kw[ inl1 - 1 ] );
         if ((bol1) && (inl2 == 0)) break;  /* strings are equal       */
         inl1--;                            /* decrement index         */
       } while (inl1 > 0);
       if (inl1 == 0) {                     /* parameter not found     */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01051W Error element name \"sslgate-configuration\" \"blade-control\"\
 has invalid child \"%(ux)s\" - ignored", awcu3_name );
       }
#else
       if (!wcscmp( awcu3_name, L"sign-on-time" )) {
         inl1 = DEF_XML_BLACONT_SIONTI;
       } else if (!wcscmp( awcu3_name, L"trimming-in-ineta" )) {
         inl1 = DEF_XML_BLACONT_TRINETA;
       } else if (!wcscmp( awcu3_name, L"trimming-in-port" )) {
         inl1 = DEF_XML_BLACONT_TRPORT;
       } else if (!wcscmp( awcu3_name, L"trimming-twin-list" )) {
         inl1 = DEF_XML_BLACONT_TRTWLI;
       } else {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01051W Error element name \"sslgate-configuration\" \"blade-control\"\
 has invalid child \"%(ux)s\" - ignored", awcu3_name );
       }
#endif
       if ((inl1 > 0) && (rboblacont[ inl1 - 1 ])) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01052W Error element name \"sslgate-configuration\" \"blade-control\"\
 child double \"%(ux)s\" - ignored", awcu3_name );
         inl1 = 0;                          /* make invalid            */
       }
       while (inl1 > 0) {
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01053W Error element blade-control name \"%(ux)s\" has no child - ignored",
                       awcu3_name );
           inl1 = 0;                        /* make invalid            */
           break;
         }
         if (inl1 == DEF_XML_BLACONT_TRTWLI) {
           do  {                            /* check all elements      */
             while (TRUE) {
               if (adunode4->getNodeType() != DOMNode::ELEMENT_NODE) break;
               awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
#ifndef OLD01
               bol1 = m_cmp_u16z_u8z( &inl2, awcu4_name, "trimming-twin-url" );
               if ((bol1 == FALSE) || (inl2)) {  /* strings not equal  */
                 m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01054W Error element blade-control trimming-twin-list entry \"%(ux)s\" invalid - ignored",
                                 awcu4_name );
                 break;                     /* get next list entry     */
               }
#else
               if (wcscmp( awcu4_name, L"trimming-twin-url" )) {
                 m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01054W Error element blade-control trimming-twin-list entry \"%(ux)s\" invalid - ignored",
                             awcu4_name );
                 break;                     /* get next list entry     */
               }
#endif
               adunode5 = adunode4->getFirstChild();
               if (adunode5 == 0) {
                 m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01055W Error element blade-control trimming-twin-list entry has no child - ignored" );
                 break;                     /* get next list entry     */
               }
               do {
                 if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
                   awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
                   break;
                 }
                 adunode5 = adunode5->getNextSibling();
               } while (adunode5);
               if (adunode5 == 0) {
                 m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01056W Error element blade-control trimming-twin-list entry no value found - ignored" );
                 break;                     /* get next list entry     */
               }
               iml1 = iml_blacont_twurl_no_ele;  /* save number of ele */
               iml_blacont_twurl_no_ele++;  /* number of elements in t */
               if (iml_blacont_twurl_no_ele > iml_blacont_twurl_no_stor) {
                 iml_blacont_twurl_no_stor += DEF_BLACONT_TWURL_TAB;
                 awcrl_blacont_twin_url_o = awcrl_blacont_twin_url_c;
                 awcrl_blacont_twin_url_c = (HL_WCHAR **) malloc( iml_blacont_twurl_no_stor * sizeof(HL_WCHAR *) );
                 if (iml1) {
                   memcpy( awcrl_blacont_twin_url_c,
                           awcrl_blacont_twin_url_o,
                           iml1 * sizeof(HL_WCHAR *) );
                   free( awcrl_blacont_twin_url_o );
                 }
               }
               awcrl_blacont_twin_url_c[ iml1 ] = awcu4_value;
               break;
             }
             adunode4 = adunode4->getNextSibling();
           } while (adunode4);
           if (awcrl_blacont_twin_url_c == 0) {
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01057W Error element blade-control trimming-twin-list entry no value found - ignored" );
             inl1 = 0;                      /* make invalid            */
           }
           break;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu3_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
         if (adunode4 == 0) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01058W Error element blade-control name \"%(ux)s\" no TEXT_NODE found - ignored",
                       awcu3_name );
           inl1 = 0;                        /* make invalid            */
           break;
         }
         if (   (inl1 == DEF_XML_BLACONT_SIONTI)
             || (inl1 == DEF_XML_BLACONT_TRPORT)) {
           inl2 = m_get_wc_number( awcu3_value );
           if (inl2 <= 0) {                 /* number was valid        */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01059W Error element blade-control name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                             awcu3_name, awcu3_value );
             inl1 = 0;                      /* make invalid            */
             break;
           }
         }
         switch (inl1) {
           case DEF_XML_BLACONT_SIONTI:
             iml_blacont_sign_on_time = inl2;
             break;
           case DEF_XML_BLACONT_TRINETA:
             awcl_blacont_ineta = awcu3_value;  /* IP-address tr twi   */
             break;
           case DEF_XML_BLACONT_TRPORT:
             iml_blacont_port = inl2;       /* port for inbound tr twi */
             break;
         }
         if (inl1 == 0) break;
         rboblacont[ inl1 - 1 ] = TRUE;     /* this parameter defined now */
         break;
       }
     }
     adunode3 = adunode3->getNextSibling();
   } while (adunode3);
   dsl_cs.boc_blacont_def = TRUE;           /* BLADE Control defined   */
#endif

#ifdef B111217
   p_buco_radius_s_00:                      /* radius server           */
   if (adunode2 == adunode_general) goto p_buco_radius_s_80;
#ifdef B080324
   if (adunode2 == adunode_blade_control) goto p_buco_radius_s_80;
#endif
   if (adunode2 == adsl_node_ocsp) goto p_buco_radius_s_80;
   if (adunode2 == adsl_node_csssl) goto p_buco_radius_s_80;
   if (adunode2 == adsl_node_confp) goto p_buco_radius_s_80;
   if (adunode2->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_radius_s_80;
   awcu2 = (HL_WCHAR *) adunode2->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 p_buco_radius_s_00 found section %(ux)s", awcu2 );
#endif
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu2, "radius-server" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     goto p_buco_radius_s_80;
   }
#else
   if (wcscmp( awcu2, L"radius-server" )) {
     goto p_buco_radius_s_80;
   }
#endif
   /* process sslgate-c radius-server                                  */
   iel_red = ied_red_invalid;               /* entry invalid till now  */
   adunode3 = adunode2->getFirstChild();
   if (adunode3 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01180W Error radius-server element has no child - ignored" );
     goto p_buco_radius_s_68;
   }
   /* search name                                                      */
   adunode_save1 = adunode3;                /* save node               */
   adunode_name = NULL;
   awcu_name_value = NULL;
   while (adunode3) {
     if (adunode3->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, "name" );
       if ((bol1) && (inl1 == 0)) {         /* strings are equal       */
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01181W Error element radius-server name double - ignored" );
           goto p_buco_radius_s_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01182W Error element radius-server name \"%(ux)s\" has no child - ignored",
                   awcu3_name );
           goto p_buco_radius_s_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#else
       if (!wcscmp( awcu3_name, L"name" )) {
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01181W Error element radius-server name double - ignored" );
           goto p_buco_radius_s_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01182W Error element radius-server name \"%(ux)s\" has no child - ignored",
                   awcu3_name );
           goto p_buco_radius_s_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#endif
     }
//   if (adunode_name) break;
     adunode3 = adunode3->getNextSibling();
   }
   if (awcu_name_value == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01183W Error element radius-server no name value found - ignored" );
     goto p_buco_radius_s_68;
   }
#ifdef OLD_1112
   adsl_raent_1 = dsl_cs.adsc_raent_anchor;  /* get chain of already de */
   while (adsl_raent_1) {                   /* loop over total chain   */
     if (adsl_raent_1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (adsl_raent_1 + 1), awcu_name_value )) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01184W Error element radius-server name \"%(ux)s\" defined double - ignored",
                     awcu_name_value );
         goto p_buco_radius_s_68;
       }
     }
     adsl_raent_1 = adsl_raent_1->adsc_next;  /* get next in chain     */
   }
#endif
   adunode3 = adunode_save1;                /* restore node            */
#ifndef OLD01
   memset( awcrl_radius_s_tab, 0, sizeof(awcrl_radius_s_tab) );
   inl_radius_s_timeout = 0;                /* value timeout radius-se */
#else
   memset( borl_radius, 0, sizeof(borl_radius) );
   awcl_radius_s_gate_ineta = NULL;         /* value INETA gate        */
   awcl_radius_s_radius_ineta = NULL;       /* value INETA radius-serv */
   awcl_radius_s_port = NULL;               /* value port radius-serv  */
   inl_radius_s_timeout = 0;                /* value timeout radius-se */
   awcl_radius_s_shared_secret = NULL;      /* value shared secret     */
#endif

   p_buco_radius_s_20:                      /* child of radius-server  */
   if (adunode3 == adunode_name) goto p_buco_radius_s_60;
   if (adunode3->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_radius_s_60;
   awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
   inl1 = 0;                                /* clear found name value  */
#ifndef OLD01
   inl1 = sizeof(achrs_node_radius_kw) / sizeof(achrs_node_radius_kw[0]);
   while (TRUE) {                           /* loop over all entries   */
     if (inl1 == 0) {                       /* this keyword not found  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01185W Error radius-server \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                   awcu_name_value, awcu3_name );
       goto p_buco_radius_s_60;
     }
     bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, (char *) achrs_node_radius_kw[ inl1 - 1 ] );
     if ((bol1) && (inl2 == 0)) {           /* strings are equal       */
       break;
     }
     inl1--;                                /* decrement index         */
   }
   if (awcrl_radius_s_tab[ inl1 - 1 ]) {    /* element already found   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01186W Error element radius-server \"%(ux)s\" node name \"%(ux)s\" double - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_radius_s_60;
   }
#else
   aadsl_radius_s_var = NULL;               /* area of string          */
   if (!wcscmp( awcu3_name, L"gate-ineta" )) {  /* compare constant    */
     inl1 = DEF_XML_RADIUS_S_GATE_INETA;
     aadsl_radius_s_var = &awcl_radius_s_gate_ineta;
   } else if (!wcscmp( awcu3_name, L"radius-ineta" )) {  /* compare co */
     inl1 = DEF_XML_RADIUS_S_RADIUS_INETA;
     aadsl_radius_s_var = &awcl_radius_s_radius_ineta;
   } else if (!wcscmp( awcu3_name, L"radius-port" )) {  /* compare co  */
     inl1 = DEF_XML_RADIUS_S_PORT;
     aadsl_radius_s_var = &awcl_radius_s_port;
   } else if (!wcscmp( awcu3_name, L"timeout" )) {  /* compare const   */
     inl1 = DEF_XML_RADIUS_S_TIMEOUT;
   } else if (!wcscmp( awcu3_name, L"shared-secret" )) {  /* compare c */
     inl1 = DEF_XML_RADIUS_S_SHARED_SECRET;
     aadsl_radius_s_var = &awcl_radius_s_shared_secret;
   } else {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01185W Error radius-server \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                 awcu_name_value, awcu3_name );
     goto p_buco_radius_s_60;
   }
   if (borl_radius[ inl1 - 1 ]) {           /* element already found   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01186W Error element radius-server \"%(ux)s\" node name \"%(ux)s\" double - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_radius_s_60;
   }
#endif
   adunode4 = adunode3->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01187W Error element radius-server \"%(ux)s\" - \"%(ux)s\" has no child - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_radius_s_60;
   }
   do {
     if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
       awcu3_value = (HL_WCHAR *) adunode4->getNodeValue();
       break;
     }
     adunode4 = adunode4->getNextSibling();
   } while (adunode4);
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01188W Error element radius-server \"%(ux)s\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_radius_s_60;
   }
#ifndef OLD01
   awcrl_radius_s_tab[ inl1 - 1 ] = awcu3_value;  /* set value         */
   if (inl1 == DEF_XML_RADIUS_S_TIMEOUT) {  /* is timeout              */
     inl2 = m_get_wc_number( awcu3_value );
     if (inl2 <= 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01189W Error element radius-server name \"%(ux)s\" numeric value timeout invalid \"%(ux)s\" - ignored",
                   awcu3_name, awcu3_value );
       goto p_buco_radius_s_60;
     }
     inl_radius_s_timeout = inl2;           /* set timeout             */
   }
#else
   if (aadsl_radius_s_var) {
     *aadsl_radius_s_var = awcu3_value;
   } else {                                 /* is timeout              */
     inl2 = m_get_wc_number( awcu3_value );
     if (inl2 <= 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01189W Error element radius-server name \"%(ux)s\" numeric value timeout invalid \"%(ux)s\" - ignored",
                       awcu3_name, awcu3_value );
       goto p_buco_radius_s_60;
     }
     inl_radius_s_timeout = inl2;           /* set timeout             */
   }
   borl_radius[ inl1 - 1 ] = TRUE;
#endif

   p_buco_radius_s_60:                      /* next child radius serv  */
   adunode3 = adunode3->getNextSibling();
   if (adunode3) goto p_buco_radius_s_20;
#ifndef OLD01
   inl1 = 0;                                /* start of table          */
   do {                                     /* loop over all entries   */
     if (awcrl_radius_s_tab[ inl1 ] == NULL) {  /* value not defined   */
       switch (inl1) {
         case (DEF_XML_RADIUS_S_RADIUS_INETA - 1):
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01190W Error radius-server \"%(ux)s\" no radius-ineta defined - ignored",
                           awcu_name_value );
           goto p_buco_radius_s_68;         /* ignore what has been defined */
         case (DEF_XML_RADIUS_S_PORT - 1):
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01191W Error radius-server \"%(ux)s\" no radius-port defined - ignored",
                           awcu_name_value );
           goto p_buco_radius_s_68;         /* ignore what has been defined */
         case (DEF_XML_RADIUS_S_TIMEOUT- 1):
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01192W Error radius-server \"%(ux)s\" no timeout defined - ignored",
                           awcu_name_value );
           goto p_buco_radius_s_68;         /* ignore what has been defined */
         case (DEF_XML_RADIUS_S_SHARED_SECRET - 1):
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01193W Error radius-server \"%(ux)s\" no shared-secret defined - ignored",
                           awcu_name_value );
           goto p_buco_radius_s_68;         /* ignore what has been defined */
       }
     }
     inl1++;                                /* increment index         */
   } while (inl1 < sizeof(awcrl_radius_s_tab) / sizeof(awcrl_radius_s_tab[0]));
#else
   if (awcl_radius_s_radius_ineta == NULL) {  /* value INETA radius-se */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01190W Error radius-server \"%(ux)s\" no radius-ineta defined - ignored",
                 awcu_name_value );
     goto p_buco_radius_s_68;
   }
   if (awcl_radius_s_port == NULL) {        /* value port radius-serv  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01191W Error radius-server \"%(ux)s\" no radius-port defined - ignored",
                 awcu_name_value );
     goto p_buco_radius_s_68;
   }
   if (inl_radius_s_timeout == 0) {         /* value timeout radius-se */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01192W Error radius-server \"%(ux)s\" no timeout defined - ignored",
                 awcu_name_value );
     goto p_buco_radius_s_68;
   }
   if (awcl_radius_s_shared_secret == NULL) {  /* value shared secret  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01193W Error radius-server \"%(ux)s\" no shared-secret defined - ignored",
                 awcu_name_value );
     goto p_buco_radius_s_68;
   }
#endif
   iel_red = ied_red_defined;               /* entry has been defined  */

   p_buco_radius_s_68:                      /* create entry radius ser */
   inl1 = inl2 = 0;
   if (awcu_name_value) {
     inl1 = (HL_WCSLEN( awcu_name_value ) + 1) * sizeof(HL_WCHAR);
   }
#ifndef OLD01
   if (awcrl_radius_s_tab[ DEF_XML_RADIUS_S_SHARED_SECRET - 1 ]) {
     inl2 = m_count_wchar_z_to_utf8( awcrl_radius_s_tab[ DEF_XML_RADIUS_S_SHARED_SECRET - 1 ] );
   }
#else
   if (awcl_radius_s_shared_secret) {
     inl2 = m_count_wchar_z_to_utf8( (HL_WCHAR *) awcl_radius_s_shared_secret );
   }
#endif
#ifdef OLD_1112
   adsl_raent_1 = (struct dsd_radius_entry *) malloc( sizeof(struct dsd_radius_entry)
                                                      + inl1 + inl2 );
   adsl_raent_1->adsc_raque_chain = NULL;   /* chain active rad entr   */
   adsl_raent_1->inc_len_name = inl1;       /* length of name bytes    */
   adsl_raent_1->inc_len_shasec = inl2;     /* length of shared secret */
   adsl_raent_1->chc_identifier = 0;        /* start value identifier  */
   if (inl1) {
     memcpy( adsl_raent_1 + 1, awcu_name_value, inl1 );
   }
#ifndef OLD01
   if (inl2) {
     m_trans_wchar_z_to_utf8( (char *) (adsl_raent_1 + 1) + inl1,
                              awcrl_radius_s_tab[ DEF_XML_RADIUS_S_SHARED_SECRET - 1 ] );
   }
#else
   if (inl2) {
     m_trans_wchar_z_to_utf8( (char *) (adsl_raent_1 + 1) + inl1,
                              (HL_WCHAR *) awcl_radius_s_shared_secret );
   }
#endif
   adsl_raent_1->adsc_radius_node = adunode2;
#ifndef OLD01
   adsl_raent_1->awcc_radius_s_gate_ineta = awcrl_radius_s_tab[ DEF_XML_RADIUS_S_GATE_INETA - 1 ];
   adsl_raent_1->awcc_radius_s_radius_ineta = awcrl_radius_s_tab[ DEF_XML_RADIUS_S_RADIUS_INETA - 1 ];
   adsl_raent_1->awcc_radius_s_port = awcrl_radius_s_tab[ DEF_XML_RADIUS_S_PORT - 1 ];
#else
   adsl_raent_1->awcc_radius_s_gate_ineta = awcl_radius_s_gate_ineta;
   adsl_raent_1->awcc_radius_s_radius_ineta = awcl_radius_s_radius_ineta;
   adsl_raent_1->awcc_radius_s_port = awcl_radius_s_port;
#endif
   adsl_raent_1->inc_radius_s_timeout = inl_radius_s_timeout;
   adsl_raent_1->iec_red = iel_red;         /* set status radius entry */
   adsl_raent_1->adsc_next = dsl_cs.adsc_raent_anchor;  /* get old chain */
   dsl_cs.adsc_raent_anchor = adsl_raent_1;  /* set new chain          */
#endif

   p_buco_radius_s_80:                      /* next radius server      */
   adunode2 = adunode2->getNextSibling();
   if (adunode2) goto p_buco_radius_s_00;

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_conf_conn l%05d after p_buco_radius_s_80", __LINE__ );
#endif
#endif

   p_buco_end_part_one:                     /* end of part one         */
   if (amp_startprog) {
     bol1 = amp_startprog( &dsl_wsp_startprog );
     if (bol1 == FALSE) return FALSE;       /* error during initialization */
   }

   /* target-filter                                                    */
   adsl_targfi_dummy_w1 = adsl_targfi_dummy_anchor;  /* get anchor chain target-filter */
   while (adsl_targfi_dummy_w1) {           /* loop over all target-filter */
     adsl_targfi_w1 = m_conf_targfi_1( &dsl_cs, adsl_targfi_dummy_w1->adsc_node_targfi_d );
     if (adsl_targfi_w1) {                  /* target-filter valid     */
       adsl_targfi_w1->adsc_next = dsl_cs.adsc_targfi_1_anchor;  /* get chain target-filter */
       dsl_cs.adsc_targfi_1_anchor = adsl_targfi_w1;  /* set new in chain */
     }
     adsl_targfi_dummy_w1 = adsl_targfi_dummy_w1->adsc_next;  /* get next in chain */
   }

   /* SNMP-configuration                                               */
   if (borl_general[ DEF_XML_GENERAL_SNMP_CO - 1 ] == FALSE) {
     goto p_start_snmp_80;                  /* end of start SNMP       */
   }
   /* first pass resolve INETAs                                        */
   adsl_tstt_1_w1 = dsl_cs.adsc_tstt_1_ch;  /* get chain of temporary SNMP trap target */
   while (adsl_tstt_1_w1) {                 /* loop over all SNMP trap targets */
     iml_rc = m_build_udp_param( &adsl_tstt_1_w1->dsc_udp_param_1, chrl_work1,
                                 adsl_tstt_1_w1->awcc_go_ineta, -1, ied_chs_utf_16,
                                 adsl_tstt_1_w1->awcc_tt_ineta, -1, ied_chs_utf_16 );
     if (iml_rc) {                          /* error occured           */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target target-ineta \"%(ux)s\" invalid error %d - trap-target ignored",
                       adsl_tstt_1_w1->imc_xml_lineno, adsl_tstt_1_w1->imc_xml_col,
                       adsl_tstt_1_w1->awcc_tt_ineta, iml_rc );
       adsl_tstt_1_w1->boc_invalid = TRUE;  /* the entry is invalid    */
     }
     switch (adsl_tstt_1_w1->dsc_udp_param_1.dsc_soa_target.ss_family) {
       case AF_INET:                        /* IPV4                    */
         ((struct sockaddr_in *) &adsl_tstt_1_w1->dsc_udp_param_1.dsc_soa_target)->sin_port
           = htons( adsl_tstt_1_w1->imc_port );
         break;
       case AF_INET6:                       /* IPV6                    */
         ((struct sockaddr_in6 *) &adsl_tstt_1_w1->dsc_udp_param_1.dsc_soa_target)->sin6_port
           = htons( adsl_tstt_1_w1->imc_port );
         break;
     }
     adsl_tstt_1_w1 = adsl_tstt_1_w1->adsc_next;  /* get next in chain */
   }
   /* second pass we check if target-ineta double and count needed memory */
   iml1 = 0;                                /* clear length of memory  */
   adsl_tstt_1_w1 = dsl_cs.adsc_tstt_1_ch;  /* get chain of temporary SNMP trap target */
   while (adsl_tstt_1_w1) {                 /* loop over all SNMP trap targets */
     do {                                   /* pseudo-loop             */
       if (adsl_tstt_1_w1->boc_invalid) break;  /* the entry is invalid */
       /* check if INETA double                                        */
       adsl_tstt_1_w2 = adsl_tstt_1_w1->adsc_next;  /* get element defined before */
       while (adsl_tstt_1_w2) {             /* loop over previous defined entries */
         if (!memcmp( &adsl_tstt_1_w2->dsc_udp_param_1.dsc_soa_target,
                      &adsl_tstt_1_w1->dsc_udp_param_1.dsc_soa_target,
                      sizeof(struct sockaddr_storage) )) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target target-ineta \"%(ux)s\" already defined before, double - trap-target ignored",
                           adsl_tstt_1_w1->imc_xml_lineno, adsl_tstt_1_w1->imc_xml_col,
                           adsl_tstt_1_w1->awcc_tt_ineta );
           adsl_tstt_1_w1->boc_invalid = TRUE;  /* the entry is invalid */
           break;
         }
         adsl_tstt_1_w2 = adsl_tstt_1_w2->adsc_next;  /* get next in chain */
       }
       if (adsl_tstt_1_w1->boc_invalid) break;  /* the entry is invalid */
       iml2 = sizeof(struct dsd_snmp_trap_target);
       if (adsl_tstt_1_w1->awcc_comment) {  /* with comment            */
         iml2 += m_len_vx_vx( ied_chs_utf_8, adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* add length of comment */
       }
       iml1 += (iml2 + sizeof(void *) - 1) & (0 - sizeof(void *));
     } while (FALSE);
     adsl_tstt_1_w1 = adsl_tstt_1_w1->adsc_next;  /* get next in chain */
   }

   /* length of memory calculated                                      */
   dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf  /* SNMP configuration    */
     = (struct dsd_snmp_conf *) malloc( iml1 );
   memcpy( dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf,
           &dsl_cs.dsc_snmp_conf,
           sizeof(struct dsd_snmp_conf) );
   if (dsl_cs.adsc_tstt_1_ch == NULL) {     /* no chain of temporary SNMP trap target */
     goto p_start_snmp_80;                  /* end of start SNMP       */
   }
   achl_w1 = (char *) (dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf + 1);
   adsl_snmp_trap_target_w1 = NULL;         /* for chaining            */
   adsl_tstt_1_w1 = dsl_cs.adsc_tstt_1_ch;  /* get chain of temporary SNMP trap target */
   do {                                     /* loop over all SNMP trap targets */
#define ADSL_STT_G ((struct dsd_snmp_trap_target *) achl_w1)
     if (adsl_tstt_1_w1->boc_invalid == FALSE) {  /* the entry is not invalid */
       memset( ADSL_STT_G, 0, sizeof(struct dsd_snmp_trap_target) );
       ADSL_STT_G->imc_socket = -1;         /* socket not yet valid    */
       /* definition UDP parameter                                     */
       memcpy( &ADSL_STT_G->dsc_udp_param_1,
               &adsl_tstt_1_w1->dsc_udp_param_1,
               sizeof(struct dsd_udp_param_1) );
       if (adsl_tstt_1_w1->awcc_comment) {  /* with comment            */
         ADSL_STT_G->dsc_comment.ac_str = ADSL_STT_G + 1;
         ADSL_STT_G->dsc_comment.imc_len_str
           = m_len_vx_vx( ied_chs_utf_8, adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* add length of comment */
         ADSL_STT_G->dsc_comment.iec_chs_str = ied_chs_utf_8;
         m_cpy_vx_vx( ADSL_STT_G->dsc_comment.ac_str, ADSL_STT_G->dsc_comment.imc_len_str, ied_chs_utf_8,
                      adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* copy comment */
       }
       if (adsl_snmp_trap_target_w1 == NULL) {  /* check chaining      */
         dsl_cs.adsc_loconf_1_fill->adsc_snmp_conf->adsc_snmp_trap_target
           = ADSL_STT_G;                    /* chain of <trap-target>  */
       } else {                             /* we have a previous element */
         adsl_snmp_trap_target_w1->adsc_next = ADSL_STT_G;  /* set element for chaining */
       }
       adsl_snmp_trap_target_w1 = ADSL_STT_G;  /* save this element for chaining */
       achl_w1 += ((sizeof(struct dsd_snmp_trap_target) + ADSL_STT_G->dsc_comment.imc_len_str)
                     + sizeof(void *) - 1) & (0 - sizeof(void *));
     }
     adsl_tstt_1_w1 = adsl_tstt_1_w1->adsc_next;  /* get next in chain */
   } while (adsl_tstt_1_w1);
#undef ADSL_STT_G

   /* free memory of temporary structures                              */
   while (dsl_cs.adsc_tstt_1_ch) {          /* loop over chain         */
     adsl_tstt_1_w1 = dsl_cs.adsc_tstt_1_ch;  /* get chain of temporary SNMP trap target */
     dsl_cs.adsc_tstt_1_ch = adsl_tstt_1_w1->adsc_next;  /* remove from chain */
     free( adsl_tstt_1_w1 );                /* free memory             */
   }

   p_start_snmp_80:                         /* end of start SNMP       */
#ifdef XYZ1
   struct dsd_bind_ineta_1 dsc_udp_gate_ineta;  /* <UDP-gate>          */
   struct dsd_bind_ineta_1 dsl_bind_ineta_1_work;
#endif

   if (dsl_cs.adsc_tug1_ch == NULL) {       /* chain of temporary UDP-gate */
     goto p_start_udp_gate_80;              /* end of start UDP-gate   */
   }
   adsl_tug1_w1 = dsl_cs.adsc_tug1_ch;      /* get chain of temporary UDP-gate */
   do {                                     /* loop over all temporary UDP-gates */
     iml_rc = m_build_bind_ineta( &dsl_bind_ineta_1_work,
                                  adsl_tug1_w1->awcc_g_ineta, -1, ied_chs_utf_16 );
     do {                                   /* pseudo-loop             */
       if (iml_rc) {                        /* error occured           */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate gate-ineta \"%(ux)s\" invalid error %d - UDP-gate ignored",
                         adsl_tug1_w1->imc_xml_lineno, adsl_tug1_w1->imc_xml_col,
                         adsl_tug1_w1->awcc_g_ineta, iml_rc );
         break;
       }
       while (dsl_bind_ineta_1_work.boc_ipv4) {  /* IPV4 is supported  */
         if (dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.boc_ipv4) {  /* IPV4 already set */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate gate-ineta \"%(ux)s\" IPV4 already set - IPV4 part ignored",
                           adsl_tug1_w1->imc_xml_lineno, adsl_tug1_w1->imc_xml_col,
                           adsl_tug1_w1->awcc_g_ineta );
           break;
         }
         memcpy( &dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.dsc_soai4,
                 &dsl_bind_ineta_1_work.dsc_soai4,
                 sizeof(struct sockaddr_in) );
         dsl_cs.adsc_loconf_1_fill->imc_udp_gate_ipv4_port = adsl_tug1_w1->imc_port;  /* UDP port IPV4 */
         dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.boc_ipv4 = TRUE;  /* IPV4 set now */
         break;
       }
       while (dsl_bind_ineta_1_work.boc_ipv6) {  /* IPV6 is supported  */
         if (dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.boc_ipv6) {  /* IPV6 already set */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate gate-ineta \"%(ux)s\" IPV6 already set - IPV6 part ignored",
                           adsl_tug1_w1->imc_xml_lineno, adsl_tug1_w1->imc_xml_col,
                           adsl_tug1_w1->awcc_g_ineta );
           break;
         }
         memcpy( &dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.dsc_soai6,
                 &dsl_bind_ineta_1_work.dsc_soai6,
                 sizeof(struct sockaddr_in6) );
         dsl_cs.adsc_loconf_1_fill->imc_udp_gate_ipv6_port = adsl_tug1_w1->imc_port;  /* UDP port IPV6 */
         dsl_cs.adsc_loconf_1_fill->dsc_udp_gate_ineta.boc_ipv6 = TRUE;  /* IPV6 set now */
         break;
       }
     } while (FALSE);
     adsl_tug1_w1 = adsl_tug1_w1->adsc_next;  /* get next in chain     */
   } while (adsl_tug1_w1);

   /* free memory of temporary structures                              */
   while (dsl_cs.adsc_tug1_ch) {            /* loop over chain         */
     adsl_tug1_w1 = dsl_cs.adsc_tug1_ch;    /* get chain of temporary UDP-gate */
     dsl_cs.adsc_tug1_ch = adsl_tug1_w1->adsc_next;  /* remove from chain */
     free( adsl_tug1_w1 );                  /* free memory             */
   }

   p_start_udp_gate_80:                     /* end of start UDP-gate   */

   /* SIP-local-ineta                                                  */
   if (awcl_sip_local_ineta) {              /* SIP-local-ineta defined */
     iml1 = m_build_bind_ineta( &adsp_loconf_1_fill->dsc_sip_l_ineta,
                                awcl_sip_local_ineta, -1, ied_chs_utf_16 );
     if (iml1) {                            /* error occured           */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01xxxW Error element general name \"SIP-local-ineta\" value \"%(ux)s\" no valid INETA error %d - ignored",
                       awcl_sip_local_ineta, iml1 );
     }
   }
   /* UDP-gw-ineta                                                     */
   while (adsl_sc_udp_gw_ineta) {           /* save configured item UDP gateway INETA */
     adsl_sc_w1 = adsl_sc_udp_gw_ineta;     /* get saved item          */
     adsl_sc_udp_gw_ineta = adsl_sc_udp_gw_ineta->adsc_next;  /* remove from chain */
     m_conf_udp_gw_ineta( adsl_sc_w1->adsc_node, adsp_loconf_1_fill );
     free( adsl_sc_w1 );                    /* free memory again       */
   }
   /* LDAP templates                                                   */
   adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_anchor;  /* get first element LDAP template */
   while (adsl_ldap_t_dummy_w1) {           /* loop over all LDAP services */
     m_conf_ldap_t( adsl_ldap_t_dummy_w1, adsl_ldap_t_dummy_anchor );
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
   }
   /* LDAP services                                                    */
   adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_anchor;  /* get first element LDAP service */
   while (adsl_ldap_s_dummy_w1) {           /* loop over all LDAP services */
     m_conf_ldap_s( adsl_ldap_s_dummy_w1->adsc_node_ldap_s_d, adsp_loconf_1_fill, adsl_ldap_t_dummy_anchor );
     adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_w1->adsc_next;  /* get next in chain */
   }
#ifdef B090829
   dsl_cs.adsc_krb5_kdc_1 = NULL;           /* chain of Kerberos 5 KDC */
#endif
   dsl_cs.adsc_ldap_group = adsp_loconf_1_fill->adsc_ldap_group;  /* chain of LDAP groups */
   /* radius-group                                                     */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_radius_group) {  /* radius-group */
       m_conf_radius_group( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   /* Kerberos-5-KDC                                                   */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_krb5_kdc) {  /* Kerberos-5-KDC */
       m_conf_krb5_kdc( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   /* HTTP-redirect-library-object                                     */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_http_redir_obj) {  /* HTTP-redirect-library-object */
       m_conf_hrl_obj( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   /* plain-HTTP-library-object                                        */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_plain_http_lib_obj) {  /* plain-HTTP-library-object */
       m_conf_phl_obj( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   /* authentication-library-object                                    */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_hob_wspat3_obj) {  /* authentication-library-object */
       m_conf_wspat_obj( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_l2tp_gw) {  /* L2TP gateway */
       m_conf_l2tp_gw( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   /* background-task                                                  */
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_bgt) {  /* background task */
       m_conf_bgt_1( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_rpi) {  /* raw-packet-interface */
       m_conf_raw_packet_if( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }


// p_buco_ocsps_00:                         /* OCSP-section            */
   if (adsl_node_ocsp == NULL) goto p_buco_csssl_00;
   adunode3 = adsl_node_ocsp->getFirstChild();
   if (adunode3 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01500W Error element name \"sslgate-configuration\" \"OCSP-section\" has no child - ignored" );
     goto p_buco_csssl_00;
   }

   p_buco_ocsps_20:                         /* process child of section */
   if (adunode3->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_ocsps_80;
   awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, "OCSP-responder" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01501W Error element OCSP-section is not OCSP-responder - \"%(ux)s\" - ignored",
                     awcu3_name );
     goto p_buco_ocsps_80;
   }
#else
   if (wcscmp( awcu3_name, L"OCSP-responder" )) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC012xxW Error element OCSP-section is not OCSP-responder - \"%(ux)s\" - ignored",
                 awcu3_name );
     goto p_buco_ocsps_80;
   }
#endif
   adunode4 = adunode3->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01502W Error element OCSP-section OCSP-responder has no child - ignored" );
     goto p_buco_ocsps_80;
   }
   awcl_ocsps_url = NULL;                   /* OCSP section URL        */
   /* search first for name of entry                                   */
   adunode_save1 = adunode4;                /* save node               */
   do {
     if (adunode4->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
       adunode5 = adunode4->getFirstChild();
       if (adunode5) {                      /* node is valid           */
         do {
           if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
             awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
             break;
           }
           adunode5 = adunode5->getNextSibling();
         } while (adunode5);
       }
       if (adunode5) {                      /* node found              */
#ifdef TRACEHL1
         m_hlnew_printf( HLOG_XYZ1, "OCSP-responder entry 1 %(ux)s / %(ux)s", awcu4_name, awcu4_value );
#endif
#ifndef OLD01
         bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, (char *) achrs_node_ocsps[ DEF_XML_OCSPS_URL ] );
         if ((bol1) && (inl1 == 0)) {       /* strings are equal       */
           awcl_ocsps_url = awcu4_value;    /* OCSP section URL        */
           break;
         }
#else
         if (!wcscmp( awcu4_name, awcrs_node_ocsps[ DEF_XML_OCSPS_URL ] )) {
           awcl_ocsps_url = awcu4_value;    /* OCSP section URL        */
           break;
         }
#endif
       }
     }
     adunode4 = adunode4->getNextSibling();
   } while (adunode4);
   achl_msg1_text = "node not identified";  /* for message             */
#ifndef HL_UNIX
   awcl_msg1_node = (HL_WCHAR *) L"";       /* for message             */
#else
   awcl_msg1_node = &wcs_empty;             /* for message             */
#endif
   if (awcl_ocsps_url == NULL) {            /* URL not found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01503W Error element OCSP-section OCSP-responder %s%(ux)s no <OCSP-URL> found - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_80;
   }
   achl_msg1_text = "node <OCSP-URL> : ";   /* for message             */
   awcl_msg1_node = awcl_ocsps_url;         /* for message             */
   adunode4 = adunode_save1;                /* restore node            */
   memset( borl_ocsps, 0, sizeof(borl_ocsps) );  /* for OCSP section   */
   memset( &dsl_ocspext_1_1, 0, sizeof(dsl_ocspext_1_1) );  /* OCSP structure extension */
   awcl_ocsps_ocsp_ineta = NULL;            /* OCSP section OCSP-ineta */
   achl_ocsp_ineta = NULL;                  /* OCSP ineta char         */

   p_buco_ocsps_40:                         /* process child of responder */
   if (adunode4->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_ocsps_60;
   awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
   adunode5 = adunode4->getFirstChild();
   if (adunode5 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01504W Error element OCSP-section OCSP-responder %s%(ux)s entry \"%(ux)s\" has no child - ignored",
                     achl_msg1_text, awcl_msg1_node, awcu4_name );
     goto p_buco_ocsps_60;                  /* get next list entry     */
   }
   do {
     if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
       break;
     }
     adunode5 = adunode5->getNextSibling();
   } while (adunode5);
   if (adunode5 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01505W Error element OCSP-section OCSP-responder %s%(ux)s entry \"%(ux)s\" no value found - ignored",
                     achl_msg1_text, awcl_msg1_node, awcu4_name );
     goto p_buco_ocsps_60;                  /* get next list entry     */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "OCSP-responder entry 2 %(ux)s / %(ux)s", awcu4_name, awcu4_value );
#endif
   inl1 = 0;
   do {
#ifndef OLD01
     bol1 = m_cmp_u16z_u8z( &inl2, awcu4_name, (char *) achrs_node_ocsps[ inl1 ] );
     if ((bol1) && (inl2 == 0)) {           /* strings are equal       */
       goto p_buco_ocsps_44;                /* value found in table    */
     }
#else
     if (!wcscmp( awcu4_name, awcrs_node_ocsps[ inl1 ] )) {
       goto p_buco_ocsps_44;                /* value found in table    */
     }
#endif
     inl1++;                                /* next entry              */
   } while (inl1 < (sizeof(achrs_node_ocsps) / sizeof(achrs_node_ocsps[0])));
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01506W Error element OCSP-section OCSP-responder %s%(ux)s invalid node found \"%(ux)s\" - ignored",
                   achl_msg1_text, awcl_msg1_node, awcu4_name );
   goto p_buco_ocsps_60;                    /* end of OCSP responder entry */

   p_buco_ocsps_44:                         /* entry found in table     */
   if (awcu4_value == awcl_ocsps_url) {     /* OCSP section URL        */
     goto p_buco_ocsps_52;                  /* set for double          */
   }
   if (borl_ocsps[ inl1 ]) {                /* this entry double       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01507W Error element OCSP-section OCSP-responder %s%(ux)s name \"%(ux)s\" defined double - ignored",
                     achl_msg1_text, awcl_msg1_node, awcu4_name );
     goto p_buco_ocsps_60;                  /* end of OCSP responder entry */
   }
   if (inl1 == DEF_XML_OCSPS_OCSP_INETA) {
#ifdef B060517
     achl1 = (char *) &dsl_ocspext_1_1.unc_target;
     goto p_buco_ocsps_48;                  /* get internet address     */
#endif
#ifdef B070917
     achl1 = XMLString::transcode( (XMLCh *) awcu4_value );
     dsl_ocspext_1_1.adsc_server_ineta = m_get_ineta_multi( achl1 );
     XMLString::release( &achl1 );          /* free INETA again        */
     if (dsl_ocspext_1_1.adsc_server_ineta == NULL) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01508W Error element OCSP-section OCSP-responder %s%(ux)s OCSP-ineta value \"%(ux)s\" not valid - ignored",
                       achl_msg1_text, awcl_msg1_node, awcu4_value );
       goto p_buco_ocsps_60;                /* end of OCSP responder entry */
     }
#endif
     awcl_ocsps_ocsp_ineta = awcu4_value;   /* OCSP section OCSP-ineta */
     goto p_buco_ocsps_52;                  /* entry processed         */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "OCSP-responder entry 3 %(ux)s / %(ux)s", awcu4_name, awcu4_value );
#endif
   if (inl1 >= DEF_XML_OCSPS_NUMERIC_V) {
     inl2 = m_get_port_no( awcu4_value, -1, ied_chs_utf_16 );
     if (inl2 < 0) {                        /* port not valid          */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01509W Error element OCSP-section OCSP-responder %s%(ux)s numeric value \"%(ux)s\" invalid \"%(ux)s\" - ignored",
                       achl_msg1_text, awcl_msg1_node, awcu4_name, awcu4_value );
       goto p_buco_ocsps_60;                /* ignore value            */
     }
     inrl_ocsps_numeric_v[ inl1 - DEF_XML_OCSPS_NUMERIC_V ] = inl2;
     goto p_buco_ocsps_52;                  /* all set                 */
   }
   iml2 = m_build_bind_ineta( &dsl_ocspext_1_1.dsc_bind_multih, awcu4_value, -1, ied_chs_utf_16 );
   if (iml2) {                              /* error occured           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01510W Error element OCSP-section OCSP-responder %s%(ux)s gate-ineta \"%(ux)s\" invalid INETA error %d - ignored",
                     achl_msg1_text, awcl_msg1_node, awcu4_value, iml2 );
     goto p_buco_ocsps_60;                  /* ignore value            */
   }

   p_buco_ocsps_52:                         /* entry processed         */
   borl_ocsps[ inl1 ] = TRUE;               /* set for check if double */

   p_buco_ocsps_60:                         /* end of OCSP responder entry */
   adunode4 = adunode4->getNextSibling();
   if (adunode4) goto p_buco_ocsps_40;      /* process child of responder */

   /* all values read                                                  */
   if ((borl_ocsps[ DEF_XML_OCSPS_OCSP_INETA ]) && (borl_ocsps[ DEF_XML_OCSPS_OCSP_PORT ])) {
     goto p_buco_ocsps_72;                  /* all values set          */
   }
   if ((borl_ocsps[ DEF_XML_OCSPS_OCSP_INETA ] == FALSE) && (borl_ocsps[ DEF_XML_OCSPS_OCSP_PORT ])) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01512W Error element OCSP-section OCSP-responder %s%(ux)s <OCSP-port> set but no valid <OCSP-ineta> found - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
   if ((borl_ocsps[ DEF_XML_OCSPS_OCSP_INETA ]) && (borl_ocsps[ DEF_XML_OCSPS_OCSP_PORT ] == FALSE)) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01513W Error element OCSP-section OCSP-responder %s%(ux)s <OCSP-ineta> set but no valid <OCSP-port> found - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
#ifndef HL_UNIX
   awcl1 = (HL_WCHAR *) L"HTTPS";
#else
   awcl1 = wcrs_const_https;                /* Unicode HTTPS           */
#endif
   inl1 = 5;
   inl2 = 0;
   do {
     wcl1 = *(awcl_ocsps_url + inl2);
     if ((wcl1 >= 'a') && (wcl1 <= 'z')) wcl1 -= 0X0020;
     if (wcl1 != *(awcl1 + inl2)) break;
     inl2++;
   } while (inl2 < inl1);
   if (inl2 < 4) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01514W Error element OCSP-section OCSP-responder %s%(ux)s URL contains no valid service (HTTP/S) - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
   inl3 = HL_WCSLEN( awcl_ocsps_url );
#ifndef HL_UNIX
   if (   ((inl2 + 3) > inl3)
       || (memcmp( awcl_ocsps_url + inl2, L"://", sizeof(HL_WCHAR) * 3 ))) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01515W Error element OCSP-section OCSP-responder %s%(ux)s URL after service :// missing - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
#else
   if (   ((inl2 + 3) > inl3)
       || (memcmp( awcl_ocsps_url + inl2, &wcrs_const_sep_1, sizeof(wcrs_const_sep_1) ))) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01515W Error element OCSP-section OCSP-responder %s%(ux)s URL after service :// missing - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
#endif
   inl4 = inl2 + 3;                         /* start ineta here        */
   inl1 = inl4;                             /* scan from here          */
   inl5 = 0;                                /* no colon found          */
   while (inl1 < inl3) {
     if (*(awcl_ocsps_url + inl1) == L'/') break;
     if (*(awcl_ocsps_url + inl1) == L':') inl5 = inl1;
     inl1++;                                /* next character          */
   }
#define DSL_PORT inrl_ocsps_numeric_v[ DEF_XML_OCSPS_OCSP_PORT - DEF_XML_OCSPS_NUMERIC_V ]
   if (inl5) {                              /* with port               */
     inl6 = inl5 + 1;                       /* here first digit        */
     if (inl6 >= inl1) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01516W Error element OCSP-section OCSP-responder %s%(ux)s URL after colon no port - ignored",
                       achl_msg1_text, awcl_msg1_node );
       goto p_buco_ocsps_76;                /* entry not valid         */
     }
     DSL_PORT = 0;                          /* clear port              */
     do {
       if (   (*(awcl_ocsps_url + inl6) < L'0')
           || (*(awcl_ocsps_url + inl6) > L'9')) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01517W Error element OCSP-section OCSP-responder %s%(ux)s URL port contains character not digit \"%C\" - ignored",
                     achl_msg1_text, awcl_msg1_node, *(awcl_ocsps_url + inl6) );
         goto p_buco_ocsps_76;              /* entry not valid         */
       }
       DSL_PORT *= 10;
       DSL_PORT += *(awcl_ocsps_url + inl6) - L'0';
       inl6++;
     } while (inl6 < inl1);
   } else {
     DSL_PORT = 80;                         /* set HTTP default        */
     if (inl2 == 5) {
       DSL_PORT = 443;                      /* set HTTPS default       */
     }
     inl5 = inl1;                           /* set end ineta           */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 OCSP-URL port=%d", DSL_PORT );
#endif
#undef DSL_PORT
   /* generate ineta                                                   */
   inl4 = inl2 + 3;                         /* start ineta here        */
   if (inl4 >= inl5) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01518W Error element OCSP-section OCSP-responder %s%(ux)s URL contains no characters for ineta - ignored",
                     achl_msg1_text, awcl_msg1_node );
     goto p_buco_ocsps_76;                  /* entry not valid         */
   }
   achl_ocsp_ineta = (char *) malloc( inl5 - inl4 + 1 );
   achl1 = achl_ocsp_ineta;
   do {
     if (*(awcl_ocsps_url + inl4) < 0X0100) {
       *achl1 = (char) *(awcl_ocsps_url + inl4);
     } else {
       *achl1 = '?';
     }
     inl4++;
     achl1++;
   } while (inl4 < inl5);
   *achl1 = 0;                              /* make zero-terminated    */

   p_buco_ocsps_72:                         /* all values set          */
   /* OCSP-responder is valid - generate entry in linked list          */
   if (borl_ocsps[ DEF_XML_OCSPS_TIMEOUT ]) {  /* timeout receive      */
     dsl_ocspext_1_1.inc_timeout = inrl_ocsps_numeric_v[ DEF_XML_OCSPS_TIMEOUT - DEF_XML_OCSPS_NUMERIC_V ];
   }
   if (borl_ocsps[ DEF_XML_OCSPS_WAIT_RETRY ]) {  /* after error wait sec */
     dsl_ocspext_1_1.inc_wait_retry = inrl_ocsps_numeric_v[ DEF_XML_OCSPS_WAIT_RETRY - DEF_XML_OCSPS_NUMERIC_V ];
   }
#ifdef B060517
   ((struct sockaddr_in *) &dsl_ocspext_1_1.unc_target.dsc_soad1)->sin_family = AF_INET;
   /* set port                                                         */
#ifdef NOTYET050816
   ((struct sockaddr_in *) &dsl_ocspext_1_1.unc_target.dsc_soad1)->sin_port
     = IP_htons( inrl_ocsps_numeric_v[ DEF_XML_OCSPS_OCSP_PORT - DEF_XML_OCSPS_NUMERIC_V ] );
#endif
#endif
   dsl_ocspext_1_1.imc_port = inrl_ocsps_numeric_v[ DEF_XML_OCSPS_OCSP_PORT - DEF_XML_OCSPS_NUMERIC_V ];
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 OCSP-URL set port=%d", dsl_ocspext_1_1.imc_port );
#endif
   achl1 = NULL;                            /* no ineta                */
#ifdef B120813
   if (awcl_ocsps_ocsp_ineta == NULL) {     /* no explicit ineta       */
     bol1 = TRUE;                           /* is still valid          */
#ifdef B070917
       dsl_ocspext_1_1.adsc_server_ineta = m_get_ineta_multi( achl_ocsp_ineta );
#endif
       if (dsl_ocspext_1_1.adsc_server_ineta == NULL) {
         bol1 = FALSE;                      /* set not valid           */
       }
     if (bol1 == FALSE) {                   /* ineta not valid         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01519W Error element OCSP-section OCSP-responder %s%(ux)s <OCSP-URL> contains no valid ineta %s - ignored",
                       achl_msg1_text, awcl_msg1_node, achl_ocsp_ineta );
       goto p_buco_ocsps_76;                /* entry not valid         */
     }
     achl1 = achl_ocsp_ineta;
   } else {
     achl1 = XMLString::transcode( (XMLCh *) awcl_ocsps_ocsp_ineta );
   }
   inl1 = strlen( achl1 ) + 1;              /* length ineta            */
   achl2 = XMLString::transcode( (XMLCh *) awcl_ocsps_url );
   inl2 = strlen( achl2 ) + 1;
   adsl_hl_ocsp_d_1 = (struct dsd_hl_ocsp_d_1 *) malloc( sizeof(struct dsd_hl_ocsp_d_1)
                                                         + sizeof(struct dsd_ocspext_1)
                                                         + inl1 + inl2 );
#endif
   if (awcl_ocsps_ocsp_ineta == NULL) {     /* no explicit ineta       */
     dsl_ocspext_1_1.adsc_server_ineta = m_get_target_ineta( achl_ocsp_ineta, -1, D_CHARSET_IP,
                                                             &dsl_ocspext_1_1.dsc_bind_multih );
     if (dsl_ocspext_1_1.adsc_server_ineta == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01519W Error element OCSP-section OCSP-responder %s%(ux)s <OCSP-URL> contains no valid ineta %s - ignored",
                       achl_msg1_text, awcl_msg1_node, achl_ocsp_ineta );
       goto p_buco_ocsps_76;                /* entry not valid         */
     }
   } else {                                 /* with explicit ineta     */
     dsl_ocspext_1_1.adsc_server_ineta = m_get_target_ineta( awcl_ocsps_ocsp_ineta, -1, ied_chs_utf_16,
                                                             &dsl_ocspext_1_1.dsc_bind_multih );
     if (dsl_ocspext_1_1.adsc_server_ineta == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01520W Error element OCSP-section OCSP-responder %s%(ux)s OCSP-ineta value \"%(ux)s\" not valid - ignored",
                       achl_msg1_text, awcl_msg1_node, awcl_ocsps_ocsp_ineta );
       goto p_buco_ocsps_76;                /* entry not valid         */
     }
   }
   achl2 = XMLString::transcode( (XMLCh *) awcl_ocsps_url );
   inl2 = strlen( achl2 ) + 1;
   adsl_hl_ocsp_d_1 = (struct dsd_hl_ocsp_d_1 *) malloc( sizeof(struct dsd_hl_ocsp_d_1)
                                                         + sizeof(struct dsd_ocspext_1)
                                                         + dsl_ocspext_1_1.adsc_server_ineta->imc_len_mem
                                                         + inl2 );
   adsl_hl_ocsp_d_1->achc_url = (char *) adsl_hl_ocsp_d_1
                                         + sizeof(struct dsd_hl_ocsp_d_1)
                                         + sizeof(struct dsd_ocspext_1)
                                         + dsl_ocspext_1_1.adsc_server_ineta->imc_len_mem;
   adsl_hl_ocsp_d_1->inc_url_len = inl2 - 1;  /* length URL            */
#ifdef B120813
   dsl_ocspext_1_1.achc_ineta = (char *) adsl_hl_ocsp_d_1
                                + sizeof(struct dsd_hl_ocsp_d_1)
                                + inl1;
   dsl_ocspext_1_1.inc_len_ineta = inl2;
#endif
   memcpy( (char *) adsl_hl_ocsp_d_1
                    + sizeof(struct dsd_hl_ocsp_d_1),
           &dsl_ocspext_1_1,
           sizeof(struct dsd_ocspext_1) );
   /* copy INETA                                                       */
#define ADSL_OCSPEXT_1_G ((struct dsd_ocspext_1 *) ((char *) adsl_hl_ocsp_d_1 + sizeof(struct dsd_hl_ocsp_d_1)))
   ADSL_OCSPEXT_1_G->adsc_server_ineta = (struct dsd_target_ineta_1 *) (ADSL_OCSPEXT_1_G + 1);
   memcpy( ADSL_OCSPEXT_1_G->adsc_server_ineta,
           dsl_ocspext_1_1.adsc_server_ineta,
           dsl_ocspext_1_1.adsc_server_ineta->imc_len_mem );
#undef ADSL_OCSPEXT_1_G
   /* copy URL                                                         */
   memcpy( (char *) adsl_hl_ocsp_d_1
                    + sizeof(struct dsd_hl_ocsp_d_1)
                    + sizeof(struct dsd_ocspext_1)
                    + dsl_ocspext_1_1.adsc_server_ineta->imc_len_mem,
           achl2,
           inl2 );
   free( dsl_ocspext_1_1.adsc_server_ineta );  /* free source INETA    */
   XMLString::release( &achl2 );            /* free URL again          */
   /* get old chain                                                    */
   adsl_hl_ocsp_d_1->adsc_next = adsp_loconf_1_fill->adsc_hl_ocsp_d_1;
   /* set new chain                                                    */
   adsp_loconf_1_fill->adsc_hl_ocsp_d_1 = adsl_hl_ocsp_d_1;

   p_buco_ocsps_76:                         /* clean up                */
   if (achl_ocsp_ineta) free( achl_ocsp_ineta );

   p_buco_ocsps_80:                         /* end of OCSP section entry */
   adunode3 = adunode3->getNextSibling();
   if (adunode3) goto p_buco_ocsps_20;      /* process child of section */

   p_buco_csssl_00:                         /* client-side-SSL         */
   if (adsl_node_csssl == NULL) goto p_buco_others;
   adunode3 = adsl_node_csssl->getFirstChild();
   if (adunode3 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01600W Error element name \"sslgate-configuration\" \"client-side-SSL\" has no child - ignored" );
     goto p_buco_others;
   }
#ifdef OLD01
/* UUUU 09.01.05 KB - add parameters */
   memset( borl_csssl, 0, sizeof(borl_csssl) );
#endif
   memset( &dsl_cs_ssl_cp, 0, sizeof(dsl_cs_ssl_cp) );
   adsp_loconf_1_fill->boc_csssl_usage_dn = FALSE;  /* clear Client Side SSL check DN */
   bol2 = FALSE;                            /* usage-DN not yet set    */

   p_buco_csssl_20:                         /* read node Client-Side-SSL */
   if (adunode3->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_csssl_80;
   awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
   iml1 = sizeof(achrs_node_cs_ssl_kw) / sizeof(achrs_node_cs_ssl_kw[0]);
   do {
     bol1 = m_cmp_u16z_u8z( &iml2, awcu3_name, (char *) achrs_node_cs_ssl_kw[ iml1 - 1 ] );
     if ((bol1) && (iml2 == 0)) break;      /* strings are equal       */
     iml1--;                                /* decrement index         */
   } while (iml1 > 0);
   if (iml1 == 0) {                         /* parameter not found     */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01601W Error element name \"sslgate-configuration\" \"client-side-SSL\"\
 has invalid child \"%(ux)s\" - ignored", awcu3_name );
     goto p_buco_csssl_80;                  /* end node Client-Side-SSL */
   }
   adunode4 = adunode3->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01602W Error element \"client-side-SSL\" - \"%(ux)s\" has no child - ignored",
                     awcu3_name );
     goto p_buco_csssl_80;                  /* end node Client-Side-SSL */
   }
   do {
     if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
       awcu3_value = (HL_WCHAR *) adunode4->getNodeValue();
       break;
     }
     adunode4 = adunode4->getNextSibling();
   } while (adunode4);
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01603W Error element \"client-side-SSL\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcu3_name );
     goto p_buco_csssl_80;                  /* end node Client-Side-SSL */
   }
   switch (iml1) {                          /* depend on key-word found */
     case DEF_XML_CS_SSL_CONFFI:
       if (dsl_cs_ssl_cp.achc_fconfig) {    /* parameter double        */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01604W Error client-side-SSL SSL-config-file already defined - \"%(ux)s\" ignored",
                         awcu3_value );
         break;
       }
       bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                            &dsl_cs_ssl_cp.achc_fconfig,
                                            &dsl_cs_ssl_cp.unc_len_fconfig,
                                            &dwl_error );
       if (bol_rc == FALSE) {               /* no file loaded          */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01605W Error client-side-SSL SSL-config-file \"%(ux)s\" read Error %d - ignored",
                         awcu3_value, dwl_error );
       }
       break;
     case DEF_XML_CS_SSL_CEDBFI:
       if (dsl_cs_ssl_cp.achc_fcertdb) {    /* parameter double        */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01606W Error client-side-SSL SSL-certdb-file already defined - \"%(ux)s\" ignored",
                         awcu3_value );
         break;
       }
       bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                            &dsl_cs_ssl_cp.achc_fcertdb,
                                            &dsl_cs_ssl_cp.unc_len_fcertdb,
                                            &dwl_error );
       if (bol_rc == FALSE) {               /* no file loaded          */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01607W Error client-side-SSL SSL-certdb-file \"%(ux)s\" read Error %d - ignored",
                         awcu3_value, dwl_error );
       }
       break;
     case DEF_XML_CS_SSL_PAWOFI:
       if (dsl_cs_ssl_cp.achc_password) {   /* parameter double        */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01608W Error client-side-SSL SSL-password-file already defined - \"%(ux)s\" ignored",
                         awcu3_value );
         break;
       }
       bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                            &dsl_cs_ssl_cp.achc_password,
                                            &dsl_cs_ssl_cp.unc_len_password,
                                            &dwl_error );
       if (bol_rc == FALSE) {               /* no file loaded          */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01609W Error client-side-SSL SSL-password-file \"%(ux)s\" read Error %d - ignored",
                         awcu3_value, dwl_error );
       }
       break;
     case DEF_XML_CS_SSL_U_DN:              /* <usage-DN>              */
       if (bol2) {                          /* usage-DN already set    */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01608W Error client-side-SSL usage-DN already defined - \"%(ux)s\" ignored",
                         awcu3_value );
         break;
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcu3_value, "CHECK-URL" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         adsp_loconf_1_fill->boc_csssl_usage_dn = TRUE;  /* Client Side SSL check DN */
         bol2 = TRUE;                       /* usage-DN set now        */
         break;
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcu3_value, "NOTHING" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         bol2 = TRUE;                       /* usage-DN set now        */
         break;
       }
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01083W Error element general name \"%(ux)s\" value neither NOTHING nor CHECK-URL - \"%(ux)s\" - ignored",
                       awcu3_name, awcu3_value );
       break;
   }

   p_buco_csssl_80:                         /* end node Client-Side-SSL */
   adunode3 = adunode3->getNextSibling();
   if (adunode3) goto p_buco_csssl_20;      /* process child of section */

   do {                                     /* pseudo-loop             */
     if (dsl_cs_ssl_cp.achc_fconfig == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01610W Error element client-side-SSL SSL-config-file missing - no client-side SSL active" );
       break;
     }
     if (dsl_cs_ssl_cp.achc_fcertdb == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01611W Error element client-side-SSL SSL-certdb-file missing - no client-side SSL active" );
       break;
     }
     if (dsl_cs_ssl_cp.achc_password == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01612W Error element client-side-SSL SSL-password-file missing - no client-side SSL active" );
       break;
     }
#ifdef CSSSL_060620
     bol1 = FALSE;                          /* no external random generator */
#ifdef HL_UNIX
     if (adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name) {  /* external Random Generator */
       bol1 = TRUE;                         /* use external random generator */
     }
#endif
     iml1 = m_cl_registerconfig( dsl_cs_ssl_cp.achc_fconfig, dsl_cs_ssl_cp.unc_len_fconfig,
                                 dsl_cs_ssl_cp.achc_fcertdb, dsl_cs_ssl_cp.unc_len_fcertdb,
                                 dsl_cs_ssl_cp.achc_password, dsl_cs_ssl_cp.unc_len_password,
                                 TRUE,
                                 adsp_loconf_1_fill->adsc_hl_ocsp_d_1,  /* OCSP */
                                 &m_cdaux,  /* subroutine              */
                                 NULL,      /* vpp_userfld             */
                                 &adsp_loconf_1_fill->vpc_csssl_config_id,  /* address config id */
                                 bol1 );
#endif
#ifdef TRACEHL1
     m_hlnew_printf( HLOG_TRACE1, "l%05d m_build_conf_01 check returned SSL / ireturn = %d",
                     __LINE__, iml1 );
#endif
     if (iml1) {
       bol1 = m_rerrm1( iml1, &achl1, &iml2, chrg_ssl_error );
       if (bol1 == FALSE) {                 /* subroutine failed       */
         achl1 = "error-message not available";
         iml2 = strlen( achl1 );
       }
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01620W Error client-side-SSL SSL Error %d %.*s - no client-side SSL active",
                       iml1, iml2, achl1 );
       break;
     }
     adsp_loconf_1_fill->boc_csssl_conf = TRUE;  /* Client Side SSL configured */
   } while (FALSE);

   if (dsl_cs_ssl_cp.achc_fconfig) {        /* check file-content      */
#ifndef B130121
     memset( dsl_cs_ssl_cp.achc_fconfig, 0, dsl_cs_ssl_cp.unc_len_fconfig );
#endif
     free( dsl_cs_ssl_cp.achc_fconfig );    /* free memory again       */
   }
   if (dsl_cs_ssl_cp.achc_fcertdb) {        /* check file-content      */
#ifndef B130121
     memset( dsl_cs_ssl_cp.achc_fcertdb, 0, dsl_cs_ssl_cp.unc_len_fcertdb );
#endif
     free( dsl_cs_ssl_cp.achc_fcertdb );    /* free memory again       */
   }
   if (dsl_cs_ssl_cp.achc_password) {       /* check file-content      */
#ifndef B130121
     memset( dsl_cs_ssl_cp.achc_password, 0, dsl_cs_ssl_cp.unc_len_password );
#endif
     free( dsl_cs_ssl_cp.achc_password );   /* free memory again       */
   }

   p_buco_others:                           /* process other entries   */
   if (adsl_node_cluster) {                 /* cluster defined         */
     m_conf_cluster( adsl_node_cluster, adsp_loconf_1_fill );
   }
   adsl_service_dummy_w1 = adsl_service_dummy_anchor;  /* get first element service */
   while (adsl_service_dummy_w1) {          /* loop over all services  */
     m_conf_service( adsl_service_dummy_w1->adsc_node_service_d, adsp_loconf_1_fill );
     adsl_service_dummy_w1 = adsl_service_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adsl_sc_w1->iec_saveconf == ied_saveconf_sdh_obj) {  /* SDH object */
       m_conf_sdh_obj( adsl_sc_w1->adsc_node, &dsl_cs );
     }
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }

   /* get entries of server-list                                       */
   p_buco_seli_00:                          /* server-list             */
   adunode2 = adunode1->getFirstChild();
   if (adunode2 == NULL) {
     m_hlnew_printf( HLOG_EMER1, "HWSPXMLC01800W Error element name \"sslgate-configuration\" has no child - logic error" );
     return FALSE;
   }
   dsl_cs.achc_msgtext_1 = (char *) chrs_msgtxt_sl;  /* message text 1 */
   dsl_cs.achc_msgtext_2 = (char *) chrs_msgtxt_se;  /* message text 2 */

   p_buco_seli_04:                          /* next child of sslgate-c */
   if (adunode2 == adunode_general) goto p_buco_seli_80;
#ifdef B080324
   if (adunode2 == adunode_blade_control) goto p_buco_seli_80;
#endif
   if (adunode2 == adsl_node_ocsp) goto p_buco_seli_80;
   if (adunode2 == adsl_node_csssl) goto p_buco_seli_80;
   if (adunode2 == adsl_node_confp) goto p_buco_seli_80;
#ifdef OLD_1112
   adsl_raent_1 = dsl_cs.adsc_raent_anchor;  /* get chain of already def */
   while (adsl_raent_1) {                   /* loop over total chain   */
     if (adunode2 == adsl_raent_1->adsc_radius_node) goto p_buco_seli_80;
     adsl_raent_1 = adsl_raent_1->adsc_next;  /* get next in chain     */
   }
#endif
   adsl_targfi_dummy_w1 = adsl_targfi_dummy_anchor;  /* get anchor chain target-filter */
   while (adsl_targfi_dummy_w1) {           /* loop over all target-filter */
     if (adunode2 == adsl_targfi_dummy_w1->adsc_node_targfi_d) goto p_buco_seli_80;
     adsl_targfi_dummy_w1 = adsl_targfi_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_usgro_w1 = dsl_cs.adsc_usgro_anchor;  /* get chain of already def */
   while (adsl_usgro_w1) {                   /* loop over total chain   */
     if (adunode2 == adsl_usgro_w1->adsc_usgro_node) goto p_buco_seli_80;
     adsl_usgro_w1 = adsl_usgro_w1->adsc_next;  /* get next in chain     */
   }
   adsl_server_list_1_w1 = dsl_cs.adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_server_list_1_w1) {           /* loop over total chain   */
     if (adunode2 == adsl_server_list_1_w1->adsc_seli_node) goto p_buco_seli_80;
     adsl_server_list_1_w1 = adsl_server_list_1_w1->adsc_next;  /* get next in chain */
   }
   if (adunode2 == adsl_node_cluster) goto p_buco_seli_80;  /* cluster defined */
   adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_anchor;  /* get first element LDAP template */
   while (adsl_ldap_t_dummy_w1) {           /* loop over all LDAP templates */
     if (adunode2 == adsl_ldap_t_dummy_w1->adsc_node_ldap_t_d) goto p_buco_seli_80;  /* LDAP template defined */
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_anchor;  /* get first element LDAP service */
   while (adsl_ldap_s_dummy_w1) {           /* loop over all LDAP services */
     if (adunode2 == adsl_ldap_s_dummy_w1->adsc_node_ldap_s_d) goto p_buco_seli_80;  /* LDAP service defined */
     adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_service_dummy_w1 = adsl_service_dummy_anchor;  /* get first element service */
   while (adsl_service_dummy_w1) {          /* loop over all services  */
     if (adunode2 == adsl_service_dummy_w1->adsc_node_service_d) goto p_buco_seli_80;  /* service defined */
     adsl_service_dummy_w1 = adsl_service_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adunode2 == adsl_sc_w1->adsc_node) goto p_buco_seli_80;  /* node defined */
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   if (adunode2->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_seli_80;
   awcu2 = (HL_WCHAR *) adunode2->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01 l%05d server-list found section %(ux)s",
                   __LINE__, awcu2 );
#endif
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu2, "server-list" );
   if ((bol1 == FALSE) || (inl1)) goto p_buco_seli_80;  /* strings not equal */
#else
   if (wcscmp( awcu2, L"server-list" )) {
     goto p_buco_seli_80;
   }
#endif
   /* process sslgate-c server-list                                    */
   /* structure in stack                                               */
   memset( &dsl_server_list_1_c, 0, sizeof(struct dsd_server_list_1) );
   adunode3 = adunode2->getFirstChild();
   if (adunode3 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01801W Error server-list element has no child - ignored" );
     goto p_buco_seli_68;
   }
   /* search name                                                      */
   adunode_save1 = adunode3;                /* save node               */
   adunode_name = NULL;
   awcu_name_value = NULL;
   while (adunode3) {
     if (adunode3->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, "name" );
       if ((bol1) && (inl1 == 0)) {         /* strings are equal       */
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01802W Error element server-list name double - ignored" );
           goto p_buco_seli_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01803W Error element server-list name \"%(ux)s\" has no child - ignored",
                       awcu3_name );
           goto p_buco_seli_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#else
       if (!wcscmp( awcu3_name, L"name" )) {
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC012xxW Error element server-list name double - ignored" );
           goto p_buco_seli_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC012xxW Error element server-list name \"%(ux)s\" has no child - ignored",
                       awcu3_name );
           goto p_buco_seli_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#endif
     }
//   if (adunode_name) break;
     adunode3 = adunode3->getNextSibling();
   }
   if (awcu_name_value == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01804W Error element server-list no name value found - ignored" );
     goto p_buco_seli_68;
   }
   adsl_server_list_1_w1 = dsl_cs.adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_server_list_1_w1) {          /* loop over total chain   */
     if (adsl_server_list_1_w1->inc_len_name) {  /* length of name bytes */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_server_list_1_w1 + 1), awcu_name_value )) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01805W Error element server-list name \"%(ux)s\" defined double - ignored",
                         awcu_name_value );
         goto p_buco_seli_68;
       }
     }
     adsl_server_list_1_w1 = adsl_server_list_1_w1->adsc_next;  /* get next in chain */
   }
#ifdef B130405
   bol_http = FALSE;                        /* server-entry HTTP def   */
#endif
   iml_def_prot = 0;                        /* set defined protocols   */
   dsl_cs.awcc_msgtext_1 = awcu_name_value;  /* set name of server-list */
   dsl_cs.adsc_node_conf = adunode_save1;   /* restore node            */

   p_buco_seli_20:                          /* child of server-list    */
   if (dsl_cs.adsc_node_conf == adunode_name) goto p_buco_seli_60;
   if (dsl_cs.adsc_node_conf->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_seli_60;
   awcu3_name = (HL_WCHAR *) dsl_cs.adsc_node_conf->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, "server-entry" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01806W Error server-list \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_seli_60;
   }
#else
   if (wcscmp( awcu3_name, L"server-entry" )) {  /* compare constant   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01206-xxW Error server-list \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_seli_60;
   }
#endif
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 server-list found server-entry" );
#endif
   bol1 = m_conf_conn( &dsl_cs );
   if (bol1 == FALSE) goto p_buco_seli_52;  /* clean up resources      */
   if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_undef) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01810W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol not defined - ignored",
                     awcu_name_value, dsl_cs.awcc_name_value );
     goto p_buco_seli_52;                   /* clean up resources      */
   }
#ifdef DEBUG_120118_01                      /* insure++ lost block     */
   if (   (dsl_cs.dsc_server_conf_1_c.inc_no_sdh < 0)  /* check number Server-Data-Hook */
       || (dsl_cs.dsc_server_conf_1_c.inc_no_sdh > 8)) {  /* check number Server-Data-Hook */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d l%05d logic error Server-Data-Hook-no DEBUG_120118_01",
                     MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ), __LINE__ );
   }
#endif
   /* check if double                                                  */
   adsl_server_conf_1_w1 = dsl_server_list_1_c.adsc_server_conf_1;  /* get anchor */
#ifdef OLD_1112
   while (adsl_server_conf_1_w1) {           /* loop over chain         */
     if (!HL_WCSCMP( (HL_WCHAR *) ((char *) (adsl_server_conf_1_w1 + 1)
                                    + adsl_server_conf_1_w1->inc_no_sdh
                                      * sizeof(struct dsd_sdh_work_1)),
                     awcu_name_value )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01811W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" defined double - ignored",
                       awcu_name_value, dsl_cs.awcc_name_value );
       goto p_buco_seli_52;                 /* clean up resources      */
     }
     adsl_server_conf_1_w1 = adsl_server_conf_1_w1->adsc_next;  /* get next in chain */
   }
#endif
#ifndef OLD_1112
   while (adsl_server_conf_1_w1) {           /* loop over chain         */
     if (!HL_WCSCMP( adsl_server_conf_1_w1->awcc_name,  /* address of name */
                     awcu_name_value )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01811W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" defined double - ignored",
                       awcu_name_value, dsl_cs.awcc_name_value );
       goto p_buco_seli_52;                 /* clean up resources      */
     }
     adsl_server_conf_1_w1 = adsl_server_conf_1_w1->adsc_next;  /* get next in chain */
   }
#endif
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "--- server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol %d defined",
                   awcu_name_value, dsl_cs.awcc_name_value, dsl_cs.dsc_server_conf_1_c.iec_scp_def );
#endif
   if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_http) {
#ifdef B130405
     if (bol_http) {                        /* HTTP already defined    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01812W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol HTTP already set, not reachable",
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     bol_http = TRUE;                       /* server-entry HTTP def   */
#endif
     if (iml_def_prot & 1) {                /* set defined protocols   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01812W line=%d col=%d Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol HTTP already set, not reachable",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     iml_def_prot |= 1;                     /* set defined protocols   */
   } else if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_sstp) {  /* protocol SSTP */
     if (iml_def_prot & 2) {                /* set defined protocols   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol SSTP already set, not reachable",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     iml_def_prot |= 2;                     /* set defined protocols   */
   } else if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_ms_rpc) {  /* protocol MS-RPC */
     if (iml_def_prot & 4) {                /* set defined protocols   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol MS-RPC already set, not reachable",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     iml_def_prot |= 4;                     /* set defined protocols   */
   } else if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d) {  /* protocol MS RDG_OUT_DATA */
     if (iml_def_prot & 8) {                /* set defined protocols   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol RDG-OUT already set, not reachable",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     iml_def_prot |= 8;                     /* set defined protocols   */
   } else if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_in_d) {  /* protocol MS RDG_IN_DATA */
     if (iml_def_prot & 0X10) {             /* set defined protocols   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol RDG-IN already set, not reachable",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       awcu_name_value, dsl_cs.awcc_name_value );
     }
     iml_def_prot |= 0X10;                  /* set defined protocols   */
   }
#ifdef IS_NOT_NECESSARY
   if (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_undef) {  /* protocol undefined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01813W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" protocol not defined, not reachable",
                     awcu_name_value, dsl_cs.awcc_name_value );
   }
#endif
#ifdef B080324
   if (dsl_cs.dsc_gate.ifunction == DEF_FUNC_BLADE) {  /* check function */
     dsl_cs.dsc_server_conf_1_c.boc_is_blade_server = TRUE;  /* function BLADEGATE */
     bol_blacont_used = TRUE;               /* BLADE Control used      */
   }
#endif
   if (dsl_cs.dsc_gate.ifunction == DEF_FUNC_VDI_WSP) {  /* compare if VDI-WSP-GATE */
     dsl_cs.dsc_server_conf_1_c.boc_is_blade_server = TRUE;  /* function VDI-WSP-GATE */
   }
   if (dsl_cs.adsc_sdhlib_chain) {          /* with Server-Data-Hook   */
     dsl_cs.dsc_server_conf_1_c.inc_no_sdh = m_conf_sdh_load( &dsl_cs, DEF_CLIB1_CONF_SERVLI );  /* call subroutine */
     if (   (dsl_cs.dsc_server_conf_1_c.boc_sdh_reflect)  /* only Server-Data-Hook */
         && (dsl_cs.dsc_server_conf_1_c.inc_no_sdh == 0)) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01814W Error server-list \"%(ux)s\" server-entry \"%(ux)s\" no valid Server-Data-Hook found - ignored",
                       awcu_name_value, dsl_cs.awcc_name_value );
       goto p_buco_seli_52;                 /* clean up resources      */
     }
   }
   dsl_cs.dsc_server_conf_1_c.inc_len_name = (HL_WCSLEN( dsl_cs.awcc_name_value ) + 1) * sizeof(HL_WCHAR);
   inl1 = dsl_cs.dsc_server_conf_1_c.inc_no_sdh * sizeof(struct dsd_sdh_work_1);
#ifdef B130405
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
     inl1 += sizeof(struct dsd_sdh_work_1);
   }
#endif
   adsl_ext_lib1_acsdh = NULL;              /* automatic configured Server-Data-Hook */
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
     adsl_ext_lib1_acsdh = &dss_ext_lib1_rdp1;
     inl1 += sizeof(struct dsd_sdh_work_1);
#ifdef NEW_150412
   } else if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d)  /* protocol MS RDG_OUT_DATA */
              && (dsl_cs.dsc_server_conf_1_c.inc_no_sdh == 0)) {
     adsl_ext_lib1_acsdh = &dss_ext_lib1_rdp_rdg_out_1;
     inl1 += sizeof(struct dsd_sdh_work_1);
   } else if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_in_d)  /* protocol MS RDG_IN_DATA */
              && (dsl_cs.dsc_server_conf_1_c.inc_no_sdh == 0)) {
     adsl_ext_lib1_acsdh = &dss_ext_lib1_rdp_rdg_in_1;
     inl1 += sizeof(struct dsd_sdh_work_1);
#endif
   }
   if (dsl_cs.awcc_node_serverineta) {      /* value serverineta       */
     dsl_cs.dsc_server_conf_1_c.imc_len_dns_name  /* length of DNS name */
#ifdef B170130
       = m_len_vx_vx( ied_chs_ascii_850, dsl_cs.awcc_node_serverineta, -1, ied_chs_utf_16 );  /* add length of DNS-name */
#endif
#ifndef B170130
       = m_len_vx_vx( ied_chs_utf_8, dsl_cs.awcc_node_serverineta, -1, ied_chs_utf_16 );  /* add length of DNS-name */
#endif
   }
#ifdef TRY_090425
   dsl_cs.dsc_server_conf_1_c.chrc_ppp_auth[0] = (unsigned char) ied_pppa_pass_thru;  /* pass-thru */
#endif
   adsl_server_conf_1_w1 = (struct dsd_server_conf_1 *)
                             malloc( sizeof(struct dsd_server_conf_1)
                                       + inl1
                                       + dsl_cs.dsc_server_conf_1_c.inc_len_name
                                       + dsl_cs.dsc_server_conf_1_c.inc_len_protocol
                                       + dsl_cs.dsc_server_conf_1_c.imc_len_dns_name );  /* length of DNS name */
   memcpy( adsl_server_conf_1_w1,
           &dsl_cs.dsc_server_conf_1_c,
           sizeof(struct dsd_server_conf_1) );
   /* copy the name of this entry                                      */
   adsl_server_conf_1_w1->awcc_name = (HL_WCHAR *) ((char *) (adsl_server_conf_1_w1 + 1) + inl1);  /* address of name */
   memcpy( (char *) (adsl_server_conf_1_w1 + 1) + inl1,
           dsl_cs.awcc_name_value,
           dsl_cs.dsc_server_conf_1_c.inc_len_name );
   if (dsl_cs.dsc_server_conf_1_c.inc_len_protocol) {
     adsl_server_conf_1_w1->awcc_protocol = (HL_WCHAR *) ((char *) (adsl_server_conf_1_w1 + 1) + inl1 + dsl_cs.dsc_server_conf_1_c.inc_len_name);  /* address of protocol */
     memcpy( (char *) (adsl_server_conf_1_w1 + 1)
                        + inl1
                        + dsl_cs.dsc_server_conf_1_c.inc_len_name,
             dsl_cs.chrc_prot_1,
             dsl_cs.dsc_server_conf_1_c.inc_len_protocol );
   }
   if (dsl_cs.dsc_server_conf_1_c.imc_len_dns_name) {  /* length of DNS name */
     adsl_server_conf_1_w1->achc_dns_name   /* address of DNS name     */
       = (char *) (adsl_server_conf_1_w1 + 1)
                    + inl1
                    + dsl_cs.dsc_server_conf_1_c.inc_len_name
                    + dsl_cs.dsc_server_conf_1_c.inc_len_protocol,
#ifdef B170130
     m_cpy_vx_vx( adsl_server_conf_1_w1->achc_dns_name,
                  dsl_cs.dsc_server_conf_1_c.imc_len_dns_name,  /* length of DNS name */
                  ied_chs_ascii_850,
                  dsl_cs.awcc_node_serverineta,
                  -1,
                  ied_chs_utf_16 );
#endif
#ifndef B170130
     m_cpy_vx_vx( adsl_server_conf_1_w1->achc_dns_name,
                  dsl_cs.dsc_server_conf_1_c.imc_len_dns_name,  /* length of DNS name */
                  ied_chs_utf_8,
                  dsl_cs.awcc_node_serverineta,
                  -1,
                  ied_chs_utf_16 );
#endif
   }
   /* set chain for WTSGATE                                            */
   adsl_server_conf_1_w1->adsc_wtsg1 = dsl_cs.adsc_wtsg1_ch;
   achl1 = (char *) (adsl_server_conf_1_w1 + 1)
             + dsl_cs.dsc_server_conf_1_c.inc_no_sdh * sizeof(struct dsd_sdh_work_1);
#ifdef B130405
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
     achl1 += sizeof(struct dsd_sdh_work_1);
   }
#endif
   if (adsl_ext_lib1_acsdh) {               /* automatic configured Server-Data-Hook */
     achl1 += sizeof(struct dsd_sdh_work_1);
   }
#ifdef DEBUG_120118_01                      /* insure++ lost block     */
   if (   (dsl_cs.dsc_server_conf_1_c.inc_no_sdh == 0)  /* without Server-Data-Hook */
       && (dsl_cs.adsc_sdhlib_chain)) {     /* but Server-Data-Hook defined */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d logic error Server-Data-Hook DEBUG_120118_01",
                     MAC_XML_LINENO( adunode2 ), MAC_XML_COL( adunode2 ) );
   }
#endif
   if (dsl_cs.dsc_server_conf_1_c.inc_no_sdh) {  /* with Server-Data-Hook */
     /* store pointers in reverse direction                            */
     while (dsl_cs.adsc_sdhlib_chain) {     /* loop over chain         */
       adsl_sdhlib_ch_1 = dsl_cs.adsc_sdhlib_chain;  /* get chain      */
#ifdef TRACEHL1
       m_hlnew_printf( HLOG_XYZ1, "loop dsl_cs.adsc_sdhlib_chain=%p ...->adsc_ext_lib1=%p achl1=%p dsl_cs.dsc_server_conf_1_c.inc_no_sdh=%d",
                       dsl_cs.adsc_sdhlib_chain, adsl_sdhlib_ch_1->adsc_ext_lib1, achl1, dsl_cs.dsc_server_conf_1_c.inc_no_sdh );
#endif
#ifdef B080609
       if (adsl_sdhlib_ch_1->adsc_sdhl_1) {  /* server-data-hook libr  */
       }
#endif
       if (adsl_sdhlib_ch_1->adsc_ext_lib1) {  /* server-data-hook external library */
         achl1 -= sizeof(struct dsd_sdh_work_1);
#ifdef B080609
         ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1
           = adsl_sdhlib_ch_1->adsc_sdhl_1;
#endif
         ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1
           = adsl_sdhlib_ch_1->adsc_ext_lib1;
         ((struct dsd_sdh_work_1 *) achl1)->ac_conf
           = adsl_sdhlib_ch_1->ac_conf;
       }
       dsl_cs.adsc_sdhlib_chain = adsl_sdhlib_ch_1->adsc_next;  /* next in ch */
       free( adsl_sdhlib_ch_1 );            /* free memory again       */
     }
   }
#ifdef B130405
#ifndef B120118
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
     achl1 -= sizeof(struct dsd_sdh_work_1);
#ifdef B080609
     ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1 = &dss_sdh_lib1_rdp1;
#endif
     ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1 = &dss_ext_lib1_rdp1;
     ((struct dsd_sdh_work_1 *) achl1)->ac_conf = NULL;
     adsl_server_conf_1_w1->inc_no_sdh++;   /* one pseudo-SDH          */
#ifndef B101202
     adsl_server_conf_1_w1->boc_dynamic = TRUE;  /* dynamically allocated */
#endif
   }
#endif
#endif
   if (adsl_ext_lib1_acsdh) {               /* automatic configured Server-Data-Hook */
     achl1 -= sizeof(struct dsd_sdh_work_1);
     ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1 = adsl_ext_lib1_acsdh;
     ((struct dsd_sdh_work_1 *) achl1)->ac_conf = NULL;
     adsl_server_conf_1_w1->inc_no_sdh++;   /* one pseudo-SDH          */
     adsl_server_conf_1_w1->boc_dynamic = TRUE;  /* dynamically allocated */
   }
#ifdef B120118_ERROR
   if (inl6) {                              /* with SDH-HOB-RDP-EXT1   */
     achl1 -= sizeof(struct dsd_sdh_work_1);
#ifdef B080609
     ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1 = &dss_sdh_lib1_rdp1;
#endif
     ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1 = &dss_ext_lib1_rdp1;
     ((struct dsd_sdh_work_1 *) achl1)->ac_conf = NULL;
     adsl_server_conf_1_w1->inc_no_sdh++;   /* one pseudo-SDH          */
#ifndef B101202
     adsl_server_conf_1_w1->boc_dynamic = TRUE;  /* dynamicly allocated */
#endif
   }
#endif
   /* insert the entries of the server-entries in normal order         */
   if (dsl_server_list_1_c.adsc_server_conf_1 == NULL) {
     dsl_server_list_1_c.adsc_server_conf_1 = adsl_server_conf_1_w1;
   } else {                                 /* append at end of list   */
     adsl_server_conf_1_w2 = dsl_server_list_1_c.adsc_server_conf_1;  /* get anchor */
     do {                                   /* loop over all server-entries */
       adsl_server_conf_1_w3 = adsl_server_conf_1_w2;  /* save preceeding entry */
       adsl_server_conf_1_w2 = adsl_server_conf_1_w2->adsc_next;  /* get next in chain */
     } while (adsl_server_conf_1_w2);       /* till end of chain       */
     adsl_server_conf_1_w3->adsc_next = adsl_server_conf_1_w1;  /* append at end of chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01() new adsl_server_conf_1_w1=%p ...->iec_scp_def=%d",
                   adsl_server_conf_1_w1,
                   adsl_server_conf_1_w1->iec_scp_def );
#endif
#ifdef B140718
// forgot to remove dsl_cs.adsc_sdhlib_chain
   goto p_buco_seli_60;                     /* next child server-list  */
#endif
#ifndef B140721
   dsl_cs.adsc_wtsg1_ch = NULL;             /* do not free resources WTSGATE */
   dsl_cs.dsc_server_conf_1_c.adsc_server_ineta = NULL;  /* do not free target-ineta */
#endif

   p_buco_seli_52:                          /* clean up resources      */
   /* free resources WTSGATE                                           */
   while (dsl_cs.adsc_wtsg1_ch) {           /* loop over total chain   */
     adsl_wtsg1_1 = dsl_cs.adsc_wtsg1_ch;   /* save element            */
     dsl_cs.adsc_wtsg1_ch = adsl_wtsg1_1->adsc_next;  /* get next in chain */
     free( adsl_wtsg1_1 );                  /* free memory again       */
   }
   /* free resources Server-Data-Hook                                  */
   while (dsl_cs.adsc_sdhlib_chain) {       /* loop over total chain   */
     adsl_sdhlib_ch_1 = dsl_cs.adsc_sdhlib_chain;  /* get element      */
     dsl_cs.adsc_sdhlib_chain = adsl_sdhlib_ch_1->adsc_next;
     free( adsl_sdhlib_ch_1 );              /* free memory again       */
   }
   if (dsl_cs.dsc_server_conf_1_c.adsc_server_ineta) {  /* with target-ineta */
     free( dsl_cs.dsc_server_conf_1_c.adsc_server_ineta );  /* free target-ineta */
   }

   p_buco_seli_60:                          /* next child server-list  */
   dsl_cs.adsc_node_conf = dsl_cs.adsc_node_conf->getNextSibling();
   if (dsl_cs.adsc_node_conf) goto p_buco_seli_20;

   if (dsl_server_list_1_c.adsc_server_conf_1 == NULL) {  /* no server-entry defined */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01820W line=%d col=%d Error server-list \"%(ux)s\" no server-entry defined - ignored",
                     MAC_XML_LINENO( adunode_save1 ), MAC_XML_COL( adunode_save1 ),
                     awcu_name_value );
     goto p_buco_seli_68;
   }
   dsl_server_list_1_c.iec_seli = ied_seli_defined;  /* entry has been defined */
   if ((iml_def_prot & 0X18) == 0X08) {     /* set defined protocols   */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01821W line=%d col=%d Error server-list \"%(ux)s\" server-entry RDG-OUT defined but no RDG-IN - remote desktop gateway not usable",
                     MAC_XML_LINENO( adunode_save1 ), MAC_XML_COL( adunode_save1 ),
                     awcu_name_value );
   }
   if ((iml_def_prot & 0X18) == 0X10) {     /* set defined protocols   */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01822W line=%d col=%d Error server-list \"%(ux)s\" server-entry RDG-IN defined but no RDG-OUT - remote desktop gateway not usable",
                     MAC_XML_LINENO( adunode_save1 ), MAC_XML_COL( adunode_save1 ),
                     awcu_name_value );
   }

   p_buco_seli_68:                          /* create entry server-list */
   if (awcu_name_value) {
     dsl_server_list_1_c.inc_len_name = (HL_WCSLEN( awcu_name_value ) + 1) * sizeof(HL_WCHAR);
   }
   adsl_server_list_1_w1 = (struct dsd_server_list_1 *)
                            malloc( sizeof(struct dsd_server_list_1)
                                      + dsl_server_list_1_c.inc_len_name );
   memcpy( adsl_server_list_1_w1,
           &dsl_server_list_1_c,
           sizeof(struct dsd_server_list_1) );
   if (dsl_server_list_1_c.inc_len_name) {
     memcpy( adsl_server_list_1_w1 + 1,
             awcu_name_value,
             dsl_server_list_1_c.inc_len_name );
   }
   adsl_server_list_1_w1->adsc_seli_node = adunode2;  /* save node      */
   /* get old chain                                                    */
   adsl_server_list_1_w1->adsc_next = dsl_cs.adsc_server_list_1_anchor;
   /* set new chain                                                    */
   dsl_cs.adsc_server_list_1_anchor = adsl_server_list_1_w1;
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_build_conf_01() new dsl_cs.adsc_server_list_1_anchor=%p ...->adsc_server_conf_1=%p",
                   dsl_cs.adsc_server_list_1_anchor,
                   dsl_cs.adsc_server_list_1_anchor->adsc_server_conf_1 );
#endif

   p_buco_seli_80:                          /* sslgate-c next child    */
   adunode2 = adunode2->getNextSibling();
   if (adunode2) goto p_buco_seli_04;
// p_buco_user_00:                          /* user-group              */
   adunode2 = adunode1->getFirstChild();
   if (adunode2 == NULL) {
     m_hlnew_printf( HLOG_EMER1, "HWSPXMLC01200W Error element name \"sslgate-configuration\" has no child - logic error" );
     return FALSE;
   }

   p_buco_user_04:                          /* next child of sslgate-c */
#ifdef TRACEHL1
   if (adunode2->getNodeType() == DOMNode::ELEMENT_NODE) {
     awcu2 = (HL_WCHAR *) adunode2->getNodeName();
     m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 l%05d p_buco_user_04: user-group found section %(ux)s adsl_node_cluster=%p",
                     __LINE__, awcu2, adsl_node_cluster );
   }
#endif
   if (adunode2 == adunode_general) goto p_buco_user_80;
#ifdef B080324
   if (adunode2 == adunode_blade_control) goto p_buco_user_80;
#endif
   if (adunode2 == adsl_node_ocsp) goto p_buco_user_80;
   if (adunode2 == adsl_node_csssl) goto p_buco_user_80;
   if (adunode2 == adsl_node_confp) goto p_buco_user_80;
#ifdef OLD_1112
   adsl_raent_1 = dsl_cs.adsc_raent_anchor;  /* get chain of already de */
   while (adsl_raent_1) {                   /* loop over total chain   */
     if (adunode2 == adsl_raent_1->adsc_radius_node) goto p_buco_user_80;
     adsl_raent_1 = adsl_raent_1->adsc_next;  /* get next in chain     */
   }
#endif
   adsl_server_list_1_w1 = dsl_cs.adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_server_list_1_w1) {           /* loop over total chain   */
     if (adunode2 == adsl_server_list_1_w1->adsc_seli_node) goto p_buco_user_80;
     adsl_server_list_1_w1 = adsl_server_list_1_w1->adsc_next;  /* get next in chain */
   }
   if (adunode2 == adsl_node_cluster) goto p_buco_user_80;  /* cluster defined */
   adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_anchor;  /* get first element LDAP template */
   while (adsl_ldap_t_dummy_w1) {           /* loop over all LDAP templates */
     if (adunode2 == adsl_ldap_t_dummy_w1->adsc_node_ldap_t_d) goto p_buco_user_80;  /* LDAP template defined */
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_anchor;  /* get first element LDAP service */
   while (adsl_ldap_s_dummy_w1) {           /* loop over all LDAP services */
     if (adunode2 == adsl_ldap_s_dummy_w1->adsc_node_ldap_s_d) goto p_buco_user_80;  /* LDAP service defined */
     adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_service_dummy_w1 = adsl_service_dummy_anchor;  /* get first element service */
   while (adsl_service_dummy_w1) {          /* loop over all services  */
     if (adunode2 == adsl_service_dummy_w1->adsc_node_service_d) goto p_buco_user_80;  /* service defined */
     adsl_service_dummy_w1 = adsl_service_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (adunode2 == adsl_sc_w1->adsc_node) goto p_buco_user_80;  /* server-data-hook-object defined */
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   if (adunode2->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_user_80;
   awcu2 = (HL_WCHAR *) adunode2->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 l%05d user-group found section %(ux)s",
                   __LINE__, awcu2 );
#endif
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu2, "user-group" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     goto p_buco_user_80;
   }
#else
   if (wcscmp( awcu2, L"user-group" )) {
     goto p_buco_user_80;
   }
#endif
   /* process sslgate-c user-group                                     */
   /* structure in stack                                               */
   memset( &dsl_usgro, 0, sizeof(struct dsd_user_group) );
   bol_usgro_priv_mask = FALSE;             /* privileges mask not yet defined */
   bol_usgro_goutineta = FALSE;
   bol_usgro_selserv = FALSE;
   avpl_selserv_chain = NULL;               /* chain of server-lists   */
   adunode3 = adunode2->getFirstChild();
   if (adunode3 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01201W Error user-group element has no child - ignored" );
     goto p_buco_user_68;
   }
   /* search name                                                      */
   adunode_save1 = adunode3;                /* save node               */
   adunode_name = NULL;
   awcu_name_value = NULL;
   while (adunode3) {
     if (adunode3->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, "name" );
       if ((bol1) && (inl1 == 0)) {         /* strings are equal       */
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01202W Error element user-group name double - ignored" );
           goto p_buco_user_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01203W Error element user-group name \"%(ux)s\" has no child - ignored",
                   awcu3_name );
           goto p_buco_user_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#else
       if (!wcscmp( awcu3_name, L"name" )) {
         if (adunode_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01202W Error element user-group name double - ignored" );
           goto p_buco_user_68;
         }
         adunode_name = adunode3;           /* save node               */
         adunode4 = adunode3->getFirstChild();
         if (adunode4 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01203W Error element user-group name \"%(ux)s\" has no child - ignored",
                   awcu3_name );
           goto p_buco_user_68;
         }
         do {
           if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_name_value = (HL_WCHAR *) adunode4->getNodeValue();
             break;
           }
           adunode4 = adunode4->getNextSibling();
         } while (adunode4);
       }
#endif
     }
//   if (adunode_name) break;
     adunode3 = adunode3->getNextSibling();
   }
   if (awcu_name_value == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01204W Error element user-group no name value found - ignored" );
     goto p_buco_user_68;
   }
   adsl_usgro_w1 = dsl_cs.adsc_usgro_anchor;  /* get chain of already defined */
   while (adsl_usgro_w1) {                   /* loop over total chain   */
     if (adsl_usgro_w1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_usgro_w1 + 1), awcu_name_value )) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01205W Error element user-group name \"%(ux)s\" defined double - ignored",
                         awcu_name_value );
         goto p_buco_user_68;
       }
     }
     adsl_usgro_w1 = adsl_usgro_w1->adsc_next;  /* get next in chain   */
   }
   adunode3 = adunode_save1;                /* restore node            */

   p_buco_user_20:                          /* child of user-group     */
   if (adunode3 == adunode_name) goto p_buco_user_60;
   if (adunode3->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_user_60;
   awcu3_name = (HL_WCHAR *) adunode3->getNodeName();
   inl1 = sizeof(achrs_node_usgro_kw) / sizeof(achrs_node_usgro_kw[0]);
   do {
     bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, (char *) achrs_node_usgro_kw[ inl1 - 1 ] );
     if ((bol1) && (inl2 == 0)) break;      /* strings are equal       */
     inl1--;                                /* decrement index         */
   } while (inl1 > 0);
   if (inl1 == 0) {                         /* parameter not found     */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01206W Error user-group \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_user_60;
   }
   adunode4 = adunode3->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01207W Error element user-group name \"%(ux)s\" - \"%(ux)s\" has no child - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_user_60;
   }
   do {
     if (adunode4->getNodeType() == DOMNode::TEXT_NODE) {
       awcu3_value = (HL_WCHAR *) adunode4->getNodeValue();
       break;
     }
     adunode4 = adunode4->getNextSibling();
   } while (adunode4);
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01208W Error element user-group \"%(ux)s\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcu_name_value, awcu3_name );
     goto p_buco_user_60;
   }
   switch (inl1) {                          /* depending of keyword    */
     case DEF_XML_USGRO_USER:
       goto p_buco_usgr_user;
     case DEF_XML_USGRO_PRIV_MASK:
       goto p_buco_usgr_priv_mask;
     case DEF_XML_USGRO_SELSERV:
       goto p_buco_usgr_selserv;
     case DEF_XML_USGRO_TARGFI:
       goto p_buco_usgr_targfi;
   }
   if (bol_usgro_goutineta) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01209W Error element user-group \"%(ux)s\" gate-out-ineta double - ignored",
                     awcu_name_value );
     goto p_buco_user_60;
   }
   achl1 = XMLString::transcode( (XMLCh *) awcu3_value );
#ifndef OLD01
   dsl_usgro.umc_out_ineta = m_get_ineta_single( achl1 );
   if (dsl_usgro.umc_out_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01210W Error element user_group \"%(ux)s\" gate-out-ineta \"%(ux)s\" not valid - ignored",
                     awcu_name_value, awcu3_value );
     XMLString::release( &achl1 );          /* free INETA again        */
     dsl_usgro.umc_out_ineta = INADDR_ANY;  /* set default             */
     goto p_buco_user_60;                   /* ignore value            */
   }
#else
   dsl_usgro.umc_out_ineta = IP_inet_addr( achl1 );
   if (dsl_usgro.umc_out_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     duhostEntry = IP_gethostbyname( achl1 );
     if (duhostEntry == 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01210W Error element user_group \"%(ux)s\" gate-out-ineta \"%(ux)s\" not valid - ignored",
                   awcu_name_value, awcu3_value );
       XMLString::release( &achl1 );        /* free INETA again        */
       dsl_usgro.umc_out_ineta = INADDR_ANY;  /* set default           */
       goto p_buco_user_60;                 /* ignore value            */
     } else {
       dsl_usgro.umc_out_ineta = *((UNSIG_MED *) **(&(*duhostEntry).h_addr_list) );
     }
   }
#endif
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "gate_out_ineta user %(ux)s ip-addr %08X", awcu_name_value, dsl_usgro.umc_out_ineta );
#endif
   XMLString::release( &achl1 );            /* free INETA again        */
   bol_usgro_goutineta = TRUE;
   goto p_buco_user_60;                     /* next child user-group   */

   p_buco_usgr_priv_mask:                   /* <privileges-mask>       */
   if (bol_usgro_priv_mask) {               /* already defined         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01700W Error element user-group \"%(ux)s\" privileges-mask double - ignored",
                     awcu_name_value );
     goto p_buco_user_60;                   /* ignore this value       */
   }
   inl1 = 0;                                /* clear count characters  */
   awcl1 = awcu3_value;                     /* start string hex value  */
   while (   ((*awcl1 >= '0') && (*awcl1 <= '9'))
          || ((*awcl1 >= 'a') && (*awcl1 <= 'f'))
          || ((*awcl1 >= 'A') && (*awcl1 <= 'F'))) {
     inl1++;                                /* count hexa digit        */
     awcl1++;                               /* next input character    */
   }
   if (*awcl1) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01701W Error element user-group \"%(ux)s\" <privileges-mask> \"%(ux)s\" contains invalid character \"%(ux)c\" - ignored",
                     awcu_name_value, awcu3_value, *awcl1 );
     goto p_buco_user_60;                   /* ignore this value       */
   }
   if (inl1 % 2) {                          /* number of characters not even */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01702W Error element user-group \"%(ux)s\" <privileges-mask> \"%(ux)s\" length not multiple of two - ignored",
                     awcu_name_value, awcu3_value );
     goto p_buco_user_60;                   /* ignore this value       */
   }
   achl1 = dsl_usgro.chrc_priv;             /* start of output         */
   awcl1 = awcu3_value;                     /* start string hex value  */
   bol1 = FALSE;                            /* is first digit          */
   inl1 = 0;                                /* clear output            */
   do {
     if (achl1 >= dsl_usgro.chrc_priv + sizeof(dsl_usgro.chrc_priv)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01703W Error element user-group \"%(ux)s\" <privileges-mask> \"%(ux)s\" too many hex characters - shortened",
                       awcu_name_value, awcu3_value );
       break;
     }
     inl1 <<= 4;                            /* shift hexa digit        */
     if ((*awcl1 >= L'0') && (*awcl1 <= L'9')) {
       inl1 |= *awcl1 - L'0';
     } else if ((*awcl1 >= L'a') && (*awcl1 <= L'f')) {
       inl1 |= *awcl1 - L'a' + 10;
     } else {
       inl1 |= *awcl1 - L'A' + 10;
     }
     if (bol1) {
       *((unsigned char *) achl1) = (unsigned char) inl1;
       achl1++;                             /* this byte set           */
       inl1 = 0;                            /* clear output            */
       bol1 = FALSE;                        /* next first digit again  */
     } else {
       bol1 = TRUE;                         /* next second digit       */
     }
     awcl1++;                               /* next input character    */
   } while (*awcl1);
   bol_usgro_priv_mask = TRUE;              /* privileges mask defined now */
   goto p_buco_user_60;                     /* next child user-group   */

   p_buco_usgr_targfi:                      /* <target-filter>         */
   if (dsl_usgro.adsc_targfi_1) {           /* already defined         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01704W Error element user-group \"%(ux)s\" privileges-mask double - ignored",
                     awcu_name_value );
     goto p_buco_user_60;                   /* ignore this value       */
   }
   adsl_targfi_w1 = dsl_cs.adsc_targfi_1_anchor;  /* get chain target-filter */
   while (adsl_targfi_w1) {                 /* loop over all target-filter */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         (char *) adsl_targfi_w1 + adsl_targfi_w1->imc_off_name,
                         adsl_targfi_w1->imc_len_name,
                         ied_chs_utf_8,
                         awcu3_value,
                         -1,
                         ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
     adsl_targfi_w1 = adsl_targfi_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_targfi_w1 == NULL) {            /* target-filter not found */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01720W Error element user-group \"%(ux)s\" target-filter \"%(ux)s\" not defined - ignored",
                     awcu_name_value, awcu3_value );
     goto p_buco_user_60;                   /* ignore this value       */
   }
   dsl_usgro.adsc_targfi_1 = adsl_targfi_w1;  /* set this target-filter */
#ifdef XYZ1
   adsl_targfi_w1->boc_in_use = TRUE;       /* target-filter is in use */
#endif
   goto p_buco_user_60;                     /* next child user-group   */

   p_buco_usgr_selserv:                     /* <select-server>         */
   if (bol_usgro_selserv) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01730W Error element user-group \"%(ux)s\" select-server double - ignored",
                     awcu_name_value );
     goto p_buco_user_60;
   }

   p_buco_usgr_sese_20:                     /* check child of list     */
   if (adunode4->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_usgr_sese_80;
   awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "server-list-name" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01740W Error element user-group \"%(ux)s\" select-server - invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu4_name );
     goto p_buco_usgr_sese_80;              /* get next sibling        */
   }
#else
   if (wcscmp( awcu4_name, L"server-list-name" )) {  /* compare const  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01741W Error element user-group \"%(ux)s\" select-server - invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu4_name );
     goto p_buco_usgr_sese_80;              /* get next sibling        */
   }
#endif
   adsl_node_03 = adunode4->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01742W Error element user-group \"%(ux)s\" select-server - \"%(ux)s\" has no child - ignored",
                     awcu_name_value, awcu4_name );
     goto p_buco_usgr_sese_80;              /* get next sibling        */
   }

   p_buco_usgr_sese_28:                     /* search value            */
   if (adsl_node_03->getNodeType() != DOMNode::TEXT_NODE) goto p_buco_usgr_sese_72;
   awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();

   /* search server-list definition                                    */
   adsl_seli_1_w1 = dsl_cs.adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_seli_1_w1) {                   /* loop over total chain   */
     if (adsl_seli_1_w1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_seli_1_w1 + 1), awcu4_value )) {
         break;
       }
     }
     adsl_seli_1_w1 = adsl_seli_1_w1->adsc_next;  /* get next in chain   */
   }
   if (adsl_seli_1_w1 == NULL) {             /* server-list not found   */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01743W Error element user-group \"%(ux)s\" select-server, server-list \"%(ux)s\" not defined - ignored",
                     awcu_name_value, awcu4_value );
     goto p_buco_usgr_sese_72;              /* search value next step  */
   }
   /* search if defined double                                         */
   avpl_selserv_ch_1 = avpl_selserv_chain;
   while (avpl_selserv_ch_1) {              /* loop over total chain   */
     if (adsl_seli_1_w1 == *(avpl_selserv_ch_1 + 1)) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01744W Error element user-group \"%(ux)s\" select-server, server-list \"%(ux)s\" defined double - ignored",
                       awcu_name_value, awcu4_value );
       goto p_buco_usgr_sese_72;            /* search value next step  */
     }
     avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;
   }
   if (adsl_seli_1_w1->iec_seli == ied_seli_invalid) {  /* entry invalid */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01745W Error element user-group \"%(ux)s\" select-server, server-list \"%(ux)s\" invalid - ignored",
                     awcu_name_value, awcu4_value );
     goto p_buco_usgr_sese_72;              /* search value next step  */
   }
   avpl_selserv_ch_1 = (void **) malloc( 2 * sizeof(void *) );
   *avpl_selserv_ch_1 = avpl_selserv_chain;  /* get old chain          */
   *(avpl_selserv_ch_1 + 1) = adsl_seli_1_w1;  /* set element found     */
   avpl_selserv_chain = avpl_selserv_ch_1;  /* set new chain           */
   dsl_usgro.inc_no_seli++;                 /* number of server lists  */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "set new avpl_selserv_chain=%p",
                   avpl_selserv_chain );
#endif

   p_buco_usgr_sese_72:                     /* search value next step  */
   adsl_node_03 = adsl_node_03->getNextSibling();
   if (adsl_node_03) goto p_buco_usgr_sese_28;

   p_buco_usgr_sese_80:                     /* get next sibling        */
   adunode4 = adunode4->getNextSibling();
   if (adunode4) goto p_buco_usgr_sese_20;
   if (avpl_selserv_chain == NULL) {        /* no server-list found   */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01746W Error element user-group \"%(ux)s\" select-server, no valid server-list found - ignored",
                     awcu_name_value );
     goto p_buco_user_60;                   /* next child user-group   */
   }
   bol_usgro_selserv = TRUE;                /* mark element as set     */
   goto p_buco_user_60;                     /* next child user-group   */

   p_buco_usgr_user:                        /* <user>                  */

// p_buco_usgr_user_20:                     /* check child of list     */
   /* process sslgate-c user-group user                                */
   /* structure in stack                                               */
   memset( &dsl_usent, 0, sizeof(struct dsd_user_entry) );
// iel_red = ied_red_invalid;               /* entry invalid till now  */
   adunode4 = adunode3->getFirstChild();
   if (adunode4 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01211W Error user-group \"%(ux)s\" user element has no child - ignored",
                     awcu_name_value );
     goto p_buco_user_68;
   }
   /* search name                                                      */
   adunode_save1 = adunode4;                /* save node               */
   adunode_4_name = NULL;
   awcu_4_name_value = NULL;
   while (adunode4) {
     if (adunode4->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
#ifndef OLD01
       bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "name" );
       if ((bol1) && (inl1 == 0)) {         /* strings are equal       */
         if (adunode_4_name) {                /* name already set        */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01212W Error element user-group \"%(ux)s\" user name double - ignored",
                           awcu_name_value );
           goto p_buco_user_60;
         }
         adunode_4_name = adunode4;         /* save node               */
         adunode5 = adunode4->getFirstChild();
         if (adunode5 == NULL) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01213W Error element user-group name \"%(ux)s\" user \"%(ux)s\" has no child - ignored",
                           awcu_name_value, awcu4_name );
           goto p_buco_user_60;
         }
         do {
           if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_4_name_value = (HL_WCHAR *) adunode5->getNodeValue();
             break;
           }
           adunode5 = adunode5->getNextSibling();
         } while (adunode5);
       }
#else
       if (!wcscmp( awcu4_name, L"name" )) {
         if (adunode_4_name) {                /* name already set        */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01212W Error element user-group \"%(ux)s\" user name double - ignored",
                       awcu_name_value );
           goto p_buco_user_60;
         }
         adunode_4_name = adunode4;         /* save node               */
         adunode5 = adunode4->getFirstChild();
         if (adunode5 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01213W Error element user-group name \"%(ux)s\" user \"%(ux)s\" has no child - ignored",
                       awcu_name_value, awcu4_name );
           goto p_buco_user_60;
         }
         do {
           if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
             awcu_4_name_value = (HL_WCHAR *) adunode5->getNodeValue();
             break;
           }
           adunode5 = adunode5->getNextSibling();
         } while (adunode5);
       }
#endif
     }
     adunode4 = adunode4->getNextSibling();
   }
   if (awcu_4_name_value == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01214W Error element user-group \"%(ux)s\" user no name value found - ignored",
                     awcu_name_value );
     goto p_buco_user_60;
   }
   adsl_usent_w1 = dsl_usgro.adsc_usere;    /* get chain of already de */
   while (adsl_usent_w1) {                  /* loop over total chain   */
     if (!HL_NAME_WCSCMP( (HL_WCHAR *) (adsl_usent_w1 + 1), awcu_4_name_value )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01215W Error element user-group name \"%(ux)s\" user \"%(ux)s\" defined double - ignored",
                       awcu_name_value, awcu_4_name_value );
       goto p_buco_user_60;
     }
     adsl_usent_w1 = adsl_usent_w1->adsc_next;  /* get next in chain   */
   }
   adunode4 = adunode_save1;                /* restore node            */
#ifdef TRACEHLB
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 user-group %(ux)s found user %(ux)s",
                   awcu_name_value, awcu_4_name_value );
#endif
   memset( awcrl_user_var_tab, 0, sizeof(awcrl_user_var_tab) );
   adsl_user_ineta_c1_ch = NULL;            /* clear chain user entry configured INETA */
   achl_user_pwd_1 = NULL;                  /* address of password     */

// to-do 21.07.09 KB
// up to four (4) <ineta-ppp>192.1.2.3</ineta-ppp>
// up to four (4) <ineta-appl>192.1.2.4</ineta-appl>
// Oguzhan Alan needs SIP-full-name
   p_buco_usgr_user_40:                     /* check child of user     */
   if (adunode4 == adunode_4_name) goto p_buco_usgr_user_80;
   if (adunode4->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_usgr_user_80;
   awcu4_name = (HL_WCHAR *) adunode4->getNodeName();
   adsl_user_var_n = NULL;                  /* area of number          */
   inl1 = sizeof(achrs_node_user_kw) / sizeof(achrs_node_user_kw[0]);
   do {
     bol1 = m_cmp_u16z_u8z( &inl2, awcu4_name, (char *) achrs_node_user_kw[ inl1 - 1 ] );
     if ((bol1) && (inl2 == 0)) break;      /* strings are equal       */
     inl1--;                                /* decrement index         */
   } while (inl1 > 0);
   if (inl1 == 0) {                         /* parameter not found     */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01216W Error user-group \"%(ux)s\" user \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_name );
     goto p_buco_usgr_user_80;
   }
   if (awcrl_user_var_tab[ inl1 - 1 ]) {    /* element already found   */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01217W Error element user-group \"%(ux)s\" user \"%(ux)s\" node name \"%(ux)s\" double - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_name );
     goto p_buco_usgr_user_80;
   }
   switch (inl1) {                          /* check if numeric        */
     case DEF_XML_USGUS_PASSWORD_PLAIN:
       if (awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_ENCRY - 1 ] == NULL) break;  /* password-encrypted not set */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element user-group \"%(ux)s\" user \"%(ux)s\" found node name \"<password-plain>\" but password-enrypted already defined - ignored",
                       MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                       awcu_name_value, awcu_4_name_value );
       goto p_buco_usgr_user_80;
     case DEF_XML_USGUS_PASSWORD_ENCRY:
       if (awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_PLAIN - 1 ] == NULL) break;  /* password-plain not set */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element user-group \"%(ux)s\" user \"%(ux)s\" found node name \"<password-encrypted>\" but password-plain already defined - ignored",
                       MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                       awcu_name_value, awcu_4_name_value );
       goto p_buco_usgr_user_80;
     case DEF_XML_USGUS_DESKTOP_PORT:
       adsl_user_var_n = &dsl_usent.inc_port_target;  /* target port   */
       break;
     case DEF_XML_USGUS_WAITCONN:
       adsl_user_var_n = &dsl_usent.inc_waitconn;  /* wait for connect c */
       break;
   }
   adunode5 = adunode4->getFirstChild();
   if (adunode5 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01218W Error element user-group \"%(ux)s\" user \"%(ux)s\" - \"%(ux)s\" has no child - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_name );
     goto p_buco_usgr_user_80;
   }
   do {
     if (adunode5->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adunode5->getNodeValue();
       break;
     }
     adunode5 = adunode5->getNextSibling();
   } while (adunode5);
   if (adunode5 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01219W Error element user-group \"%(ux)s\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                 awcu_name_value, awcu_4_name_value );
     goto p_buco_usgr_user_80;
   }
   awcrl_user_var_tab[ inl1 - 1 ] = awcu4_value;  /* set this value    */
   if (adsl_user_var_n) {                   /* addr of number set      */
     inl2 = m_get_wc_number( awcu4_value );
     if (inl2 <= 0) {
       achl1 = "HWSPXMLC01220W Error element user_group \"%(ux)s\" user \"%(ux)s\" numeric value desktop-port invalid \"%(ux)s\" - ignored";
       if (inl1 == DEF_XML_USGUS_WAITCONN) {
         achl1 = "HWSPXMLC01221W Error element user_group \"%(ux)s\" user \"%(ux)s\" numeric value wait-connect invalid \"%(ux)s\" - ignored";
       }
       m_hlnew_printf( HLOG_XYZ1, achl1, awcu_name_value, awcu_4_name_value, awcu4_value );
       goto p_buco_usgr_user_80;            /* ignore value            */
     }
     *adsl_user_var_n = inl2;               /* set numeric value       */
     goto p_buco_usgr_user_80;              /* value of user is valid  */
   }
   switch (inl1) {                          /* check if special value  */
     case DEF_XML_USGUS_PASSWORD_ENCRY:
       goto p_buco_usgr_user_pwd_encry;     /* process <password-encrypted> */
     case DEF_XML_USGUS_PRIV_MASK:          /* privileges-mask         */
       goto p_buco_usgr_user_priv_mask;     /* process this value      */
     case DEF_XML_USGUS_MACADDR:            /* mac-address             */
       goto p_buco_usgr_user_ma00;          /* process this value      */
     case DEF_XML_USGUS_INETA_PPP:
       achl1 = "ineta-ppp";                 /* for error messages      */
#ifndef B100514
       awcrl_user_var_tab[ DEF_XML_USGUS_INETA_PPP - 1 ] = NULL;  /* element may come multiple times */
#endif
       goto p_buco_usgr_user_ineta_00;      /* process INETA ppp or appl */
     case DEF_XML_USGUS_INETA_APPL:
       achl1 = "ineta-appl";                /* for error messages      */
#ifndef B100514
       awcrl_user_var_tab[ DEF_XML_USGUS_INETA_APPL - 1 ] = NULL;  /* element may come multiple times */
#endif
       goto p_buco_usgr_user_ineta_00;      /* process INETA ppp or appl */
   }
   if (inl1 != DEF_XML_USGUS_GOUTINETA) {   /* nothing more to do      */
     goto p_buco_usgr_user_80;              /* value of user is valid  */
   }
   /* inl1 == DEF_XML_USGUS_GOUTINETA / gate-out-ineta                 */
   achl1 = XMLString::transcode( (XMLCh *) awcu4_value );
   dsl_usent.umc_out_ineta = m_get_ineta_single( achl1 );
   if (dsl_usent.umc_out_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01222W Error element user_group \"%(ux)s\" user \"%(ux)s\" gate-out-ineta \"%(ux)s\" not valid - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_value );
     XMLString::release( &achl1 );          /* free INETA again        */
     dsl_usent.umc_out_ineta = INADDR_ANY;  /* set default             */
     awcrl_user_var_tab[ DEF_XML_USGUS_GOUTINETA ] = NULL;  /* this one not set */
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "gate_out_ineta user %(ux)s ip-addr %08X",
                   awcu_4_name_value, dsl_usent.umc_out_ineta );
#endif
   XMLString::release( &achl1 );            /* free INETA again        */
   goto p_buco_usgr_user_80;                /* value of user is valid  */

   p_buco_usgr_user_ineta_00:               /* process INETA ppp or appl */
   /* inl1 contains index                                              */
   bol1 = m_get_single_ineta( &iml2, &dsl_ineta_sret_work,
                              awcu4_value, -1, ied_chs_utf_16 );
   if (bol1 == FALSE) {                     /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error element user_group \"%(ux)s\" user \"%(ux)s\" %s \"%(ux)s\" invalid, error %d - ignored",
                     awcu_name_value, awcu_4_name_value, achl1, awcu4_value, iml2 );
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
   if (adsl_user_ineta_c1_ch) {             /* user entry configured INETA */
     adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_ch;  /* get first entry */
     while (TRUE) {                         /* loop over already configured INETAs */
       if (   (inl1 == adsl_user_ineta_c1_w1->imc_func)  /* function of INETA */
           && (dsl_ineta_sret_work.usc_family == adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_family)  /* family IPV4 / IPV6 */
           && (!memcmp( dsl_ineta_sret_work.chrc_ineta,
                        adsl_user_ineta_c1_w1 + 1,
                        dsl_ineta_sret_work.usc_length ))) {  /* length of following address */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error element user_group \"%(ux)s\" user \"%(ux)s\" %s value \"%(ux)s\" double - ignored",
                         awcu_name_value, awcu_4_name_value, achl1, awcu4_value );
         goto p_buco_usgr_user_80;          /* ignore value            */
       }
       if (adsl_user_ineta_c1_w1->adsc_next == NULL) break;  /* was last INETA */
       adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_w1->adsc_next;  /* get next in chain */
     }
   }
   /* create new element and keep existing sequence                    */
   adsl_user_ineta_c1_new
     = (struct dsd_user_ineta_c1 *) malloc( sizeof(struct dsd_user_ineta_c1)
                                              + dsl_ineta_sret_work.usc_length );
   adsl_user_ineta_c1_new->adsc_next = NULL;  /* clear chain field     */
   adsl_user_ineta_c1_new->imc_func = inl1;  /* function of INETA      */
   adsl_user_ineta_c1_new->dsc_ineta_s1.usc_family = dsl_ineta_sret_work.usc_family;  /* family IPV4 / IPV6 */
   adsl_user_ineta_c1_new->dsc_ineta_s1.usc_length = dsl_ineta_sret_work.usc_length;  /* length of following address */
   memcpy( adsl_user_ineta_c1_new + 1,
           dsl_ineta_sret_work.chrc_ineta,
           dsl_ineta_sret_work.usc_length );  /* length of following address */
   if (adsl_user_ineta_c1_ch == NULL) {     /* user entry configured INETA */
     adsl_user_ineta_c1_ch = adsl_user_ineta_c1_new;  /* is first in chain */
   } else {
     adsl_user_ineta_c1_w1->adsc_next = adsl_user_ineta_c1_new;  /* append to chain */
   }
   goto p_buco_usgr_user_80;                /* all done                */

   p_buco_usgr_user_pwd_encry:              /* process <password-encrypted> */
   dsl_ucs_l.ac_str = awcu4_value;          /* address of string       */
   dsl_ucs_l.imc_len_str = -1;              /* length string in elements */
   dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string    */
   iml1 = (HL_WCSLEN( awcu4_value ) + 4 - 1) / 4 * 3;
   achl_user_pwd_1 = (char *) malloc( iml1 );  /* user password-encrypted */
   iml_len_user_pwd_1 = m_get_ucs_base64( &iml2, &iml3,
                                          achl_user_pwd_1, iml1,
                                          &dsl_ucs_l );
   if (iml_len_user_pwd_1 <= 0) {           /* error occured           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element user_group \"%(ux)s\" user \"%(ux)s\" element <password-encrypted> base64 error %d position %d in string \"%(ux)s\" - ignored",
                     MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                     awcu_name_value, awcu_4_name_value, iml2, iml3, awcu4_value );
     free( achl_user_pwd_1 );               /* free memory again       */
     achl_user_pwd_1 = NULL;                /* no user password-encrypted */
     awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_ENCRY - 1 ] = NULL;  /* ignore this value */
     goto p_buco_usgr_user_80;              /* all done                */
   }
   bol1 = m_check_vx( achl_user_pwd_1, iml_len_user_pwd_1, ied_chs_utf_8 );  /* check Unicode UTF-8 */
   if (bol1) {                              /* no error                */
     goto p_buco_usgr_user_80;              /* all done                */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element user_group \"%(ux)s\" user \"%(ux)s\" element <password-encrypted> string \"%(ux)s\" decoded no valid UTF-8 - ignored",
                   MAC_XML_LINENO( adunode4 ), MAC_XML_COL( adunode4 ),
                   awcu_name_value, awcu_4_name_value, awcu4_value );
   free( achl_user_pwd_1 );                 /* free memory again   */
   achl_user_pwd_1 = NULL;                  /* no user password-encrypted */
   awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_ENCRY - 1 ] = NULL;  /* ignore this value */
   goto p_buco_usgr_user_80;                /* all done                */

   p_buco_usgr_user_priv_mask:              /* process privileges mask */
   inl1 = 0;                                /* clear count characters  */
   awcl1 = awcu4_value;                     /* start string hex value  */
   while (   ((*awcl1 >= L'0') && (*awcl1 <= L'9'))
          || ((*awcl1 >= L'a') && (*awcl1 <= L'f'))
          || ((*awcl1 >= L'A') && (*awcl1 <= L'F'))) {
     inl1++;                                /* count hexa digit        */
     awcl1++;                               /* next input character    */
   }
   if (*awcl1) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01900W Error element user_group \"%(ux)s\" user \"%(ux)s\" element <input-separator-string-hexa> \"%(ux)s\" contains invalid character \"%(ux)c\" - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_value, *awcl1 );
     awcrl_user_var_tab[ DEF_XML_USGUS_PRIV_MASK - 1 ] = NULL;  /* ignore this value */
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
   if (inl1 % 2) {                  /* number of characters not even */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01901W Error element user_group \"%(ux)s\" user \"%(ux)s\" element <input-separator-string-hexa> \"%(ux)s\" length not multiple of two - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_value );
     awcrl_user_var_tab[ DEF_XML_USGUS_PRIV_MASK - 1 ] = NULL;  /* ignore this value */
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
   achl1 = dsl_usent.chrc_priv;             /* start of output         */
   awcl1 = awcu4_value;                     /* start string hex value  */
   bol1 = FALSE;                            /* is first digit          */
   inl1 = 0;                                /* clear output            */
   do {
     if (achl1 >= dsl_usent.chrc_priv + sizeof(dsl_usent.chrc_priv)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01902W Error element user_group \"%(ux)s\" user \"%(ux)s\" element <privileges-mask> \"%(ux)s\" too many hex characters - shortened",
                       awcu_name_value, awcu_4_name_value, awcu4_value );
       break;
     }
     inl1 <<= 4;                            /* shift hexa digit        */
     if ((*awcl1 >= L'0') && (*awcl1 <= L'9')) {
       inl1 |= *awcl1 - L'0';
     } else if ((*awcl1 >= L'a') && (*awcl1 <= L'f')) {
       inl1 |= *awcl1 - L'a' + 10;
     } else {
       inl1 |= *awcl1 - L'A' + 10;
     }
     if (bol1) {
       *((unsigned char *) achl1) = (unsigned char) inl1;
       achl1++;                             /* this byte set           */
       inl1 = 0;                            /* clear output            */
       bol1 = FALSE;                        /* next first digit again  */
     } else {
       bol1 = TRUE;                         /* next second digit       */
     }
     awcl1++;                               /* next input character    */
   } while (*awcl1);
   goto p_buco_usgr_user_80;                /* value of user is valid  */

   p_buco_usgr_user_ma00:                   /* process mac-address     */
   awcl1 = awcu4_value;
   awcl2 = awcu4_value + HL_WCSLEN( awcu4_value );
   achl1 = dsl_usent.chrc_macaddr;          /* start target            */
   achl2 = achl1 + sizeof(dsl_usent.chrc_macaddr);  /* end target      */

   p_buco_usgr_user_ma20:                   /* next hexa digit         */
   inl1 = 0;                                /* first digit             */

   p_buco_usgr_user_ma24:                   /* hex value               */
   if (awcl1 >= awcl2) goto p_buco_usgr_user_ma80;  /* input too short */
   if ((*awcl1 >= L'0') && (*awcl1 <= L'9')) {
     inl2 = *awcl1 - L'0';
   } else if ((*awcl1 >= L'A') && (*awcl1 <= L'F')) {
     inl2 = *awcl1 - L'A' + 10;
   } else if ((*awcl1 >= L'a') && (*awcl1 <= L'f')) {
     inl2 = *awcl1 - L'a' + 10;
   } else {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01223W Error element user_group \"%(ux)s\" user \"%(ux)s\" mac-address \"%(ux)s\" invalid hex-digit at position=%d - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_value, awcl1 - awcu4_value + 1 );
#ifndef OLD01
     awcrl_user_var_tab[ DEF_XML_USGUS_MACADDR ] = NULL;  /* this one not set */
#endif
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
   awcl1++;                                 /* next character          */
   if (inl1 == 0) {                         /* was first digit         */
     *achl1 = (char) (inl2 << 4);
     inl1 = 1;                              /* comes second digit      */
     goto p_buco_usgr_user_ma24;            /* hex value               */
   }
   *achl1 |= inl2;
   achl1++;
   if (awcl1 >= awcl2) {                    /* was last digit          */
     if (achl1 >= achl2) {                  /* all fields checked      */
       dsl_usent.boc_with_macaddr = TRUE;
#ifndef OLD01
       goto p_buco_usgr_user_80;            /* value of user is valid  */
#else
       goto p_buco_usgr_user_60;            /* value of user is valid  */
#endif
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01224W Error element user_group \"%(ux)s\" user \"%(ux)s\" mac-address \"%(ux)s\" too long, invalid character at position=%d - ignored",
                     awcu_name_value, awcu_4_name_value, awcu4_value, awcl1 - awcu4_value + 1 );
     goto p_buco_usgr_user_80;              /* ignore value            */
   }
#ifndef OLD01
   if (*awcl1 == (HL_WCHAR) ':') {          /* compare separator       */
     awcl1++;
     goto p_buco_usgr_user_ma20;            /* next hexa digit         */
   }
#else
   if (*awcl1 == L':') {
     awcl1++;
     goto p_buco_usgr_user_ma20;            /* next hexa digit         */
   }
#endif
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01225W Error element user_group \"%(ux)s\" user \"%(ux)s\" mac-address \"%(ux)s\" invalid, required colon (:) to separate hex-digits at position=%d - ignored",
                   awcu_name_value, awcu_4_name_value, awcu4_value, awcl1 - awcu4_value + 1 );
   goto p_buco_usgr_user_80;                /* ignore value            */

   p_buco_usgr_user_ma80:                   /* no more input           */
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01226W Error element user_group \"%(ux)s\" user \"%(ux)s\" mac-address \"%(ux)s\" too short - ignored",
               awcu_name_value, awcu_4_name_value, awcu4_value );
   awcrl_user_var_tab[ DEF_XML_USGUS_MACADDR ] = NULL;  /* this one not set */

   p_buco_usgr_user_80:                     /* end of this user        */
   adunode4 = adunode4->getNextSibling();
   if (adunode4) goto p_buco_usgr_user_40;

#ifdef HL_SPECIAL_OFFER_CEBIT_04
   inl_count_user++;                        /* count the users         */
   if (inl_count_user > HL_SPECIAL_OFFER_CEBIT_04) {
     m_hlnew_printf( HLOG_XYZ1, "Special Offer - too many user defined - abend" );
     return FALSE;
   }
#endif
   dsl_usent.inc_len_name_bytes = (HL_WCSLEN( awcu_4_name_value ) + 1) * sizeof(HL_WCHAR);
   if (awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_PLAIN - 1 ]) {
     dsl_usent.inc_len_password_bytes = m_count_wchar_z_to_utf8( awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_PLAIN - 1 ] );
   } else if (achl_user_pwd_1) {            /* user password-encrypted */
     dsl_usent.inc_len_password_bytes = iml_len_user_pwd_1;  /* length of password */
   }
#ifdef B130429
   if (awcrl_user_var_tab[ DEF_XML_USGUS_DESKTOP_INETA - 1 ]) {
     achl1 = XMLString::transcode( (XMLCh *) awcrl_user_var_tab[ DEF_XML_USGUS_DESKTOP_INETA - 1 ] );
     dsl_usent.inc_len_target_bytes = strlen( achl1 ) + 1;
     dsl_usent.boc_with_target = TRUE;
   }
#endif
   if (awcrl_user_var_tab[ DEF_XML_USGUS_DESKTOP_INETA - 1 ]) {
     dsl_usent.inc_len_target_bytes
       = m_cpy_vx_vx( chrl_work1,
                      sizeof(chrl_work1),
                      ied_chs_idna_1,       /* IDNA RFC 3492 etc; Punycode */
                      awcrl_user_var_tab[ DEF_XML_USGUS_DESKTOP_INETA - 1 ],
                      -1,
                      ied_chs_utf_16 );     /* Unicode UTF-16 = WCHAR  */
     dsl_usent.boc_with_target = TRUE;
   }
#ifdef B100403
   if (awcrl_user_var_tab[ DEF_XML_USGUS_INETA_PPP - 1 ]) {
     bol1 = m_get_single_ineta( &inl1, &dsl_ineta_sret_ppp,
                                awcrl_user_var_tab[ DEF_XML_USGUS_INETA_PPP - 1 ], -1, ied_chs_utf_16 );
     if (bol1 == FALSE) {                   /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error element user_group \"%(ux)s\" user \"%(ux)s\" ineta-ppp \"%(ux)s\" invalid, error %d - ignored",
                       awcu_name_value, awcu_4_name_value, awcrl_user_var_tab[ DEF_XML_USGUS_INETA_PPP - 1 ], inl1 );
     } else {
       dsl_usent.imc_len_ineta_ppp = dsl_ineta_sret_ppp.usc_length;  /* length INETA PPP */
     }
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_INETA_APPL - 1 ]) {
     bol1 = m_get_single_ineta( &inl1, &dsl_ineta_sret_htcp,
                                awcrl_user_var_tab[ DEF_XML_USGUS_INETA_APPL - 1 ], -1, ied_chs_utf_16 );
     if (bol1 == FALSE) {                   /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error element user_group \"%(ux)s\" user \"%(ux)s\" ineta-appl \"%(ux)s\" invalid, error %d - ignored",
                       awcu_name_value, awcu_4_name_value, awcrl_user_var_tab[ DEF_XML_USGUS_INETA_APPL - 1 ], inl1 );
     } else {
       dsl_usent.imc_len_ineta_appl = dsl_ineta_sret_htcp.usc_length;  /* length INETA HTCP */
     }
   }
#endif
   if (awcrl_user_var_tab[ DEF_XML_USGUS_INETA_SIP_GW - 1 ]) {
     bol1 = m_get_single_ineta( &inl1, &dsl_ineta_sret_sip_gw,
                                awcrl_user_var_tab[ DEF_XML_USGUS_INETA_SIP_GW - 1 ], -1, ied_chs_utf_16 );
     if (bol1 == FALSE) {                   /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error element user_group \"%(ux)s\" user \"%(ux)s\" ineta-SIP-gateway \"%(ux)s\" invalid, error %d - ignored",
                       awcu_name_value, awcu_4_name_value, awcrl_user_var_tab[ DEF_XML_USGUS_INETA_SIP_GW - 1 ], inl1 );
     } else {
       dsl_usent.imc_len_ineta_sip_gw = dsl_ineta_sret_sip_gw.usc_length;  /* length INETA SIP gateway */
     }
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_SIP_FULLNAME - 1 ]) {
     dsl_usent.imc_len_sip_fullname
       = m_len_vx_vx( ied_chs_utf_8,
                      awcrl_user_var_tab[ DEF_XML_USGUS_SIP_FULLNAME - 1 ], -1, ied_chs_utf_16 );
     if (dsl_usent.imc_len_sip_fullname < 0) dsl_usent.imc_len_sip_fullname = 0;
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_SIP_IDENT - 1 ]) {
     dsl_usent.imc_len_sip_ident
       = m_len_vx_vx( ied_chs_utf_8,
                      awcrl_user_var_tab[ DEF_XML_USGUS_SIP_IDENT - 1 ], -1, ied_chs_utf_16 );
     if (dsl_usent.imc_len_sip_ident < 0) dsl_usent.imc_len_sip_ident = 0;
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_SIP_DISPLAY_N - 1 ]) {
     dsl_usent.imc_len_sip_display_number
       = m_len_vx_vx( ied_chs_utf_8,
                      awcrl_user_var_tab[ DEF_XML_USGUS_SIP_DISPLAY_N - 1 ], -1, ied_chs_utf_16 );
     if (dsl_usent.imc_len_sip_display_number < 0) dsl_usent.imc_len_sip_display_number = 0;
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_SIP_SHASE - 1 ]) {
     dsl_usent.imc_len_sip_shase
       = m_len_vx_vx( ied_chs_utf_8,
                      awcrl_user_var_tab[ DEF_XML_USGUS_SIP_SHASE - 1 ], -1, ied_chs_utf_16 );
     if (dsl_usent.imc_len_sip_shase < 0) dsl_usent.imc_len_sip_shase = 0;
   }
   iml1 = dsl_usent.inc_len_target_bytes;
   if (iml1 > 0) iml1++;
   iml_stor_1 = sizeof(struct dsd_user_entry)
                  + dsl_usent.inc_len_name_bytes
                  + dsl_usent.inc_len_password_bytes
                  + iml1
                  + dsl_usent.imc_len_ineta_sip_gw  /* length INETA SIP Gateway */
                  + dsl_usent.imc_len_sip_fullname  /* length SIP fullname */
                  + dsl_usent.imc_len_sip_ident   /* length SIP ident  */
                  + dsl_usent.imc_len_sip_display_number  /* length SIP display-number */
                  + dsl_usent.imc_len_sip_shase   /* length SIP shared secret */
                  + sizeof(void *) - 1;
   iml_stor_1 &= (0 - sizeof(void *));      /* for storage alignment   */
   iml1 = iml2 = 0;                         /* clear sum               */
   adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_ch;  /* get first entry  */
   while (adsl_user_ineta_c1_w1) {          /* loop over configured INETAs */
     if (adsl_user_ineta_c1_w1->imc_func == DEF_XML_USGUS_INETA_PPP) {  /* function of INETA PPP */
       iml1 += sizeof(struct dsd_ineta_single_1) + adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;
     } else {                               /* function of INETA appl  */
       iml2 += sizeof(struct dsd_ineta_single_1) + adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;
     }
     adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_w1->adsc_next;  /* get next in chain */
   }
   if (iml1 > 0) iml1 += sizeof(struct dsd_config_ineta_1);
   if (iml2 > 0) iml2 += sizeof(struct dsd_config_ineta_1);
   adsl_usent_w1 = (struct dsd_user_entry *) malloc( iml_stor_1 + iml1 + iml2 );
   memcpy( adsl_usent_w1, &dsl_usent, sizeof(struct dsd_user_entry) );
   memcpy( adsl_usent_w1 + 1, awcu_4_name_value, dsl_usent.inc_len_name_bytes );
   if (awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_PLAIN - 1 ]) {
     adsl_usent_w1->achc_password = (char *) (adsl_usent_w1 + 1) + dsl_usent.inc_len_name_bytes;  /* address of password */
     m_trans_wchar_z_to_utf8( adsl_usent_w1->achc_password,
                              awcrl_user_var_tab[ DEF_XML_USGUS_PASSWORD_PLAIN - 1 ] );
   } else if (achl_user_pwd_1) {            /* user password-encrypted */
     adsl_usent_w1->achc_password = (char *) (adsl_usent_w1 + 1) + dsl_usent.inc_len_name_bytes;  /* address of password */
     memcpy( adsl_usent_w1->achc_password, achl_user_pwd_1, dsl_usent.inc_len_password_bytes );
     free( achl_user_pwd_1 );               /* free temporary memory   */
   }
   if (awcrl_user_var_tab[ DEF_XML_USGUS_DESKTOP_INETA - 1 ]) {
     adsl_usent_w1->achc_target             /* address of target - INETA Desktop-on-Demand */
       = (char *) (adsl_usent_w1 + 1)
           + dsl_usent.inc_len_name_bytes
           + dsl_usent.inc_len_password_bytes;
#ifdef B130329
     memcpy( adsl_usent_w1->achc_target,
             achl1,
             dsl_usent.inc_len_target_bytes );
     XMLString::release( &achl1 );          /* free INETA again        */
#endif
     memcpy( adsl_usent_w1->achc_target,
             chrl_work1,
             dsl_usent.inc_len_target_bytes + 1 );
   }
   achl1 = (char *) (adsl_usent_w1 + 1)
                       + dsl_usent.inc_len_name_bytes
                       + dsl_usent.inc_len_password_bytes,
                       + dsl_usent.inc_len_target_bytes;
   if (dsl_usent.inc_len_target_bytes > 0) achl1++;  /* space for zero-terminate */
#ifdef B100403
   if (dsl_usent.imc_len_ineta_ppp) {       /* length INETA PPP        */
     memcpy( achl1,
             dsl_ineta_sret_ppp.chrc_ineta,
             dsl_usent.imc_len_ineta_ppp );
     achl1 += dsl_usent.imc_len_ineta_ppp;
   }
   if (dsl_usent.imc_len_ineta_appl) {      /* length INETA HTCP       */
     memcpy( achl1,
             dsl_ineta_sret_htcp.chrc_ineta,
             dsl_usent.imc_len_ineta_appl );
     achl1 += dsl_usent.imc_len_ineta_appl;
   }
#endif
   if (dsl_usent.imc_len_ineta_sip_gw) {    /* length INETA SIP gateway */
     memcpy( achl1,
             dsl_ineta_sret_sip_gw.chrc_ineta,
             dsl_usent.imc_len_ineta_sip_gw );
     adsl_usent_w1->achc_ineta_sip_gw = achl1;  /* address of INETA SIP Gateway */
     achl1 += dsl_usent.imc_len_ineta_sip_gw;
   }
   if (dsl_usent.imc_len_sip_fullname) {    /* length SIP fullname     */
     m_cpy_vx_vx( achl1, dsl_usent.imc_len_sip_fullname, ied_chs_utf_8,
                  awcrl_user_var_tab[ DEF_XML_USGUS_SIP_FULLNAME - 1 ], -1, ied_chs_utf_16 );
     adsl_usent_w1->achc_sip_fullname = achl1;  /* address of SIP fullname */
     achl1 += dsl_usent.imc_len_sip_fullname;
   }
   if (dsl_usent.imc_len_sip_ident) {
     m_cpy_vx_vx( achl1, dsl_usent.imc_len_sip_ident, ied_chs_utf_8,
                  awcrl_user_var_tab[ DEF_XML_USGUS_SIP_IDENT - 1 ], -1, ied_chs_utf_16 );
     adsl_usent_w1->achc_sip_ident = achl1;  /* address of SIP ident   */
     achl1 += dsl_usent.imc_len_sip_ident;
   }
   if (dsl_usent.imc_len_sip_display_number) {  /* length SIP display-number */
     m_cpy_vx_vx( achl1, dsl_usent.imc_len_sip_display_number, ied_chs_utf_8,
                  awcrl_user_var_tab[ DEF_XML_USGUS_SIP_DISPLAY_N - 1 ], -1, ied_chs_utf_16 );
     adsl_usent_w1->achc_sip_display_number = achl1;  /* address of SIP display-number */
     achl1 += dsl_usent.imc_len_sip_display_number;
   }
   if (dsl_usent.imc_len_sip_shase) {
     m_cpy_vx_vx( achl1, dsl_usent.imc_len_sip_shase, ied_chs_utf_8,
                  awcrl_user_var_tab[ DEF_XML_USGUS_SIP_SHASE - 1 ], -1, ied_chs_utf_16 );
     adsl_usent_w1->achc_sip_shase = achl1;  /* address of SIP shared secret */
   }
#define ADSL_INETA_SINGLE_1_G ((struct dsd_ineta_single_1 *) achl1)
   if (iml1) {                              /* with INETAs PPP         */
     adsl_usent_w1->adsc_config_ineta_1_ppp  /* configured INETA PPP   */
       = (struct dsd_config_ineta_1 *) ((char *) adsl_usent_w1 + iml_stor_1);
     adsl_usent_w1->adsc_config_ineta_1_ppp->imc_len_mem = iml1;  /* length of memory including this structure */
     achl1 = (char *) (adsl_usent_w1->adsc_config_ineta_1_ppp + 1);
     iml3 = 0;                              /* clear count INETA       */
     adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_ch;  /* get first entry  */
     while (adsl_user_ineta_c1_w1) {          /* loop over configured INETAs */
       if (adsl_user_ineta_c1_w1->imc_func == DEF_XML_USGUS_INETA_PPP) {  /* function of INETA PPP */
         ADSL_INETA_SINGLE_1_G->usc_family = adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_family;  /* family IPV4 / IPV6 */
         ADSL_INETA_SINGLE_1_G->usc_length = adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;  /* length of following address */
         memcpy( ADSL_INETA_SINGLE_1_G + 1,
                 adsl_user_ineta_c1_w1 + 1,
                 adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length );
         achl1 += sizeof(struct dsd_ineta_single_1) + adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;
         iml3++;                            /* count INETA             */
       }
       adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_w1->adsc_next;  /* get next in chain */
     }
     adsl_usent_w1->adsc_config_ineta_1_ppp->imc_no_ineta = iml3;  /* number of INETA */
   }
   if (iml2) {                              /* with INETAs appl        */
     adsl_usent_w1->adsc_config_ineta_1_appl  /* configured INETA appl */
       = (struct dsd_config_ineta_1 *) ((char *) adsl_usent_w1 + iml_stor_1 + iml1);
     adsl_usent_w1->adsc_config_ineta_1_appl->imc_len_mem = iml2;  /* length of memory including this structure */
     achl1 = (char *) (adsl_usent_w1->adsc_config_ineta_1_appl + 1);
     iml3 = 0;                              /* clear count INETA       */
     adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_ch;  /* get first entry  */
     while (adsl_user_ineta_c1_w1) {          /* loop over configured INETAs */
       if (adsl_user_ineta_c1_w1->imc_func == DEF_XML_USGUS_INETA_APPL) {  /* function of INETA appl */
         ADSL_INETA_SINGLE_1_G->usc_family = adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_family;  /* family IPV4 / IPV6 */
         ADSL_INETA_SINGLE_1_G->usc_length = adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;  /* length of following address */
         memcpy( ADSL_INETA_SINGLE_1_G + 1,
                 adsl_user_ineta_c1_w1 + 1,
                 adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length );
         achl1 += sizeof(struct dsd_ineta_single_1) + adsl_user_ineta_c1_w1->dsc_ineta_s1.usc_length;
         iml3++;                            /* count INETA             */
       }
       adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_w1->adsc_next;  /* get next in chain */
     }
     adsl_usent_w1->adsc_config_ineta_1_appl->imc_no_ineta = iml3;  /* number of INETA */
   }
#undef ADSL_INETA_SINGLE_1_G
   /* free INETAs                                                      */
   while (adsl_user_ineta_c1_ch) {          /* loop over configured INETAs */
     adsl_user_ineta_c1_w1 = adsl_user_ineta_c1_ch;  /* get first entry  */
     adsl_user_ineta_c1_ch = adsl_user_ineta_c1_ch->adsc_next;  /* remove from chain */
     free( adsl_user_ineta_c1_w1 );         /* free memory             */
   }
   adsl_usent_w1->adsc_next = dsl_usgro.adsc_usere;  /* get old chain  */
   dsl_usgro.adsc_usere = adsl_usent_w1;    /* set new chain           */

   p_buco_user_60:                          /* next child user-group   */
   adunode3 = adunode3->getNextSibling();
   if (adunode3) goto p_buco_user_20;

   if (dsl_usgro.adsc_usere == NULL) {      /* no user defined         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01227W Error user-group \"%(ux)s\" no user defined - ignored",
                 awcu_name_value );
     goto p_buco_user_68;
   }
   dsl_usgro.iec_ugd = ied_ugd_defined;     /* entry has been defined  */

   p_buco_user_68:                          /* create entry user-group */
   if (awcu_name_value) {
     dsl_usgro.inc_len_name = (HL_WCSLEN( awcu_name_value ) + 1) * sizeof(HL_WCHAR);
   }
   inl1 = dsl_usgro.inc_len_name;           /* length for malloc()     */
   if (dsl_usgro.inc_no_seli) {             /* with server lists       */
     inl1 = (inl1 + sizeof(void *) - 1) & (0 - sizeof(void *));
     inl1 += dsl_usgro.inc_no_seli * sizeof(void *);
   }
   adsl_usgro_w1 = (struct dsd_user_group *) malloc( sizeof(struct dsd_user_group)
                                                       + inl1 );
   memcpy( adsl_usgro_w1, &dsl_usgro, sizeof(struct dsd_user_group) );
   if (dsl_usgro.inc_len_name) {
     memcpy( adsl_usgro_w1 + 1, awcu_name_value, dsl_usgro.inc_len_name );
   }
   if (dsl_usgro.inc_no_seli) {             /* with server lists       */
     achl1 = (char *) (adsl_usgro_w1 + 1)
                         + ((dsl_usgro.inc_len_name + sizeof(void *) - 1)
                              & (0 - sizeof(void *)));
     adsl_usgro_w1->adsrc_server_list_1 = (struct dsd_server_list_1 **) achl1;  /* list of servers */
     avpl_selserv_ch_1 = avpl_selserv_chain;
     do {                                   /* loop over total chain   */
       *((void **) achl1) = *(avpl_selserv_ch_1 + 1);
       achl1 += sizeof(void *);
       avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;
     } while (avpl_selserv_ch_1);
   }
   adsl_usgro_w1->adsc_usgro_node = adunode2;
   adsl_usgro_w1->adsc_next = dsl_cs.adsc_usgro_anchor;  /* get old chain */
   dsl_cs.adsc_usgro_anchor = adsl_usgro_w1;  /* set new chain          */
   /* free chain of server list                                        */
   while (avpl_selserv_chain) {
     avpl_selserv_ch_1 = avpl_selserv_chain;
     avpl_selserv_chain = (void **) *avpl_selserv_chain;
     free( avpl_selserv_ch_1 );
   }

   p_buco_user_80:                          /* sslgate-c next child    */
   adunode2 = adunode2->getNextSibling();
   if (adunode2) goto p_buco_user_04;

/* UUUU 12.10.04 - end */
// p_buco_sect_40:                          /* start with connections  */
   dsl_cs.adsc_node_conf = adunode1->getFirstChild();
   if (dsl_cs.adsc_node_conf == NULL) {
     m_hlnew_printf( HLOG_EMER1, "HWSPXMLC01230W Error element name \"sslgate-configuration\" has no child - logic error" );
     return FALSE;
   }
   dsl_cs.achc_msgtext_1 = "";              /* message text 1          */
#ifndef HL_UNIX
   dsl_cs.awcc_msgtext_1 = (HL_WCHAR *) L"";  /* message text variable 1 */
#else
   dsl_cs.awcc_msgtext_1 = &wcs_empty;      /* message text variable 1 */
#endif
   dsl_cs.achc_msgtext_2 = (char *) chrs_msgtxt_co;  /* message text 2 */

   p_buco_sect_44:                          /* next child of sslgate-c */
   if (dsl_cs.adsc_node_conf == adunode_general) goto p_buco_sect_80;
#ifdef B080324
   if (dsl_cs.adsc_node_conf == adunode_blade_control) goto p_buco_sect_80;
#endif
   if (dsl_cs.adsc_node_conf == adsl_node_ocsp) goto p_buco_sect_80;
   if (dsl_cs.adsc_node_conf == adsl_node_csssl) goto p_buco_sect_80;
   if (dsl_cs.adsc_node_conf == adsl_node_confp) goto p_buco_sect_80;
#ifdef OLD_1112
   adsl_raent_1 = dsl_cs.adsc_raent_anchor;  /* get chain of already def */
   while (adsl_raent_1) {                   /* loop over total chain   */
     if (dsl_cs.adsc_node_conf == adsl_raent_1->adsc_radius_node) goto p_buco_sect_80;
     adsl_raent_1 = adsl_raent_1->adsc_next;  /* get next in chain     */
   }
#endif
   adsl_targfi_dummy_w1 = adsl_targfi_dummy_anchor;  /* get anchor chain target-filter */
   while (adsl_targfi_dummy_w1) {           /* loop over all target-filter */
     if (dsl_cs.adsc_node_conf == adsl_targfi_dummy_w1->adsc_node_targfi_d) goto p_buco_sect_80;
     adsl_targfi_dummy_w1 = adsl_targfi_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_usgro_w1 = dsl_cs.adsc_usgro_anchor;  /* get chain of already def */
   while (adsl_usgro_w1) {                   /* loop over total chain   */
     if (dsl_cs.adsc_node_conf == adsl_usgro_w1->adsc_usgro_node) goto p_buco_sect_80;
     adsl_usgro_w1 = adsl_usgro_w1->adsc_next;  /* get next in chain   */
   }
   adsl_server_list_1_w1 = dsl_cs.adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_server_list_1_w1) {           /* loop over total chain   */
     if (dsl_cs.adsc_node_conf == adsl_server_list_1_w1->adsc_seli_node) goto p_buco_sect_80;
     adsl_server_list_1_w1 = adsl_server_list_1_w1->adsc_next;  /* get next in chain */
   }
   if (dsl_cs.adsc_node_conf == adsl_node_cluster) goto p_buco_sect_80;  /* cluster defined */
   adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_anchor;  /* get first element LDAP template */
   while (adsl_ldap_t_dummy_w1) {           /* loop over all LDAP templates */
     if (dsl_cs.adsc_node_conf == adsl_ldap_t_dummy_w1->adsc_node_ldap_t_d) goto p_buco_sect_80;  /* LDAP template defined */
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_anchor;  /* get first element LDAP service */
   while (adsl_ldap_s_dummy_w1) {           /* loop over all LDAP services */
     if (dsl_cs.adsc_node_conf == adsl_ldap_s_dummy_w1->adsc_node_ldap_s_d) goto p_buco_sect_80;  /* LDAP service defined */
     adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_service_dummy_w1 = adsl_service_dummy_anchor;  /* get first element service */
   while (adsl_service_dummy_w1) {          /* loop over all services  */
     if (dsl_cs.adsc_node_conf == adsl_service_dummy_w1->adsc_node_service_d) goto p_buco_sect_80;  /* service defined */
     adsl_service_dummy_w1 = adsl_service_dummy_w1->adsc_next;  /* get next in chain */
   }
   adsl_sc_w1 = adsl_sc_anchor;             /* get chain configured nodes */
   while (adsl_sc_w1) {                     /* loop over chain configured nodes */
     if (dsl_cs.adsc_node_conf == adsl_sc_w1->adsc_node) goto p_buco_sect_80;  /* node defined */
     if (adunode2 == adsl_sc_w1->adsc_node) goto p_buco_seli_80;  /* node defined */
     adsl_sc_w1 = adsl_sc_w1->adsc_next;    /* get next in chain       */
   }
   if (dsl_cs.adsc_node_conf->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_sect_80;
   awcu2 = (HL_WCHAR *) dsl_cs.adsc_node_conf->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 found section %(ux)s", awcu2 );
#endif
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu2, "connection" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01100W \"sslgate-configuration\" has invalid child \"%(ux)s\" - ignored",
                     awcu2 );
     goto p_buco_sect_80;
   }
#else
   if (wcscmp( awcu2, L"connection" )) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01100W \"sslgate-configuration\" has invalid child \"%(ux)s\" - ignored",
                     awcu2 );
     goto p_buco_sect_80;
   }
#endif

   /* process sslgate-c connection                                     */

   /* end of this connection reached                                   */
   bol1 = m_conf_conn( &dsl_cs );           /* call subroutine         */
   if (bol1 == FALSE) {                     /* no valid connection     */
     goto p_buco_conn_92;                   /* free all set resources  */
   }
#ifdef DEBUG_120118_01                      /* insure++ lost block     */
   if (   (dsl_cs.dsc_server_conf_1_c.inc_no_sdh < 0)  /* check number Server-Data-Hook */
       || (dsl_cs.dsc_server_conf_1_c.inc_no_sdh > 8)) {  /* check number Server-Data-Hook */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d l%05d logic error Server-Data-Hook-no DEBUG_120118_01",
                     MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ), __LINE__ );
   }
#endif
   if (dsl_cs.achc_fconfig == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01149W Error element connection name \"%(ux)s\" SSL-config-file missing - connection ignored",
                     dsl_cs.awcc_name_value );
     goto p_buco_conn_92;                   /* free all set resources  */
   }
   if (dsl_cs.achc_fcertdb == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01150W Error element connection name \"%(ux)s\" SSL-certdb-file missing - connection ignored",
                     dsl_cs.awcc_name_value );
     goto p_buco_conn_92;                   /* free all set resources  */
   }
   if (dsl_cs.achc_password == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01151W Error element connection name \"%(ux)s\" SSL-password-file missing - connection ignored",
                     dsl_cs.awcc_name_value );
     goto p_buco_conn_92;                   /* free all set resources  */
   }
#ifdef D_FUNC01
   if (ienuauty == en_auty_none) {          /* no authentication requ  */
     if (awcu_auth_config_file) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01152W Error element connection name \"%(ux)s\" no authentication, but auth-config-file set \"%(ux)s\" - ignored",
                       awcu_name_value, awcu_auth_config_file );
     }
     if (ienuatfa != en_atfa_nothing) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01153W Error element connection name \"%(ux)s\" no authentication, but authparm1 set - ignored",
                       awcu_name_value );
     }
   }
#endif
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "main check process SSL / subroutine" );
#endif
#ifdef TRACEHL_050630
   m_hlnew_printf( HLOG_TRACE1, "l%05d main check call m_se_registerconfig adsp_loconf_1_fill->adsc_hl_ocsp_d_1=%p",
                   __LINE__, adsp_loconf_1_fill->adsc_hl_ocsp_d_1 );
#endif
   bol1 = FALSE;                            /* no external random generator */
#ifdef HL_UNIX
   if (adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name) {  /* external Random Generator */
     bol1 = TRUE;                           /* use external random generator */
   }
#endif
   inl1 = m_se_registerconfig( dsl_cs.achc_fconfig, dsl_cs.unc_len_fconfig,
                               dsl_cs.achc_fcertdb, dsl_cs.unc_len_fcertdb,
                               dsl_cs.achc_password, dsl_cs.unc_len_password,
                               TRUE,
                               adsp_loconf_1_fill->adsc_hl_ocsp_d_1,  /* OCSP */
                               &m_cdaux,    /* subroutine              */
                               NULL,        /* vpp_userfld             */
                               &dsl_cs.dsc_gate.vpc_configid,  /* address config id */
                               bol1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "main check returned SSL / ireturn = %d", inl1 );
#endif
#ifndef B130121
   memset( dsl_cs.achc_fconfig, 0, dsl_cs.unc_len_fconfig );
#endif
   free( dsl_cs.achc_fconfig );
   dsl_cs.achc_fconfig = NULL;
#ifndef B130121
   memset( dsl_cs.achc_fcertdb, 0, dsl_cs.unc_len_fcertdb );
#endif
   free( dsl_cs.achc_fcertdb );
   dsl_cs.achc_fcertdb = NULL;
#ifndef B130121
   memset( dsl_cs.achc_password, 0, dsl_cs.unc_len_password );
#endif
   free( dsl_cs.achc_password );
   dsl_cs.achc_password = NULL;
   if (inl1) {
     bol1 = m_rerrm1( inl1, &achl1, &inl2, chrg_ssl_error );
     if (bol1 == FALSE) {                   /* subroutine failed       */
       achl1 = "error-message not available";
       inl2 = strlen( achl1 );
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01154W Error element connection name \"%(ux)s\" SSL Error %d %.*s - connection ignored",
                     dsl_cs.awcc_name_value, inl1, inl2, achl1 );
     goto p_buco_conn_92;                   /* continue                */
   }
#ifdef D_FUNC01
   aud_auth_startup = 0;                    /* returned from auth sta  */
   if (ienuauty != en_auty_none) {          /* authentication required */
     au1 = 0;
     if (awcu_auth_config_file) {
       au1 = XMLString::transcode( (XMLCh *) awcu_auth_config_file );
     }
     switch (ienuauty) {                    /* type of authentication  */
       case en_auty_ace:
         aud_auth_startup = cl_wsatace::HL_AUTH_STARTUP( au1,
                                                         chrl_work1 );
         break;
       case en_auty_safeword:
         aud_auth_startup = cl_wsatswec::HL_AUTH_STARTUP( au1,
                                                          chrl_work1 );
         break;
     }
     if (awcu_auth_config_file) {
       XMLString::release( &au1 );          /* free file name again    */
     }
     if (aud_auth_startup == 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01155W Error element connection name \"%(ux)s\" HL_AUTH_STARTUP Error %s - connection ignored",
                       awcu_name_value, chrl_work1 );
       goto p_buco_conn_92;                 /* continue                */
     }
   }
#endif
   /* check HTTP-redirect-library - load library                       */
   if (dsl_cs.adsc_hrl_def) {               /* HTTP-redirect-library definition */
     dsl_cs.achc_msgtext_3 = " HTTP-redirect-library";
     iml1 = 0;                              /* clear flag              */
     if (dsl_cs.avpc_usgro_chain) {         /* with user groups        */
       iml1 |= DEF_CLIB1_CONF_USERLI;
     }
#ifdef B111222
     if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
     }
#endif
#ifndef OLD_1112
     if (dsl_cs.dsc_gate.imc_no_radius) {   /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
       if (dsl_cs.dsc_gate.imc_no_radius > 1) {  /* multiple radius server defined */
         iml1 |= DEF_CLIB1_CONF_DYN_RADIUS;
       }
     }
#endif
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_KRB5;         /* Kerberos 5 KDC defined  */
       if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
         iml1 |= DEF_CLIB1_CONF_DYN_KRB5;   /* dynamic Kerberos 5 KDC defined */
       }
     }
     iml2 = 0;
     if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
         && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (iml2) {                            /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_LDAP;         /* LDAP group defined      */
       if (iml2 > 1) {                      /* number of LDAP groups   */
         iml1 |= DEF_CLIB1_CONF_DYN_LDAP;   /* dynamic LDAP groups defined */
       }
     }
     bol1 = m_conf_hrl_ele( &dsl_cs, iml1 );  /* process the configuration */
     if (bol1 == FALSE) {                   /* returned error          */
       free( dsl_cs.adsc_hrl_def );         /* entry needed no more   */
       dsl_cs.adsc_hrl_def = NULL;          /* no HTTP-redirect-library defined */
     }
   }
#ifdef B130228
   /* check plain-HTTP-library - load library                          */
   if (dsl_cs.adsc_phl_def) {               /* plain-HTTP-library definition */
     dsl_cs.achc_msgtext_3 = " plain-HTTP-library";
     iml1 = 0;                              /* clear flag              */
     if (dsl_cs.avpc_usgro_chain) {         /* with user groups        */
       iml1 |= DEF_CLIB1_CONF_USERLI;
     }
#ifdef B111222
     if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
     }
#endif
#ifndef OLD_1112
     if (dsl_cs.dsc_gate.imc_no_radius) {   /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
       if (dsl_cs.dsc_gate.imc_no_radius > 1) {  /* multiple radius server defined */
         iml1 |= DEF_CLIB1_CONF_DYN_RADIUS;
       }
     }
#endif
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_KRB5;         /* Kerberos 5 KDC defined  */
       if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
         iml1 |= DEF_CLIB1_CONF_DYN_KRB5;   /* dynamic Kerberos 5 KDC defined */
       }
     }
     iml2 = 0;
     if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
         && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (iml2) {                            /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_LDAP;         /* LDAP group defined      */
       if (iml2 > 1) {                      /* number of LDAP groups   */
         iml1 |= DEF_CLIB1_CONF_DYN_LDAP;   /* dynamic LDAP groups defined */
       }
     }
     bol1 = m_conf_phl_ele( &dsl_cs, iml1 );  /* process the configuration */
     if (bol1 == FALSE) {                   /* returned error          */
       free( dsl_cs.adsc_phl_def );         /* entry needed no more   */
       dsl_cs.adsc_phl_def = NULL;          /* no plain-HTTP-library defined */
     }
   }
#endif
   if (dsl_cs.adsc_phl_chain) {             /* with plain-HTTP-libraries */
     iml1 = 0;                              /* clear flag              */
     if (dsl_cs.avpc_usgro_chain) {         /* with user groups        */
       iml1 |= DEF_CLIB1_CONF_USERLI;
     }
#ifdef B111222
     if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
     }
#endif
#ifndef OLD_1112
     if (dsl_cs.dsc_gate.imc_no_radius) {   /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
       if (dsl_cs.dsc_gate.imc_no_radius > 1) {  /* multiple radius server defined */
         iml1 |= DEF_CLIB1_CONF_DYN_RADIUS;
       }
     }
#endif
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_KRB5;         /* Kerberos 5 KDC defined  */
       if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
         iml1 |= DEF_CLIB1_CONF_DYN_KRB5;   /* dynamic Kerberos 5 KDC defined */
       }
     }
     iml2 = 0;
     if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
         && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (iml2) {                            /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_LDAP;         /* LDAP group defined      */
       if (iml2 > 1) {                      /* number of LDAP groups   */
         iml1 |= DEF_CLIB1_CONF_DYN_LDAP;   /* dynamic LDAP groups defined */
       }
     }
     dsl_cs.dsc_gate.imc_no_phl = m_conf_phl_load( &dsl_cs, iml1 );  /* call subroutine */
   }
   /* check authentication-library - load library                      */
   if (dsl_cs.adsc_hobwspat3_def_1) {       /* authentication library definition */
     dsl_cs.achc_msgtext_3 = " authentication-library";
     iml1 = 0;                              /* clear flag              */
     if (dsl_cs.avpc_usgro_chain) {         /* with user groups        */
       iml1 |= DEF_CLIB1_CONF_USERLI;
     }
#ifdef B111222
     if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
     }
#endif
#ifndef OLD_1112
     if (dsl_cs.dsc_gate.imc_no_radius) {   /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
       if (dsl_cs.dsc_gate.imc_no_radius > 1) {  /* multiple radius server defined */
         iml1 |= DEF_CLIB1_CONF_DYN_RADIUS;
       }
     }
#endif
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_KRB5;         /* Kerberos 5 KDC defined  */
       if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
         iml1 |= DEF_CLIB1_CONF_DYN_KRB5;   /* dynamic Kerberos 5 KDC defined */
       }
     }
     iml2 = 0;
     if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
         && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (iml2) {                            /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_LDAP;         /* LDAP group defined      */
       if (iml2 > 1) {                      /* number of LDAP groups   */
         iml1 |= DEF_CLIB1_CONF_DYN_LDAP;   /* dynamic LDAP groups defined */
       }
     }
     bol1 = m_conf_hobwspat3( &dsl_cs, iml1 );  /* process the configuration */
     if (bol1 == FALSE) {                   /* returned error          */
       free( dsl_cs.adsc_hobwspat3_def_1 );  /* entry needed no more   */
       dsl_cs.adsc_hobwspat3_def_1 = NULL;  /* no authentication library defined */
     }
   }
   /* load entries server-data-hook                                    */
   if (dsl_cs.adsc_sdhlib_chain) {          /* with Server-Data-Hook   */
     iml1 = 0;                              /* clear flag              */
     if (dsl_cs.avpc_usgro_chain) {         /* with user groups        */
       iml1 |= DEF_CLIB1_CONF_USERLI;
     }
#ifdef B111222
     if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
     }
#endif
#ifndef OLD_1112
     if (dsl_cs.dsc_gate.imc_no_radius) {   /* radius server defined   */
       iml1 |= DEF_CLIB1_CONF_RADIUS;
       if (dsl_cs.dsc_gate.imc_no_radius > 1) {  /* multiple radius server defined */
         iml1 |= DEF_CLIB1_CONF_DYN_RADIUS;
       }
     }
#endif
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_KRB5;         /* Kerberos 5 KDC defined  */
       if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
         iml1 |= DEF_CLIB1_CONF_DYN_KRB5;   /* dynamic Kerberos 5 KDC defined */
       }
     }
     iml2 = 0;
     if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
         && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
       iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
     }
     if (iml2) {                            /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_LDAP;         /* LDAP group defined      */
       if (iml2 > 1) {                      /* number of LDAP groups   */
         iml1 |= DEF_CLIB1_CONF_DYN_LDAP;   /* dynamic LDAP groups defined */
       }
     }
     dsl_cs.dsc_server_conf_1_c.inc_no_sdh = m_conf_sdh_load( &dsl_cs, iml1 );  /* call subroutine */
     if (   (dsl_cs.dsc_server_conf_1_c.boc_sdh_reflect)  /* only Server-Data-Hook */
         && (dsl_cs.dsc_server_conf_1_c.inc_no_sdh == 0)) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01154W Error element connection name \"%(ux)s\" no valid Server-Data-Hook found - connection ignored",
                       dsl_cs.awcc_name_value );
       goto p_buco_conn_92;                 /* continue                */
     }
   }
#ifdef B141227
#ifndef B080407
   adsl_listen_ineta_1_w1 = m_get_listen_ineta( dsl_cs.awcc_in_ineta, -1, ied_chs_utf_16 );
   if (adsl_listen_ineta_1_w1 == NULL) {    /* no valid INETA found    */
     awcl1 = dsl_cs.awcc_in_ineta;
     if (awcl1 == NULL) awcl1 = (HL_WCHAR *) wcrs_const_any;
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01156W Error element connection name \"%(ux)s\" gate-in-ineta \"%(ux)s\" not valid - connection ignored",
                     dsl_cs.awcc_name_value, awcl1 );
     goto p_buco_conn_92;                   /* continue                */
   }
#endif
#endif
   if (dsl_cs.adsc_cli1 == NULL) {          /* no gate-in-ineta configured */
     adsl_listen_ineta_1_w1 = m_get_listen_ineta( NULL, -1, ied_chs_utf_16 );
   } else {
     adsl_listen_ineta_1_w1 = m_get_sum_chain_listen_ineta( dsl_cs.adsc_cli1 );
   }
   if (adsl_listen_ineta_1_w1 == NULL) {    /* no valid INETA found    */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01192W Error element connection name \"%(ux)s\" no valid gate-in-ineta found - connection ignored",
                     dsl_cs.awcc_name_value );
     goto p_buco_conn_92;                   /* continue                */
   }
   /* configuration for gateway is valid                               */
#ifndef OLD_1305
   iml1 = MAX_CERT_DNS_NAMES;               /* maximum number of SSL certificate DNS names */
   achl1 = (char *) dsrl_ucs_cert_dns_names;
   achl2 = NULL;                            /* no memory allocated     */
#define ADSL_UCS_CERT_DNS_NAME ((struct dsd_unicode_string *) achl1)

   p_cert_name_00:                          /* retrieve SSL certificate DNS names */
   iml2 = m_get_ssl_server_cert_dns_names( dsl_cs.dsc_gate.vpc_configid, ADSL_UCS_CERT_DNS_NAME, iml1 );
   if (iml2 <= 0) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01157W line=%d col=%d connection name \"%(ux)s\" could not retrieve DNS names from SSL certificate",
                     MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                     dsl_cs.awcc_name_value );
     goto p_cert_name_80;                   /* end of retrieve SSL certificate DNS names */
   }
   if (iml2 > iml1) {                       /* more than default storage */
     if (achl2) free( achl2 );
     achl1 = achl2 = (char *) malloc( iml2 * sizeof(struct dsd_unicode_string) );
     goto p_cert_name_00;                   /* retrieve SSL certificate DNS names */
   }
   iml1 = 0;                                /* clear index             */
   do {                                     /* loop over certificate names */
     adsl_domain_info_def_1_w1 = dsl_cs.adsc_domain_info_def_1_ch;  /* get chain of domain-information definition */
     while (adsl_domain_info_def_1_w1) {    /* loop over chain of domain-information definition */
       iml3 = 0;
       while (iml3 < adsl_domain_info_def_1_w1->adsc_domain_info->imc_no_dns_ineta) {  /* number of server-DNS-ineta */
         bol_rc = m_cmp_ucs_ucs( &iml_cmp,
                                 adsl_domain_info_def_1_w1->adsc_domain_info->adsc_ucs_dns_ineta + iml3,  /* array of server-DNS-ineta */
                                 ADSL_UCS_CERT_DNS_NAME + iml1 );
         if ((bol_rc) && (iml_cmp == 0)) {  /* strings are equal       */
           m_hlnew_printf( HLOG_INFO1, "HWSPXMLC01158I line=%d col=%d connection name \"%(ux)s\" certificate DNS-name %d. %(ucs)s - referenced in domain-information line=%d col=%d.",
                           MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                           dsl_cs.awcc_name_value, iml1 + 1, ADSL_UCS_CERT_DNS_NAME + iml1,
                           adsl_domain_info_def_1_w1->imc_xml_lineno,
                           adsl_domain_info_def_1_w1->imc_xml_col );
           break;
         }
         iml3++;                            /* increment index         */
       }
       if (iml3 < adsl_domain_info_def_1_w1->adsc_domain_info->imc_no_dns_ineta) break;  /* number of server-DNS-ineta */
       adsl_domain_info_def_1_w1 = adsl_domain_info_def_1_w1->adsc_next;  /* get next in chain */
     }
     if (adsl_domain_info_def_1_w1 == NULL) {  /* DNS name not found in any domain-information */
       m_hlnew_printf( HLOG_INFO1, "HWSPXMLC01159I line=%d col=%d connection name \"%(ux)s\" certificate DNS-name %d. %(ucs)s - not referenced in any domain-information",
                       MAC_XML_LINENO( dsl_cs.adsc_node_conf ), MAC_XML_COL( dsl_cs.adsc_node_conf ),
                       dsl_cs.awcc_name_value, iml1 + 1, ADSL_UCS_CERT_DNS_NAME + iml1 );
     }
     iml1++;
   } while (iml1 < iml2);

   p_cert_name_80:                          /* end of retrieve SSL certificate DNS names */
   if (achl2) free( achl2 );
#endif
   dsl_cs.dsc_gate.adsc_targfi_1 = dsl_cs.dsc_server_conf_1_c.adsc_targfi_1;  /* set target-filter */
   dsl_cs.dsc_server_conf_1_c.adsc_targfi_1 = NULL;  /* not in server-entry */
   inl1 = (HL_WCSLEN( dsl_cs.awcc_name_value ) + 1) * sizeof(HL_WCHAR);
#ifdef B111222
   inl2 = 0;
   avpl_radius_ch_1 = dsl_cs.avpc_radius_chain;  /* get anchor         */
   while (avpl_radius_ch_1) {               /* loop over total chain   */
     inl2++;                                /* count this entry        */
     avpl_radius_ch_1 = (void **) *avpl_radius_ch_1;  /* next in chain */
   }
#endif
   inl3 = 0;                                /* count user-groups       */
   avpl_usgro_ch_1 = dsl_cs.avpc_usgro_chain;  /* get anchor           */
   while (avpl_usgro_ch_1) {                /* loop over total chain   */
     inl3++;                                /* count this entry        */
     avpl_usgro_ch_1 = (void **) *avpl_usgro_ch_1;  /* next in chain   */
   }
   inl4 = 0;                                /* count server-lists      */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "l%05d p_buco_conn_88 dsl_cs.avpc_selserv_chain=%p",
                   __LINE__, dsl_cs.avpc_selserv_chain );
#endif
   avpl_selserv_ch_1 = dsl_cs.avpc_selserv_chain;  /* get anchor       */
   while (avpl_selserv_ch_1) {              /* loop over total chain   */
     inl4++;                                /* count this entry        */
     avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;  /* next in chain */
   }
// to-do 22.12.11 KB check not explicit configured makes no sense
   if (   (dsl_cs.boc_dyn_radius)           /* dynamic-radius          */
       && (dsl_cs.dsc_gate.imc_no_radius == 0)) {  /* not explicit configured */
     adsl_radius_group_w1 = dsl_cs.adsc_loconf_1_fill->adsc_radius_group;  /* chain Radius groups */
     while (adsl_radius_group_w1) {         /* loop over total chain   */
       dsl_cs.dsc_gate.imc_no_radius++;     /* count this entry        */
       adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
     }
   }
   if (   (dsl_cs.boc_dyn_krb5)             /* dynamic-Kerberos-5-KDC  */
       && (dsl_cs.dsc_gate.imc_no_krb5_kdc == 0)) {  /* not explicit configured */
     adsl_krb5_kdc_1_w1 = dsl_cs.adsc_loconf_1_fill->adsc_krb5_kdc_1;  /* chain of Kerberos 5 KDC */
     while (adsl_krb5_kdc_1_w1) {           /* loop over total chain   */
       dsl_cs.dsc_gate.imc_no_krb5_kdc++;   /* count this entry        */
       adsl_krb5_kdc_1_w1 = adsl_krb5_kdc_1_w1->adsc_next;  /* get next in chain */
     }
   }
   if (   (dsl_cs.boc_dyn_ldap)             /* dynamic-LDAP            */
       && (dsl_cs.dsc_gate.imc_no_ldap_group == 0)) {  /* not explicit configured */
     adsl_ldap_group_w1 = dsl_cs.adsc_loconf_1_fill->adsc_ldap_group;  /* chain of LDAP groups */
     while (adsl_ldap_group_w1) {           /* loop over total chain   */
       dsl_cs.dsc_gate.imc_no_ldap_group++;  /* count this entry       */
       adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
     }
   }
   if (dsl_cs.awcc_node_tm_url) {           /* with permanently-moved-URL */
     dsl_cs.dsc_gate.imc_len_permmov_url = m_len_vx_vx( ied_chs_utf_8, dsl_cs.awcc_node_tm_url, -1, ied_chs_utf_16 );  /* length of URL bytes */
   }
   inl5 = 0;                                /* no server yet           */
   if (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H) {
     inl5 = sizeof(struct dsd_server_conf_1);
     if (dsl_cs.awcc_node_serverineta) {    /* value serverineta       */
       dsl_cs.dsc_server_conf_1_c.imc_len_dns_name  /* length of DNS name */
         = m_len_vx_vx( ied_chs_ascii_850, dsl_cs.awcc_node_serverineta, -1, ied_chs_utf_16 );  /* add length of DNS-name */
       inl5 += dsl_cs.dsc_server_conf_1_c.imc_len_dns_name;
     }
#ifdef TRY_090425
     dsl_cs.dsc_server_conf_1_c.chrc_ppp_auth[0] = (unsigned char) ied_pppa_pass_thru;  /* pass-thru */
#endif
   }
   inl6 = 0;
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
     inl6 = sizeof(struct dsd_sdh_work_1);
   }
#ifndef B130529
   dsl_cs.dsc_gate.imc_no_domain_info = 0;  /* number of domain informations */
   /* count resources domain-information                               */
   adsl_domain_info_def_1_w1 = dsl_cs.adsc_domain_info_def_1_ch;  /* get chain of domain-information definition */
   while (adsl_domain_info_def_1_w1) {  /* loop over chain of domain-information definition */
     dsl_cs.dsc_gate.imc_no_domain_info++;  /* number of domain informations */
     adsl_domain_info_def_1_w1 = adsl_domain_info_def_1_w1->adsc_next;  /* get next in chain */
   }
#endif
   iml_stor_1 = sizeof(struct dsd_gate_1)
                  + ((inl1 + sizeof(void *) - 1) & (0 - sizeof(void *)))
#ifndef B130529
                  + dsl_cs.dsc_gate.imc_no_domain_info * sizeof(void *)  /* number of domain informations */
#endif
                  + dsl_cs.dsc_gate.imc_no_phl * sizeof(struct dsd_phl_conf_1)
#ifdef B111222
                  + (inl2 + inl3 + inl4 + dsl_cs.dsc_gate.imc_no_krb5_kdc + dsl_cs.dsc_gate.imc_no_ldap_group)
                      * sizeof(void *)
#else
                  + (inl3 + inl4 + dsl_cs.dsc_gate.imc_no_radius + dsl_cs.dsc_gate.imc_no_krb5_kdc + dsl_cs.dsc_gate.imc_no_ldap_group)
                      * sizeof(void *)
#endif
                  + ((dsl_cs.dsc_gate.imc_len_permmov_url + sizeof(void *) - 1) & (0 - sizeof(void *)))  /* length URL in bytes */
                  + inl5
                  + dsl_cs.dsc_server_conf_1_c.inc_no_sdh * sizeof(struct dsd_sdh_work_1)
                  + inl6
                  + sizeof(void *) - 1;
   iml_stor_1 &= (0 - sizeof(void *));      /* for storage alignment   */
   iml1 = adsl_listen_ineta_1_w1->imc_no_ineta * sizeof(struct dsd_gate_listen_1);
   if ((dsl_cs.dsc_gate.imc_permmov_from_port >= 0) && (dsl_cs.dsc_gate.imc_permmov_from_port != dsl_cs.dsc_gate.imc_gateport)) {
     iml1 <<= 1;                            /* double the value        */
   }
   adsl_gate_w1 = (struct dsd_gate_1 *) malloc( iml_stor_1 + iml1 );
#ifdef TRACEHL_STOR_1
   m_hlnew_printf( HLOG_TRACE1, "l%05d p_buco_sect_44 malloc( %d/0X%08X ) returned %p / 0X%08X / 0X%08X.",
                   __LINE__, iml_stor_1 + iml1, iml_stor_1 + iml1, adsl_gate_w1, iml_stor_1, iml1 );
#endif
   memcpy( adsl_gate_w1, &dsl_cs.dsc_gate, sizeof(dsd_gate_1) );
#ifdef B111219
   memcpy( &adsl_gate_w1->dsc_radius_conf,
           &dsl_cs.dsc_radius_conf,
           sizeof(struct dsd_radius_conf) );  /* radius configuration  */
#endif
   adsl_gate_w1->adsc_loconf_1 = adsp_loconf_1_fill;  /* set loaded conf */
   adsl_gate_w1->inc_len_name = inl1;       /* length name in bytes    */
#ifdef B111222
   adsl_gate_w1->imc_no_radius = inl2;      /* number of radius groups */
#endif
   adsl_gate_w1->inc_no_usgro = inl3;       /* number of user groups   */
   adsl_gate_w1->inc_no_seli = inl4;        /* number of server lists  */
   memcpy( adsl_gate_w1 + 1, dsl_cs.awcc_name_value, inl1 );
   achl1 = (char *) (adsl_gate_w1 + 1) + ((inl1 + sizeof(void *) - 1) & (0 - sizeof(void *)));
#ifdef OLD_1112
   if (dsl_cs.avpc_radius_chain) {          /* with radius             */
     adsl_gate_w1->adsrc_radius_entry = (struct dsd_radius_entry **) achl1;  /* Radius entries */
     avpl_radius_ch_1 = dsl_cs.avpc_radius_chain;  /* get anchor of chain */
     while (avpl_radius_ch_1) {             /* loop over total chain   */
       *((void **) achl1) = *(avpl_radius_ch_1 + 1);
       ((struct dsd_radius_entry *) *(avpl_radius_ch_1 + 1))->iec_red = ied_red_referenced;
       achl1 += sizeof(void *);
       avpl_radius_ch_1 = (void **) *avpl_radius_ch_1;  /* get next in chain */
     }
   }
#endif
#ifndef B130529
   if (dsl_cs.adsc_domain_info_def_1_ch) {  /* with chain of domain-information definition */
     adsl_gate_w1->adsrc_domain_info = (struct dsd_domain_info_1 **) achl1;  /* domain information */
     while (dsl_cs.adsc_domain_info_def_1_ch) {  /* loop over chain of domain-information definition */
       adsl_domain_info_def_1_w1 = dsl_cs.adsc_domain_info_def_1_ch;  /* get old chain of domain-information definition */
       dsl_cs.adsc_domain_info_def_1_ch = adsl_domain_info_def_1_w1->adsc_next;  /* remove from chain */
       *((void **) achl1) = adsl_domain_info_def_1_w1->adsc_domain_info;
       achl1 += sizeof(void *);
       free( adsl_domain_info_def_1_w1 );
     }
   }
#endif
   if (dsl_cs.adsc_phl_chain) {             /* with plain-HTTP-libraries */
     adsl_gate_w1->adsc_phl_conf_1 = (struct dsd_phl_conf_1 *) achl1;  /* list of plain-HTTP-libraries */
     adsl_phl_ch_1 = dsl_cs.adsc_phl_chain;  /* get chain of plain-HTTP-libraries */
     while (adsl_phl_ch_1) {                /* loop over chain         */
       if (adsl_phl_ch_1->boc_valid) {      /* entry is valid          */
#define ADSL_PHL_1_G ((struct dsd_phl_conf_1 *) achl1)
         ADSL_PHL_1_G->adsc_ext_lib1 = adsl_phl_ch_1->adsc_ext_lib1;  /* external library loaded */
         ADSL_PHL_1_G->ac_conf = adsl_phl_ch_1->ac_conf;  /* return data from conf */
#undef ADSL_PHL_1_G
         achl1 += sizeof(struct dsd_phl_conf_1);
       }
       adsl_phl_ch_1 = adsl_phl_ch_1->adsc_next;  /* get next in chain */
     }
   }
   if (dsl_cs.avpc_selserv_chain) {         /* with server lists       */
     adsl_gate_w1->adsrc_server_list_1 = (struct dsd_server_list_1 **) achl1;  /* list of servers */
     avpl_selserv_ch_1 = dsl_cs.avpc_selserv_chain;  /* get start of chain */
     while (avpl_selserv_ch_1) {            /* loop over total chain   */
#ifdef TRACEHL1
       m_hlnew_printf( HLOG_TRACE1, "conf set server_conf_1_1=%p addr=%p",
                       *(avpl_selserv_ch_1 + 1), achl1 );
#endif
       *((void **) achl1) = *(avpl_selserv_ch_1 + 1);
       ((struct dsd_server_list_1 *) *(avpl_selserv_ch_1 + 1))->iec_seli = ied_seli_referenced;
       achl1 += sizeof(void *);
       avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;  /* get next in chain */
     }
   }
   if (dsl_cs.avpc_usgro_chain) {           /* with user groups        */
     adsl_gate_w1->adsrc_user_group = (struct dsd_user_group **) achl1;  /* user group entries */
     avpl_usgro_ch_1 = dsl_cs.avpc_usgro_chain;  /* get anchor of chain */
     while (avpl_usgro_ch_1) {      /* loop over total chain   */
       *((void **) achl1) = *(avpl_usgro_ch_1 + 1);
       ((struct dsd_user_group *) *(avpl_usgro_ch_1 + 1))->iec_ugd = ied_ugd_referenced;
       achl1 += sizeof(void *);
       avpl_usgro_ch_1 = (void **) *avpl_usgro_ch_1;  /* get next in chain */
     }
   }
   if (dsl_cs.dsc_gate.imc_no_radius) {
// to-do 29.08.09 KB free + dynamic
     adsl_gate_w1->adsrc_radius_group = (struct dsd_radius_group **) achl1;  /* Radius groups */
     if (dsl_cs.aarc_radius_array) {        /* radius-group explicit configured */
       memcpy( achl1, dsl_cs.aarc_radius_array, dsl_cs.dsc_gate.imc_no_radius * sizeof(void *) );
       achl1 += dsl_cs.dsc_gate.imc_no_radius * sizeof(void *);
       iml1 = dsl_cs.dsc_gate.imc_no_radius;  /* get number of radius groups */
       do {                                 /* loop over radius groups */
         iml1--;                            /* decrement index         */
         ((struct dsd_radius_group *) dsl_cs.aarc_radius_array[ iml1 ])->imc_references++;  /* references to this radius-group */
       } while (iml1 > 0);
//     free( dsl_cs.aarc_krb5_array );
     } else {
       adsl_radius_group_w1 = dsl_cs.adsc_loconf_1_fill->adsc_radius_group;  /* chain Radius groups */
       while (adsl_radius_group_w1) {       /* loop over total chain   */
         *((void **) achl1) = adsl_radius_group_w1;  /* set this entry */
         achl1 += sizeof(void *);
         adsl_radius_group_w1->imc_references++;  /* references to this radius-group */
         adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
       }
     }
   }
   if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {
// to-do 29.08.09 KB free + dynamic
     adsl_gate_w1->adsrc_krb5_kdc_1 = (struct dsd_krb5_kdc_1 **) achl1;  /* Kerberos 5 KDCs */
     if (dsl_cs.aarc_krb5_array) {          /* Kerberos explicit configured */
       memcpy( achl1, dsl_cs.aarc_krb5_array, dsl_cs.dsc_gate.imc_no_krb5_kdc * sizeof(void *) );
       achl1 += dsl_cs.dsc_gate.imc_no_krb5_kdc * sizeof(void *);
       iml1 = dsl_cs.dsc_gate.imc_no_krb5_kdc;  /* get number of Kerberos 5 KDCs */
       do {                                 /* loop over Kerberos 5 KDCs */
         iml1--;                            /* decrement index         */
         ((struct dsd_krb5_kdc_1 *) dsl_cs.aarc_krb5_array[ iml1 ])->imc_references++;  /* references to this Kerberos 5 KDC */
       } while (iml1 > 0);
//     free( dsl_cs.aarc_krb5_array );
     } else {
       adsl_krb5_kdc_1_w1 = dsl_cs.adsc_loconf_1_fill->adsc_krb5_kdc_1;  /* chain of Kerberos 5 KDC */
       while (adsl_krb5_kdc_1_w1) {         /* loop over total chain   */
         *((void **) achl1) = adsl_krb5_kdc_1_w1;  /* set this entry   */
         achl1 += sizeof(void *);
         adsl_krb5_kdc_1_w1->imc_references++;  /* references to this Kerberos 5 KDC */
         adsl_krb5_kdc_1_w1 = adsl_krb5_kdc_1_w1->adsc_next;  /* get next in chain */
       }
     }
   }
   if (dsl_cs.dsc_gate.imc_no_ldap_group) {
// to-do 29.08.09 KB free + dynamic
     adsl_gate_w1->adsrc_ldap_group = (struct dsd_ldap_group **) achl1;  /* LDAP groups */
     if (dsl_cs.aarc_ldap_array) {          /* LDAP explicit configured */
       memcpy( achl1, dsl_cs.aarc_ldap_array, dsl_cs.dsc_gate.imc_no_ldap_group * sizeof(void *) );
       achl1 += dsl_cs.dsc_gate.imc_no_ldap_group * sizeof(void *);
       iml1 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* get number of LDAP groups */
       do {                                 /* loop over LDAP groups   */
         iml1--;                            /* decrement index         */
         ((struct dsd_ldap_group *) dsl_cs.aarc_ldap_array[ iml1 ])->imc_references++;  /* references to this LDAP-group */
       } while (iml1 > 0);
//     free( dsl_cs.aarc_ldap_array );
     } else {
       adsl_ldap_group_w1 = dsl_cs.adsc_loconf_1_fill->adsc_ldap_group;  /* chain of LDAP groups */
       while (adsl_ldap_group_w1) {         /* loop over total chain   */
         *((void **) achl1) = adsl_ldap_group_w1;  /* set this entry   */
         achl1 += sizeof(void *);
         adsl_ldap_group_w1->imc_references++;  /* references to this LDAP-group */
         adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
       }
     }
   }
   if (dsl_cs.dsc_gate.imc_len_permmov_url) {  /* with permanently-moved-URL */
     adsl_gate_w1->achc_permmov_url = achl1;  /* address of URL        */
     m_cpy_vx_vx( achl1, dsl_cs.dsc_gate.imc_len_permmov_url, ied_chs_utf_8, dsl_cs.awcc_node_tm_url, -1, ied_chs_utf_16 );  /* copy URL */
     achl1 += (dsl_cs.dsc_gate.imc_len_permmov_url + sizeof(void *) - 1) & (0 - sizeof(void *));
   }
   if (inl5) {                              /* with server             */
     adsl_gate_w1->adsc_server_conf_1 = (struct dsd_server_conf_1 *) achl1;
     memcpy( achl1, &dsl_cs.dsc_server_conf_1_c, sizeof(struct dsd_server_conf_1) );
     dsl_cs.dsc_server_conf_1_c.adsc_server_ineta = NULL;  /* do not free target-ineta */
     adsl_gate_w1->adsc_server_conf_1->adsc_wtsg1 = dsl_cs.adsc_wtsg1_ch;
     achl1 += sizeof(struct dsd_server_conf_1);
   }
   if (dsl_cs.adsc_hobwspat3_def_1) {       /* authentication library definition */
#ifdef B080609
     adsl_gate_w1->adsc_hlwspat2_lib1
       = dsl_cs.adsc_hobwspat3_def_1->adsc_hlwspat2_lib1;
#endif
     adsl_gate_w1->adsc_hobwspat3_ext_lib1
       = dsl_cs.adsc_hobwspat3_def_1->adsc_ext_lib1;
     adsl_gate_w1->vpc_hobwspat3_conf
       = dsl_cs.adsc_hobwspat3_def_1->ac_conf;
   }
   if (dsl_cs.adsc_wspat_obj) {             /* definition authentication-library-object */
     adsl_gate_w1->adsc_hobwspat3_ext_lib1
       = dsl_cs.adsc_wspat_obj->adsc_ext_lib1;
     adsl_gate_w1->vpc_hobwspat3_conf
       = dsl_cs.adsc_wspat_obj->ac_conf;
     dsl_cs.adsc_wspat_obj->imc_references++;  /* count references     */
   }
#ifndef B120116
   achl1 += inl6;                           /* need space for HOB-RDP-EXT1 */
#endif
   achl2 = achl1;                           /* save end of used memory */
   if (dsl_cs.dsc_server_conf_1_c.inc_no_sdh) {  /* with Server-Data-Hook */
     /* store pointers in reverse direction                            */
     achl1 += dsl_cs.dsc_server_conf_1_c.inc_no_sdh * sizeof(struct dsd_sdh_work_1);
     achl2 = achl1;                         /* save end of used memory */
     adsl_sdhlib_ch_1 = dsl_cs.adsc_sdhlib_chain;  /* get anchor of chain */
     while (adsl_sdhlib_ch_1) {             /* loop over chain         */
#ifdef TRACEHL1
       m_hlnew_printf( HLOG_TRACE1, "loop dsl_cs.adsc_sdhlib_chain=%p ...->adsc_ext_lib1=%p achl1=%p dsl_cs.dsc_server_conf_1_c.inc_no_sdh=%d",
                       adsl_sdhlib_ch_1, adsl_sdhlib_ch_1->adsc_ext_lib1, achl1, dsl_cs.dsc_server_conf_1_c.inc_no_sdh );
#endif
#ifdef B080609
       if (adsl_sdhlib_ch_1->adsc_sdhl_1) {  /* server-data-hook libr  */
       }
#endif
       if (adsl_sdhlib_ch_1->adsc_ext_lib1) {  /* server-data-hook external library */
         achl1 -= sizeof(struct dsd_sdh_work_1);
//       *((void **) achl1 + 0) = adsl_sdhlib_ch_1->adsc_sdhl_1;
#ifdef B080609
         ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1
           = adsl_sdhlib_ch_1->adsc_sdhl_1;
#endif
         ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1
           = adsl_sdhlib_ch_1->adsc_ext_lib1;
//       *((void **) achl1 + 1) = adsl_sdhlib_ch_1->ac_conf;
         ((struct dsd_sdh_work_1 *) achl1)->ac_conf
           = adsl_sdhlib_ch_1->ac_conf;
       }
       adsl_sdhlib_ch_1 = adsl_sdhlib_ch_1->adsc_next;  /* get next in chain */
     }
   }
#ifdef B120118
   if (   (dsl_cs.dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Ext 1 */
       && (dsl_cs.boc_dsdhhre1 == FALSE)) {  /* no disable-SDH-HOB-RDP-EXT1 */
#ifdef B080609
     ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1 = &dss_sdh_lib1_rdp1;
#endif
#ifndef B120116
     achl1 -= sizeof(struct dsd_sdh_work_1);
#endif
     ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1 = &dss_ext_lib1_rdp1;
     ((struct dsd_sdh_work_1 *) achl1)->ac_conf = NULL;
     adsl_gate_w1->adsc_server_conf_1->inc_no_sdh++;  /* one pseudo-SDH */
#ifndef B101202
     adsl_gate_w1->adsc_server_conf_1->boc_dynamic = TRUE;  /* dynamicly allocated */
#endif
   }
#endif
#ifndef B120118
   if (inl6 > 0) {                          /* with SDH-HOB-RDP-EXT1   */
#ifdef B080609
     ((struct dsd_sdh_work_1 *) achl1)->adsc_sdhl_1 = &dss_sdh_lib1_rdp1;
#endif
#ifndef B120116
     achl1 -= sizeof(struct dsd_sdh_work_1);
#endif
     ((struct dsd_sdh_work_1 *) achl1)->adsc_ext_lib1 = &dss_ext_lib1_rdp1;
     ((struct dsd_sdh_work_1 *) achl1)->ac_conf = NULL;
     adsl_gate_w1->adsc_server_conf_1->inc_no_sdh++;  /* one pseudo-SDH */
#ifndef B101202
     adsl_gate_w1->adsc_server_conf_1->boc_dynamic = TRUE;  /* dynamicly allocated */
#endif
   }
#endif
   bol1 = FALSE;                            /* no open listen succeeded */
   if (dsl_cs.dsc_server_conf_1_c.imc_len_dns_name) {  /* length of DNS name */
     adsl_gate_w1->adsc_server_conf_1->achc_dns_name = achl2;  /* address of DNS name */
     m_cpy_vx_vx( achl2,
                  dsl_cs.dsc_server_conf_1_c.imc_len_dns_name,  /* length of DNS name */
                  ied_chs_ascii_850,
                  dsl_cs.awcc_node_serverineta,
                  -1,
                  ied_chs_utf_16 );
   }
#ifdef B090426
   adsl_gate_w1->adsc_targfi_1 = dsl_cs.dsc_server_conf_1_c.adsc_targfi_1;  /* set target-filter */
#endif
   adsl_gate_listen_1_w1 = (struct dsd_gate_listen_1 *) ((char *) adsl_gate_w1 + iml_stor_1);
   adsl_gate_w1->adsc_gate_listen_1_ch = adsl_gate_listen_1_w1;  /* chain listen part of gateway */
   iml1 = adsl_listen_ineta_1_w1->imc_no_ineta;  /* get number of INETA */
   adsl_ineta_s_w1 = (struct dsd_ineta_single_1 *) (adsl_listen_ineta_1_w1 + 1);
   do {                                     /* loop over all INETA     */
#ifdef TRACEHL_STOR_1
     m_hlnew_printf( HLOG_TRACE1, "l%05d p_buco_sect_44 before m_open_listen( %p ) normal",
                     __LINE__, adsl_gate_listen_1_w1 );
#endif
     iel_oplir = m_open_listen( chrl_work1, sizeof(chrl_work1),
                                &m_msg_open_listen, &dsl_cs,
                                iel_lierr,
                                adsl_gate_listen_1_w1,
                                adsl_ineta_s_w1,
                                adsl_gate_w1->imc_gateport );
     if (iel_oplir == ied_oplir_abend) return FALSE;  /* abend / exit of program */
     if (iel_oplir == ied_oplir_ok) {       /* o.k. - succeeded        */
       adsl_gate_listen_1_w1->adsc_gate_1 = adsl_gate_w1;  /* gate of this listen */
       adsl_gate_listen_1_w1++;             /* next listen part of gateway */
       (adsl_gate_listen_1_w1 - 1)->adsc_next = adsl_gate_listen_1_w1;  /* set chain */
       bol1 = TRUE;                         /* open listen succeeded   */
     }
     adsl_ineta_s_w1 = (struct dsd_ineta_single_1 *)
       ((char *) (adsl_ineta_s_w1 + 1) + adsl_ineta_s_w1->usc_length);
     iml1--;                                /* decrement index         */
   } while (iml1 > 0);
   if ((adsl_gate_w1->imc_permmov_from_port >= 0) && (adsl_gate_w1->imc_permmov_from_port != adsl_gate_w1->imc_gateport)) {
     iml1 = adsl_listen_ineta_1_w1->imc_no_ineta;  /* get number of INETA */
     adsl_ineta_s_w1 = (struct dsd_ineta_single_1 *) (adsl_listen_ineta_1_w1 + 1);
     do {                                   /* loop over all INETA     */
#ifdef TRACEHL_STOR_1
       m_hlnew_printf( HLOG_TRACE1, "l%05d p_buco_sect_44 before m_open_listen( %p ) permmov",
                       __LINE__, adsl_gate_listen_1_w1 );
#endif
       iel_oplir = m_open_listen( chrl_work1, sizeof(chrl_work1),
                                  &m_msg_open_listen, &dsl_cs,
                                  iel_lierr,
                                  adsl_gate_listen_1_w1,
                                  adsl_ineta_s_w1,
                                  adsl_gate_w1->imc_permmov_from_port );
       if (iel_oplir == ied_oplir_abend) return FALSE;  /* abend / exit of program */
       if (iel_oplir == ied_oplir_ok) {     /* o.k. - succeeded        */
         adsl_gate_listen_1_w1->adsc_gate_1 = adsl_gate_w1;  /* gate of this listen */
         adsl_gate_listen_1_w1++;           /* next listen part of gateway */
         (adsl_gate_listen_1_w1 - 1)->adsc_next = adsl_gate_listen_1_w1;  /* set chain */
         bol1 = TRUE;                       /* open listen succeeded   */
       }
       adsl_ineta_s_w1 = (struct dsd_ineta_single_1 *)
         ((char *) (adsl_ineta_s_w1 + 1) + adsl_ineta_s_w1->usc_length);
       iml1--;                              /* decrement index         */
     } while (iml1 > 0);
   }
   (adsl_gate_listen_1_w1 - 1)->adsc_next = NULL;  /* chain last element */
   if (bol1 == FALSE) {                     /* no open listen succeeded */
     free( adsl_gate_w1 );                  /* free memory gate        */
     goto p_buco_conn_92;                   /* continue                */
   }
   chrl_work1[0] = 0;                       /* no additional text      */
   if ((adsl_gate_w1->imc_permmov_from_port >= 0) && (adsl_gate_w1->imc_permmov_from_port != adsl_gate_w1->imc_gateport)) {
     sprintf( chrl_work1, " + %d", adsl_gate_w1->imc_permmov_from_port );
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPM090I create gateway %(ux)s port=%d%s.",
                   adsl_gate_w1 + 1, adsl_gate_w1->imc_gateport, chrl_work1 );
#ifndef HL_UNIX
   InitializeCriticalSection( &adsl_gate_w1->dcritsect );
#else
   adsl_gate_w1->dsc_critsect.m_create();   /* critical section        */
#endif
   adsl_gate_w1->adsc_next = adsp_loconf_1_fill->adsc_gate_anchor;  /* get old chain */
   adsp_loconf_1_fill->adsc_gate_anchor = adsl_gate_w1;  /* new anchor chain */
#ifdef B111222
   if (dsl_cs.avpc_radius_chain) {          /* with radius             */
     while (dsl_cs.avpc_radius_chain) {     /* loop over total chain   */
       avpl_radius_ch_1 = dsl_cs.avpc_radius_chain;
       dsl_cs.avpc_radius_chain = (void **) *avpl_radius_ch_1;
       free( avpl_radius_ch_1 );            /* free memory again       */
     }
   }
#endif
   if (dsl_cs.avpc_usgro_chain) {           /* with user groups        */
     while (dsl_cs.avpc_usgro_chain) {      /* loop over total chain   */
       avpl_usgro_ch_1 = dsl_cs.avpc_usgro_chain;
       dsl_cs.avpc_usgro_chain = (void **) *avpl_usgro_ch_1;
       free( avpl_usgro_ch_1 );             /* free memory again       */
     }
   }
   if (dsl_cs.avpc_selserv_chain) {         /* with server lists       */
     while (dsl_cs.avpc_selserv_chain) {    /* loop over total chain   */
       avpl_selserv_ch_1 = dsl_cs.avpc_selserv_chain;
       dsl_cs.avpc_selserv_chain = (void **) *avpl_selserv_ch_1;
       free( avpl_selserv_ch_1 );           /* free memory again       */
     }
   }
   if (dsl_cs.aarc_radius_array) free( dsl_cs.aarc_radius_array );  /* radius-server */
   if (dsl_cs.aarc_krb5_array) free( dsl_cs.aarc_krb5_array );  /* Kerberos 5 KDC */
   if (dsl_cs.aarc_ldap_array) free( dsl_cs.aarc_ldap_array );  /* LDAP service */
   /* free resources HTTP-redirect-library                             */
   if (dsl_cs.adsc_hrl_def) {               /* HTTP-redirect-library definition */
     free( dsl_cs.adsc_hrl_def );           /* free memory again       */
   }
#ifdef B130301
   /* free resources plain-HTTP-library                                */
   if (dsl_cs.adsc_phl_def) {               /* plain-HTTP-library definition */
     free( dsl_cs.adsc_phl_def );           /* free memory again       */
   }
#endif
   /* free resources plain-HTTP-libraries                              */
   while (dsl_cs.adsc_phl_chain) {          /* chain of plain-HTTP-libraries */
     adsl_phl_ch_1 = dsl_cs.adsc_phl_chain;  /* get chain of plain-HTTP-libraries */
     dsl_cs.adsc_phl_chain = adsl_phl_ch_1->adsc_next;  /* remove from chain of plain-HTTP-libraries */
     free( adsl_phl_ch_1 );                 /* free memory again       */
   }
   /* free resources HOB-WSP-AT3                                       */
   if (dsl_cs.adsc_hobwspat3_def_1) {        /* authentication library definition */
     free( dsl_cs.adsc_hobwspat3_def_1 );    /* free memory again       */
   }
   if (dsl_cs.dsc_server_conf_1_c.inc_no_sdh) {  /* with Server-Data-Hook */
     while (dsl_cs.adsc_sdhlib_chain) {     /* loop over chain         */
       adsl_sdhlib_ch_1 = dsl_cs.adsc_sdhlib_chain;  /* get chain      */
       dsl_cs.adsc_sdhlib_chain = adsl_sdhlib_ch_1->adsc_next;  /* next in ch */
       free( adsl_sdhlib_ch_1 );            /* free memory again       */
     }
   }
   free( adsl_listen_ineta_1_w1 );          /* free listen structure   */
   goto p_buco_sect_80;                     /* sslgate-c next child    */

   p_buco_conn_92:                          /* free all set resources  */
#ifdef B130121
   if (dsl_cs.achc_fconfig) free( dsl_cs.achc_fconfig );
   if (dsl_cs.achc_fcertdb) free( dsl_cs.achc_fcertdb );
   if (dsl_cs.achc_password) free( dsl_cs.achc_password );
#else
   if (dsl_cs.achc_fconfig) {               /* check file-content      */
     memset( dsl_cs.achc_fconfig, 0, dsl_cs.unc_len_fconfig );
     free( dsl_cs.achc_fconfig );           /* free memory again       */
   }
   if (dsl_cs.achc_fcertdb) {               /* check file-content      */
     memset( dsl_cs.achc_fcertdb, 0, dsl_cs.unc_len_fcertdb );
     free( dsl_cs.achc_fcertdb );           /* free memory again       */
   }
   if (dsl_cs.achc_password) {              /* check file-content      */
     memset( dsl_cs.achc_password, 0, dsl_cs.unc_len_password );
     free( dsl_cs.achc_password );          /* free memory again       */
   }
#endif
   /* free resources domain-information                                */
   while (dsl_cs.adsc_domain_info_def_1_ch) {  /* loop over chain of domain-information definition */
     adsl_domain_info_def_1_w1 = dsl_cs.adsc_domain_info_def_1_ch;  /* get old chain of domain-information definition */
     dsl_cs.adsc_domain_info_def_1_ch = adsl_domain_info_def_1_w1->adsc_next;  /* remove from chain */
     free( adsl_domain_info_def_1_w1->adsc_domain_info );
     free( adsl_domain_info_def_1_w1 );
   }
   /* free resources WTSGATE                                           */
   while (dsl_cs.adsc_wtsg1_ch) {           /* loop over total chain   */
     adsl_wtsg1_1 = dsl_cs.adsc_wtsg1_ch;   /* save element            */
     dsl_cs.adsc_wtsg1_ch = adsl_wtsg1_1->adsc_next;  /* get next in chain */
     free( adsl_wtsg1_1 );                  /* free memory again       */
   }
#ifdef B111222
   /* free resources radius                                            */
   while (dsl_cs.avpc_radius_chain) {       /* loop over total chain   */
     avpl_radius_ch_1 = dsl_cs.avpc_radius_chain;
     dsl_cs.avpc_radius_chain = (void **) *avpl_radius_ch_1;
     free( avpl_radius_ch_1 );              /* free memory again       */
   }
#endif
   /* free resources user group                                        */
   while (dsl_cs.avpc_usgro_chain) {        /* loop over total chain   */
     avpl_usgro_ch_1 = dsl_cs.avpc_usgro_chain;
     dsl_cs.avpc_usgro_chain = (void **) *avpl_usgro_ch_1;
     free( avpl_usgro_ch_1 );               /* free memory again       */
   }
   /* free resources server list                                       */
   while (dsl_cs.avpc_selserv_chain) {      /* loop over total chain   */
     avpl_selserv_ch_1 = dsl_cs.avpc_selserv_chain;
     dsl_cs.avpc_selserv_chain = (void **) *avpl_selserv_ch_1;
     free( avpl_selserv_ch_1 );             /* free memory again       */
   }
   if (dsl_cs.aarc_radius_array) free( dsl_cs.aarc_radius_array );  /* radius-server */
   if (dsl_cs.aarc_krb5_array) free( dsl_cs.aarc_krb5_array );  /* Kerberos 5 KDC */
   if (dsl_cs.aarc_ldap_array) free( dsl_cs.aarc_ldap_array );  /* LDAP service */
   /* free resources HTTP-redirect-library                             */
   if (dsl_cs.adsc_hrl_def) {               /* HTTP-redirect-library definition */
     free( dsl_cs.adsc_hrl_def );           /* free memory again       */
   }
#ifdef B130301
   /* free resources plain-HTTP-library                                */
   if (dsl_cs.adsc_phl_def) {               /* plain-HTTP-library definition */
     free( dsl_cs.adsc_phl_def );           /* free memory again       */
   }
#endif
   /* free resources plain-HTTP-libraries                              */
   while (dsl_cs.adsc_phl_chain) {          /* chain of plain-HTTP-libraries */
     adsl_phl_ch_1 = dsl_cs.adsc_phl_chain;  /* get chain of plain-HTTP-libraries */
     dsl_cs.adsc_phl_chain = adsl_phl_ch_1->adsc_next;  /* remove from chain of plain-HTTP-libraries */
     free( adsl_phl_ch_1 );                 /* free memory again       */
   }
   /* free resources HOB-WSP-AT3                                       */
   if (dsl_cs.adsc_hobwspat3_def_1) {        /* authentication library definition */
     free( dsl_cs.adsc_hobwspat3_def_1 );    /* free memory again      */
   }
   /* free resources Server-Data-Hook                                  */
   while (dsl_cs.adsc_sdhlib_chain) {
     adsl_sdhlib_ch_1 = dsl_cs.adsc_sdhlib_chain;
     dsl_cs.adsc_sdhlib_chain = adsl_sdhlib_ch_1->adsc_next;
     free( adsl_sdhlib_ch_1 );
   }
   if (dsl_cs.dsc_server_conf_1_c.adsc_server_ineta) {  /* with target-ineta */
     free( dsl_cs.dsc_server_conf_1_c.adsc_server_ineta );  /* free target-ineta */
   }

   p_buco_sect_80:                          /* sslgate-c next child    */
   dsl_cs.adsc_node_conf = dsl_cs.adsc_node_conf->getNextSibling();
   if (dsl_cs.adsc_node_conf) goto p_buco_sect_44;

   /* free dummy target-filter                                         */
   while (adsl_targfi_dummy_anchor) {       /* loop over all target-filter */
     adsl_targfi_dummy_w1 = adsl_targfi_dummy_anchor;  /* get anchor chain target-filter */
     adsl_targfi_dummy_anchor = adsl_targfi_dummy_w1->adsc_next;  /* remove from chain */
     free( adsl_targfi_dummy_w1 );          /* free memory again       */
   }

#ifdef OLD_1112
   /* process radius servers                                           */
   bol_radius_used = FALSE;                 /* no need for Radius support yet */
   if (dsl_cs.adsc_raent_anchor == NULL) goto p_buco_radpro_80;

   p_buco_radpro_20:                        /* next radius server      */
   if (dsl_cs.adsc_raent_anchor == NULL) goto p_buco_radpro_60;
   adsl_raent_1 = dsl_cs.adsc_raent_anchor;  /* get chain of already de */
   dsl_cs.adsc_raent_anchor = adsl_raent_1->adsc_next;  /* get next in chain */
   if (adsl_raent_1->iec_red != ied_red_referenced) {
     if (adsl_raent_1->iec_red == ied_red_defined) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01270W Error section radius-server \"%(ux)s\" defined, but not referenced - ignored",
                   adsl_raent_1 + 1 );
     }
     free( adsl_raent_1 );
     goto p_buco_radpro_20;
   }
//#ifdef NOTYET050816
   adsl_raent_1->adsc_next = dsg_radius_control.adsc_raent_anchor;
   dsg_radius_control.adsc_raent_anchor = adsl_raent_1;
//#endif
   adsl_raent_1->inc_port = m_get_wc_number( adsl_raent_1->awcc_radius_s_port );
   if (adsl_raent_1->inc_port <= 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01271W Error section radius-server \"%(ux)s\" port \"%(ux)s\" not valid - ignored",
                 adsl_raent_1 + 1, adsl_raent_1->awcc_radius_s_port );
     adsl_raent_1->iec_red = ied_red_invalid;
     bol_radius_used = TRUE;                /* needs Radius support    */
     goto p_buco_radpro_20;
   }
#endif
#ifdef OLD_1112
#ifndef B080322
   iml1 = m_build_udp_param( &adsl_raent_1->dsc_udp_param_1, chrl_work1,
                             adsl_raent_1->awcc_radius_s_gate_ineta, -1, ied_chs_utf_16,
                             adsl_raent_1->awcc_radius_s_radius_ineta, -1, ied_chs_utf_16 );
   if (iml1) {                              /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01278W Error section radius-server \"%(ux)s\" radius-ineta INETA \"%(ux)s\" error %d %s - ignored",
                     adsl_raent_1 + 1, adsl_raent_1->awcc_radius_s_radius_ineta, iml1, chrl_work1 );
     adsl_raent_1->iec_red = ied_red_invalid;
     bol_radius_used = TRUE;                /* needs Radius support    */
     goto p_buco_radpro_20;
   }
   /* check if server double                                           */
   adsl_raent_2 = adsl_raent_1->adsc_next;  /* get old chain           */
   while (adsl_raent_2) {
     if (   (adsl_raent_2->inc_port == adsl_raent_1->inc_port)
         && (adsl_raent_2->dsc_udp_param_1.imc_len_soa_target == adsl_raent_1->dsc_udp_param_1.imc_len_soa_target)
         && (!memcmp( &adsl_raent_2->dsc_udp_param_1.dsc_soa_target, &adsl_raent_1->dsc_udp_param_1.dsc_soa_target, adsl_raent_2->dsc_udp_param_1.imc_len_soa_target ))
         && (adsl_raent_2->iec_red == ied_red_referenced)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01273W Error section radius-server \"%(ux)s\" same target radius-server as \"%(ux)s\" - ignored",
                   adsl_raent_1 + 1, adsl_raent_2 + 1 );
       adsl_raent_1->iec_red = ied_red_invalid;
       goto p_buco_radpro_20;
     }
     adsl_raent_2 = adsl_raent_2->adsc_next;
   }
#else
   achl1 = XMLString::transcode( (XMLCh *) adsl_raent_1->awcc_radius_s_radius_ineta );
#ifndef OLD01
   adsl_raent_1->umc_radius_ineta = m_get_ineta_single( achl1 );
   XMLString::release( &achl1 );            /* free INETA again        */
   if (adsl_raent_1->umc_radius_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01272W Error section radius-server \"%(ux)s\" radius-ineta invalid INETA found / %s / ignored",
                     adsl_raent_1 + 1, achl1 );
     adsl_raent_1->iec_red = ied_red_invalid;
     bol_radius_used = TRUE;                /* needs Radius support    */
     goto p_buco_radpro_20;
   }
#else
   adsl_raent_1->umc_radius_ineta = IP_inet_addr( achl1 );
   if (adsl_raent_1->umc_radius_ineta == 0XFFFFFFFF) {  /* inv IP-addr */
     duhostEntry = IP_gethostbyname( achl1 );
     if (duhostEntry) {
       adsl_raent_1->umc_radius_ineta = *((UNSIG_MED *) **(&(*duhostEntry).h_addr_list) );
     } else {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01272W Error section radius-server \"%(ux)s\" radius-ineta invalid INETA found / %s / ignored",
                   adsl_raent_1 + 1, achl1 );
       XMLString::release( &achl1 );          /* free INETA again        */
       adsl_raent_1->iec_red = ied_red_invalid;
       goto p_buco_radpro_20;
     }
   }
   XMLString::release( &achl1 );            /* free INETA again        */
#endif
   /* check if server double                                           */
   adsl_raent_2 = adsl_raent_1->adsc_next;  /* get old chain           */
   while (adsl_raent_2) {
     if (   (adsl_raent_2->inc_port == adsl_raent_1->inc_port)
         && (adsl_raent_2->umc_radius_ineta == adsl_raent_1->umc_radius_ineta)
         && (adsl_raent_2->iec_red == ied_red_referenced)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01273W Error section radius-server \"%(ux)s\" same target radius-server as \"%(ux)s\" - ignored",
                   adsl_raent_1 + 1, adsl_raent_2 + 1 );
/* 22.03.08 KB - bug, storage already released */
       XMLString::release( &au1 );          /* free URL again          */
       adsl_raent_1->iec_red = ied_red_invalid;
       goto p_buco_radpro_20;
     }
     adsl_raent_2 = adsl_raent_2->adsc_next;
   }
   adsl_raent_1->umc_multih_ineta = INADDR_ANY;
   if (adsl_raent_1->awcc_radius_s_gate_ineta == NULL) {
     goto p_buco_radpro_40;                 /* multihomed o.k.         */
   }
   au1 = XMLString::transcode( (XMLCh *) adsl_raent_1->awcc_radius_s_gate_ineta );
#ifndef OLD01
   adsl_raent_1->umc_multih_ineta = m_get_ineta_single( achl1 );
   if (adsl_raent_1->umc_multih_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01274W Error section radius-server \"%(ux)s\" gate-ineta invalid INETA found / %s / ignored",
                 adsl_raent_1 + 1, au1 );
     XMLString::release( &au1 );            /* free INETA again        */
     adsl_raent_1->iec_red = ied_red_invalid;
     bol_radius_used = TRUE;                /* needs Radius support    */
     goto p_buco_radpro_20;
   }
#else
   adsl_raent_1->umc_multih_ineta = IP_inet_addr( au1 );
   if (adsl_raent_1->umc_multih_ineta == 0XFFFFFFFF) {  /* inv IP-addr */
     duhostEntry = IP_gethostbyname( au1 );
     if (duhostEntry) {
       adsl_raent_1->umc_multih_ineta = *((UNSIG_MED *) **(&(*duhostEntry).h_addr_list) );
     } else {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01274W Error section radius-server \"%(ux)s\" gate-ineta invalid INETA found / %s / ignored",
                   adsl_raent_1 + 1, au1 );
       XMLString::release( &au1 );          /* free INETA again        */
       adsl_raent_1->iec_red = ied_red_invalid;
       goto p_buco_radpro_20;
     }
   }
#endif
   XMLString::release( &au1 );              /* free INETA again        */

   p_buco_radpro_40:                        /* multihomed o.k.         */
#endif
#endif
#ifdef OLD_1112
#ifndef OLD01
   m_open_radius( chrl_work1, sizeof(chrl_work1),
                  &m_msg_open_radius, adsl_raent_1,
                  adsl_raent_1 );
   bol_radius_used = TRUE;                  /* needs Radius support    */
#else
//#ifdef NOTYET050816
   adsl_rathr_1 = dsg_radius_control.adsc_rathr_anchor;
   while (adsl_rathr_1) {                   /* loop over all threads   */
     if (adsl_rathr_1->umc_multih_ineta == adsl_raent_1->umc_multih_ineta) {
       adsl_raent_1->adsc_rathr = adsl_rathr_1;  /* set thread         */
       if (adsl_rathr_1->boc_invalid) {
         adsl_raent_1->iec_red = ied_red_invalid;
       }
       goto p_buco_radpro_20;               /* all processed           */
     }
     adsl_rathr_1 = adsl_rathr_1->adsc_next;
   }
//#endif
   adsl_rathr_1 = (struct dsd_radius_thread *) malloc( sizeof(struct dsd_radius_thread) );
   adsl_rathr_1->boc_invalid = FALSE;       /* still valid             */
   adsl_rathr_1->umc_multih_ineta = adsl_raent_1->umc_multih_ineta;
//#ifdef NOTYET050816
   adsl_rathr_1->adsc_next = dss_radius_control.adsc_rathr_anchor;
   dss_radius_control.adsc_rathr_anchor = adsl_rathr_1;
   adsl_raent_1->adsc_rathr = adsl_rathr_1;  /* set thread             */
   adsl_rathr_1->imc_socket = IP_socket( AF_INET, SOCK_DGRAM, 0 );
   if (adsl_rathr_1->imc_socket < 0) {
     iml_rc_sock = adsl_rathr_1->imc_socket;
     if (cl_tcp_r::hws2mod != NULL) {       /* functions loaded        */
       iml_rc_sock = cl_tcp_r::afunc_wsaglerr();  /* get error code    */
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01275W Error section radius-server \"%(ux)s\" Socket() Error %d/%d - multihomed INETA %d.%d.%d.%d ignored",
                 adsl_raent_1 + 1, adsl_rathr_1->imc_socket, iml_rc_sock,
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 1),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 2),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 3) );
     adsl_rathr_1->boc_invalid = TRUE;
     adsl_raent_1->iec_red = ied_red_invalid;
     goto p_buco_radpro_20;                 /* all processed           */
   }
   /* Bind the socket to the server address.                           */
   memset( (char *) &dl_blaco_soin, 0, sizeof(struct sockaddr_in) );
   dl_blaco_soin.sin_family = AF_INET;
   dl_blaco_soin.sin_addr.s_addr = adsl_rathr_1->umc_multih_ineta;

   iml_rc_sock = IP_bind( adsl_rathr_1->imc_socket,
                          (struct sockaddr *) &dl_blaco_soin, sizeof(dl_blaco_soin) );
   if (iml_rc_sock != 0) {
     if (cl_tcp_r::hws2mod != NULL) {       /* functions loaded        */
       iml_rc_sock = cl_tcp_r::afunc_wsaglerr();  /* get error code    */
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01276W Error section radius-server \"%(ux)s\" Bind() Error %d - multihomed INETA %d.%d.%d.%d ignored",
                 adsl_raent_1 + 1, iml_rc_sock,
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 1),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 2),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 3) );
     IP_closesocket( adsl_rathr_1->imc_socket );
     adsl_rathr_1->boc_invalid = TRUE;
     adsl_raent_1->iec_red = ied_red_invalid;
     goto p_buco_radpro_20;                 /* all processed           */
   }
   iml_rc_th = adsl_rathr_1->dscthr.Create( &m_radius_proc_thread, adsl_rathr_1 );
   if (iml_rc_th == -1) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01277W Error section radius-server \"%(ux)s\" Thread.Create() Error %d - multihomed INETA %d.%d.%d.%d ignored",
                 adsl_raent_1 + 1, iml_rc_th,
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 1),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 2),
                 *((unsigned char *) &adsl_rathr_1->umc_multih_ineta + 3) );
     IP_closesocket( adsl_rathr_1->imc_socket );
     adsl_rathr_1->boc_invalid = TRUE;
     adsl_raent_1->iec_red = ied_red_invalid;
     goto p_buco_radpro_20;                 /* all processed           */
   }
#ifdef TRACEHLB
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 radius-server active socket %d",
                   adsl_rathr_1->imc_socket );
#endif
#endif
   goto p_buco_radpro_20;                   /* all processed           */

   p_buco_radpro_60:                        /* radius servers in use   */
#endif

   p_buco_radpro_80:                        /* radius servers process  */
   /* check if user-groups are referenced                              */
   bol1 = FALSE;
   adsl_usgro_w1 = dsl_cs.adsc_usgro_anchor;  /* get chain of already def */
   while (adsl_usgro_w1) {                  /* loop over total chain   */
     adsl_usgro_w2 = adsl_usgro_w1;         /* save this value         */
     adsl_usgro_w1 = adsl_usgro_w1->adsc_next;  /* get next in chain   */
     if (adsl_usgro_w2->iec_ugd != ied_ugd_referenced) {  /* not ref   */
       if (adsl_usgro_w2->iec_ugd != ied_ugd_invalid) {  /* not invalid */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01280W Error element user-group name \"%(ux)s\" defined but not referenced",
                         adsl_usgro_w2 + 1 );
       }
       while (adsl_usgro_w2->adsc_usere) {  /* loop over all user-entries */
         adsl_usent_w1 = adsl_usgro_w2->adsc_usere;
         adsl_usgro_w2->adsc_usere = adsl_usent_w1->adsc_next;
         free( adsl_usent_w1 );             /* free storage            */
       }
       free( adsl_usgro_w2 );               /* free storage            */
     } else {                               /* user-group referenced   */
       if (adsl_usgro_w2->adsc_targfi_1) {  /* with target-filter      */
         adsl_usgro_w2->adsc_targfi_1->boc_in_use = TRUE;  /* target-filter is in use */
       }
       bol1 = TRUE;                         /* authentication requ     */
     }
   }
#ifdef NOTYET050816
   if (   bol_radius_used                   /* radius in use           */
       || bol1) {
     InitializeCriticalSection( &dss_radius_control.dsc_critsect );
   }
   if (awcl_node_wol_r_ineta) {             /* save ge wol relay ineta */
     au1 = XMLString::transcode( (XMLCh *) awcl_node_wol_r_ineta );
     dss_radius_control.umc_wol_r_ineta = IP_inet_addr( au1 );
     if (dss_radius_control.umc_wol_r_ineta == 0XFFFFFFFF) {  /* inv IP-addr */
       duhostEntry = IP_gethostbyname( au1 );
       if (duhostEntry) {
         dss_radius_control.umc_wol_r_ineta = *((UNSIG_MED *) **(&(*duhostEntry).h_addr_list) );
       } else {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01281W Error general wake-on-lan-gateway-ineta invalid INETA found / %(ux)s / ignored",
                     awcl_node_wol_r_ineta );
         dss_radius_control.umc_wol_r_ineta = INADDR_ANY;  /* default  */
       }
     }
     XMLString::release( &au1 );            /* free INETA again        */
   }
#endif

   if (dsl_cs.adsc_ldap_group) {            /* chain of LDAP groups    */
     goto p_check_res_20;                   /* resources have been checked */
   }

   /* check if server-list has been used                               */
   avpl_selserv_ch_1 = dsl_cs.avpc_selserv_chain;  /* get anchor       */
   avpl_selserv_ch_3 = NULL;                /* no element before       */
#define ADSL_SELSERV_2 ((struct dsd_server_list_1 *) *(avpl_selserv_ch_2 + 1))
   while (avpl_selserv_ch_1) {              /* loop over total chain   */
     avpl_selserv_ch_2 = avpl_selserv_ch_1;  /* save element           */
     avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;  /* next in chain */
     if (ADSL_SELSERV_2->iec_seli != ied_seli_referenced) {
       if (ADSL_SELSERV_2->iec_seli != ied_seli_invalid) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01830W Error element server-list name \"%(ux)s\" defined but not referenced",
                         ADSL_SELSERV_2 + 1 );
       }
       if (avpl_selserv_ch_3 == NULL) {     /* is first in chain       */
         dsl_cs.avpc_selserv_chain = avpl_selserv_ch_1;
       } else {                             /* middle in chain         */
         *((void **) avpl_selserv_ch_3) = avpl_selserv_ch_1;
       }
       /* free resources WTSGATE                                           */
       while (ADSL_SELSERV_2->adsc_server_conf_1) {  /* loop over server conf chain */
         adsl_server_conf_1_w1 = ADSL_SELSERV_2->adsc_server_conf_1;
         ADSL_SELSERV_2->adsc_server_conf_1 = adsl_server_conf_1_w1->adsc_next;
         while (adsl_server_conf_1_w1->adsc_wtsg1) {
           adsl_wtsg1_1 = adsl_server_conf_1_w1->adsc_wtsg1;
           adsl_server_conf_1_w1->adsc_wtsg1 = adsl_wtsg1_1->adsc_next;
           free( adsl_wtsg1_1 );            /* free memory WTSGATE     */
         }
         free( adsl_server_conf_1_w1 );      /* free server conf        */
       }
#ifdef TRACEHL1
       m_hlnew_printf( HLOG_TRACE1, "free( avpl_selserv_ch_2=%p )", avpl_selserv_ch_2 );
#endif
       free( avpl_selserv_ch_2 );           /* free memory server list */
     } else {
       avpl_selserv_ch_3 = avpl_selserv_ch_2;  /* save element before  */
     }
   }
#undef ADSL_SELSERV_2

   /* check if target-filter has been used                             */
   adsl_targfi_w1 = dsl_cs.adsc_targfi_1_anchor;  /* get chain target-filter */
   adsl_targfi_w3 = NULL;                   /* no previous element     */
   while (adsl_targfi_w1) {                 /* loop over all target-filter */
     adsl_targfi_w2 = adsl_targfi_w1;       /* save this element       */
     adsl_targfi_w1 = adsl_targfi_w1->adsc_next;  /* get next in chain */
     if (adsl_targfi_w2->boc_in_use) {      /* target-filter is in use */
       adsl_targfi_w3 = adsl_targfi_w2;     /* save previous element   */
     } else {                               /* is not in use           */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02030W Error element <target-filter> name \"%(u8)s\" defined but not referenced",
                       (char *) adsl_targfi_w2 + adsl_targfi_w2->imc_off_name );
       if (adsl_targfi_w3 == NULL) {        /* at start of chain       */
         dsl_cs.adsc_targfi_1_anchor = adsl_targfi_w1;  /* set anchor of chain */
       } else {                             /* middle in chain         */
         adsl_targfi_w3->adsc_next = adsl_targfi_w1;  /* remove from chain */
       }
       free( adsl_targfi_w2 );              /* free memory again       */
     }
   }

   p_check_res_20:                          /* resources have been checked */
   /* resolve INETA of Wake-on-LAN relays                              */
   adsl_pttd_ineta_w1 = adsp_loconf_1_fill->adsc_pttd_ineta;
   adsl_pttd_ineta_w2 = NULL;               /* no preceeder            */
   while (TRUE) {                           /* loop over all entries wol-relay */
     if (adsl_pttd_ineta_w1 == NULL) break;  /* all entries processed  */
     inl1 = -1;                             /* set default port        */
     achl1 = XMLString::transcode( (XMLCh *) adsl_pttd_ineta_w1->awcc_def_xml );
     achl2 = achl1 + strlen( achl1 );
     while ((achl2 > achl1) && (*achl2 != ':')) achl2--;
     if (achl2 > achl1) {                   /* separator found         */
       *achl2++ = 0;                        /* INETA zero-terminated   */
       inl1 = 0;                            /* clear value port        */
       while (*achl2) {                     /* valid digit             */
         if ((*achl2 < '0') || (*achl2 > '9')) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01430W wake-on-lan-relay-ineta port contains invalid digit %c",
                           *achl2 );
           break;
         }
         inl1 *= 10;
         inl1 += *achl2++ - '0';
       }
       if (*achl2) {                        /* port not valid          */
         XMLString::release( &achl1 );      /* free INETA again        */
         /* remove this entry from chain                               */
         adsl_pttd_ineta_w3 = adsl_pttd_ineta_w1;  /* get this entry   */
         adsl_pttd_ineta_w1 = adsl_pttd_ineta_w1->adsc_next;  /* get next in chain */
         if (adsl_pttd_ineta_w2 == NULL) {  /* at beginning of chain   */
           adsp_loconf_1_fill->adsc_pttd_ineta = adsl_pttd_ineta_w1;
         } else {                           /* middle in chain         */
           adsl_pttd_ineta_w2->adsc_next = adsl_pttd_ineta_w1;  /* remove from chain */
         }
         free( adsl_pttd_ineta_w3 );        /* free memory again       */
         continue;                          /* next iteration          */
       }
       if (inl1 <= 0) {                     /* port invalid number     */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01431W wake-on-lan-relay-ineta port contains zero" );
         XMLString::release( &achl1 );      /* free INETA again        */
         /* remove this entry from chain                               */
         adsl_pttd_ineta_w3 = adsl_pttd_ineta_w1;  /* get this entry   */
         adsl_pttd_ineta_w1 = adsl_pttd_ineta_w1->adsc_next;  /* get next in chain */
         if (adsl_pttd_ineta_w2 == NULL) {  /* at beginning of chain   */
           adsp_loconf_1_fill->adsc_pttd_ineta = adsl_pttd_ineta_w1;
         } else {                           /* middle in chain         */
           adsl_pttd_ineta_w2->adsc_next = adsl_pttd_ineta_w1;  /* remove from chain */
         }
         free( adsl_pttd_ineta_w3 );        /* free memory again       */
         continue;                          /* next iteration          */
       }
     }
     *((UNSIG_MED *) adsl_pttd_ineta_w1->chrc_ineta) = m_get_ineta_single( achl1 );
     XMLString::release( &achl1 );          /* free INETA again        */
     if (*((UNSIG_MED *) adsl_pttd_ineta_w1->chrc_ineta) == 0XFFFFFFFF) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01432W wake-on-lan-relay-ineta port contains invalid INETA %(ux)s",
                       awcu3_value );
       /* remove this entry from chain                                 */
       adsl_pttd_ineta_w3 = adsl_pttd_ineta_w1;  /* get this entry     */
       adsl_pttd_ineta_w1 = adsl_pttd_ineta_w1->adsc_next;  /* get next in chain */
       if (adsl_pttd_ineta_w2 == NULL) {    /* at beginning of chain   */
         adsp_loconf_1_fill->adsc_pttd_ineta = adsl_pttd_ineta_w1;
       } else {                             /* middle in chain         */
         adsl_pttd_ineta_w2->adsc_next = adsl_pttd_ineta_w1;  /* remove from chain */
       }
       free( adsl_pttd_ineta_w3 );          /* free memory again       */
       continue;                            /* next iteration          */
     }
     adsl_pttd_ineta_w1->inc_family = AF_INET;
     adsl_pttd_ineta_w1->inc_port = inl1;
     adsl_pttd_ineta_w2 = adsl_pttd_ineta_w1;  /* save preceeding entry */
     adsl_pttd_ineta_w1 = adsl_pttd_ineta_w1->adsc_next;  /* get next in chain */
   }
   /* release LDAP template dummies                                    */
   while (adsl_ldap_t_dummy_anchor) {       /* process LDAP template   */
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_anchor;  /* get this element */
     adsl_ldap_t_dummy_anchor = adsl_ldap_t_dummy_anchor->adsc_next;  /* element out of chain */
     if (   (adsl_ldap_t_dummy_w1->boc_referenced == FALSE)  /* entry is not referenced */
         && (adsl_ldap_t_dummy_w1->adsc_ldap_template)) {  /* storage LDAP template does exist */
       free( adsl_ldap_t_dummy_w1->adsc_ldap_template );  /* free storage LDAP template again */
// to-do 21.07.08 KB
       if (dsl_cs.boc_supp_w_lt_nr == FALSE) {  /* suppress-warning-LDAP-template-not-referenced */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW LDAP-template name \"%(ux)s\" not referenced - ignored",
                         adsl_ldap_t_dummy_w1->awcc_te_name );  /* LDAP template name */
       }
     }
     free( adsl_ldap_t_dummy_w1 );          /* free memory of dummy    */
   }
   /* release LDAP service dummies                                     */
   while (adsl_ldap_s_dummy_anchor) {       /* process LDAP service    */
     adsl_ldap_s_dummy_w1 = adsl_ldap_s_dummy_anchor;  /* get this element */
     adsl_ldap_s_dummy_anchor = adsl_ldap_s_dummy_anchor->adsc_next;  /* element out of chain */
     free( adsl_ldap_s_dummy_w1 );          /* free memory of dummy    */
   }
   /* release service dummies                                          */
   while (adsl_service_dummy_anchor) {      /* process service         */
     adsl_service_dummy_w1 = adsl_service_dummy_anchor;  /* get this element */
     adsl_service_dummy_anchor = adsl_service_dummy_anchor->adsc_next;  /* element out of chain */
     free( adsl_service_dummy_w1 );         /* free memory of dummy    */
   }
   /* release configured nodes                                         */
   while (adsl_sc_anchor) {                 /* loop over chain configured nodes */
     adsl_sc_w1 = adsl_sc_anchor;           /* get chain configured nodes */
     adsl_sc_anchor = adsl_sc_anchor->adsc_next;  /* remove element from chain */
     free( adsl_sc_w1 );                    /* free memory of element  */
   }
   /* release unused external libraries                                */
   adsl_ext_lib1_w1 = adsp_loconf_1_fill->adsc_ext_lib1;  /* get existing external libraries */
   while (adsl_ext_lib1_w1) {               /* loop over all external libraries */
     adsl_ext_lib1_w2 = adsl_ext_lib1_w1;   /* save this entry         */
     adsl_ext_lib1_w1 = adsl_ext_lib1_w1->adsc_next;  /* get next in chain */
     if (adsl_ext_lib1_w2->imc_usage_count <= 0) {  /* library not used */
       if (adsl_ext_lib1_w2->boc_loaded) {  /* library has been loaded */
#ifndef HL_UNIX
         bol1 = FreeLibrary( adsl_ext_lib1_w2->dsc_hlibmod );
         if (bol1 == FALSE) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error unused external library \"%(ux)s\" FreeLibrary failed - error %d - ignored",
                           adsl_ext_lib1_w2 + 1, GetLastError() );
         }
#else
         dlclose( adsl_ext_lib1_w2->dsc_hlibmod );
#endif
       }
       free( adsl_ext_lib1_w2 );            /* free memory again       */
     }
   }
   /* check if all authentication-library-object are referenced        */
   adsl_wspat_obj_w1 = adsp_loconf_1_fill->adsc_wspat_obj_1;  /* get chain authentication-library-object */
   adsl_wspat_obj_w2 = NULL;                /* is first one            */
   while (adsl_wspat_obj_w1) {              /* loop over total chain   */
     adsl_wspat_obj_w3 = adsl_wspat_obj_w1;  /* save authentication-library-object */
     adsl_wspat_obj_w1 = adsl_wspat_obj_w1->adsc_next;  /* get next in chain */
     if (adsl_wspat_obj_w3->imc_references <= 0) {  /* references to this authentication-library-object */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW authentication-library-object name \"%.*(u8)s\" not referenced - ignored",
                       adsl_wspat_obj_w3->imc_len_name, adsl_wspat_obj_w3 + 1 );
       if (adsl_wspat_obj_w2 == NULL) {     /* is first in chain       */
         adsp_loconf_1_fill->adsc_wspat_obj_1 = adsl_wspat_obj_w1;  /* chain authentication-library-object */
       } else {                             /* middle in chain         */
         adsl_wspat_obj_w2->adsc_next = adsl_wspat_obj_w1;  /* remove from chain */
       }
       free( adsl_wspat_obj_w3 );           /* free memory authentication-library-object */
     } else {
       adsl_wspat_obj_w2 = adsl_wspat_obj_w3;  /* save last one        */
     }
   }
   /* check if all radius-groups are referenced                        */
   adsl_radius_group_w1 = adsp_loconf_1_fill->adsc_radius_group;  /* chain Radius groups */
   adsl_radius_group_w2 = NULL;             /* is first one            */
   while (adsl_radius_group_w1) {           /* loop over total chain   */
     adsl_radius_group_w3 = adsl_radius_group_w1;  /* save radius group */
     adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
     if (adsl_radius_group_w3->imc_references <= 0) {  /* references to this radius-group */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW radius-group name \"%.*(u8)s\" not referenced - ignored",
                       adsl_radius_group_w3->imc_len_name, adsl_radius_group_w3 + 1 );
       if (adsl_radius_group_w2 == NULL) {  /* is first in chain       */
         adsp_loconf_1_fill->adsc_radius_group = adsl_radius_group_w1;  /* chain Radius groups */
       } else {                             /* middle in chain         */
         adsl_radius_group_w2->adsc_next = adsl_radius_group_w1;  /* remove from chain */
       }
       free( adsl_radius_group_w3 );        /* free memory radius-group */
     } else {
       adsl_radius_group_w2 = adsl_radius_group_w3;  /* save last one  */
     }
   }
   /* check if all Kerberos 5 KDC are referenced                       */
   adsl_krb5_kdc_1_w1 = adsp_loconf_1_fill->adsc_krb5_kdc_1;  /* chain of Kerberos 5 KDC */
   adsl_krb5_kdc_1_w2 = NULL;               /* is first one            */
   while (adsl_krb5_kdc_1_w1) {             /* loop over total chain   */
     adsl_krb5_kdc_1_w3 = adsl_krb5_kdc_1_w1;  /* save Kerberos 5 KDC  */
     adsl_krb5_kdc_1_w1 = adsl_krb5_kdc_1_w1->adsc_next;  /* get next in chain */
     if (adsl_krb5_kdc_1_w3->imc_references <= 0) {  /* references to this Kerberos 5 KDC */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Kerberos-5-KDC name \"%.*(u8)s\" not referenced - ignored",
                       adsl_krb5_kdc_1_w3->imc_len_name, adsl_krb5_kdc_1_w3 + 1 );
       if (adsl_krb5_kdc_1_w2 == NULL) {    /* is first in chain       */
         adsp_loconf_1_fill->adsc_krb5_kdc_1 = adsl_krb5_kdc_1_w1;  /* chain Kerberos 5 KDC */
       } else {                             /* middle in chain         */
         adsl_krb5_kdc_1_w2->adsc_next = adsl_krb5_kdc_1_w1;  /* remove from chain */
       }
       free( adsl_krb5_kdc_1_w3 );          /* free memory Kerberos 5 KDC */
     } else {
       adsl_krb5_kdc_1_w2 = adsl_krb5_kdc_1_w3;  /* save last one      */
     }
   }
   /* check if all LDAP groups are referenced                          */
   adsl_ldap_group_w1 = adsp_loconf_1_fill->adsc_ldap_group;  /* chain of LDAP groups */
   adsl_ldap_group_w2 = NULL;               /* is first one            */
   while (adsl_ldap_group_w1) {             /* loop over total chain   */
     adsl_ldap_group_w3 = adsl_ldap_group_w1;  /* save LDAP group      */
     adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
     if (adsl_ldap_group_w3->imc_references <= 0) {  /* references to this LDAP group */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW LDAP-service name \"%.*(u8)s\" not referenced - ignored",
                       adsl_ldap_group_w3->imc_len_name, adsl_ldap_group_w3 + 1 );
       if (adsl_ldap_group_w2 == NULL) {    /* is first in chain       */
         adsp_loconf_1_fill->adsc_ldap_group = adsl_ldap_group_w1;  /* chain LDAP group */
       } else {                             /* middle in chain         */
         adsl_ldap_group_w2->adsc_next = adsl_ldap_group_w1;  /* remove from chain */
       }
       free( adsl_ldap_group_w3 );          /* free memory LDAP group */
     } else {
       adsl_ldap_group_w2 = adsl_ldap_group_w3;  /* save last one      */
     }
   }

   adsp_loconf_1_fill->adsc_server_list_1 = dsl_cs.adsc_server_list_1_anchor;  /* chain of list of servers */
   adsp_loconf_1_fill->adsc_targfi_1 = dsl_cs.adsc_targfi_1_anchor;  /* chain of target-filters */
#ifdef B080324
   /* check if blade-control has to be used                            */
   if (bol_blacont_used == FALSE) {         /* BLADE Control not used  */
     if (dsl_cs.boc_blacont_def) {          /* BLADE Control defined   */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01070W Error section blade-control defined, but no connection with BLADEGATE found - ignored" );
     }
     goto p_buco_blac2_80;                  /* blade part two finished */
   }
   m_open_blade_control( (HL_WCHAR **) awcrl_blacont_twin_url_c, iml_blacont_twurl_no_ele,
                         awcl_blacont_ineta, iml_blacont_port, iml_blacont_sign_on_time );

   p_buco_blac2_80:                         /* blade part two finished */
   if (awcrl_blacont_twin_url_c) free( awcrl_blacont_twin_url_c );
#endif
   if (adsp_loconf_1_fill->imc_vdi_sign_on_time <= 0) {  /* VDI sign on time */
     adsp_loconf_1_fill->imc_vdi_sign_on_time = 60;  /* set default    */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_build_conf_01 processed successfully" );
#endif

   m_hlnew_printf( HLOG_INFO1, "HWSPM083I number of CPUs online         %d.", iml_no_cpu );
   m_hlnew_printf( HLOG_INFO1, "HWSPM080I max-poss-work-thread   set to %d.", adsp_loconf_1_fill->inc_max_poss_workthr );
   m_hlnew_printf( HLOG_INFO1, "HWSPM081I max-active-work-thread set to %d.", adsp_loconf_1_fill->inc_max_act_workthr );
   if (adsp_loconf_1_fill->inc_prio_work_thread != DEF_PRIO_DEFAULT) {
     m_hlnew_printf( HLOG_INFO1, "HWSPM082I SetThreadPriority work-thread to %d.",
                     adsp_loconf_1_fill->inc_prio_work_thread );
   }
   adsl_l2tp_conf_w1 = adsp_loconf_1_fill->adsc_l2tp_conf;  /* get chain L2TP gateways */
   adsl_l2tp_conf_w2 = NULL;                /* no previous element     */
   while (adsl_l2tp_conf_w1) {              /* loop over total chain   */
     adsl_l2tp_conf_w3 = adsl_l2tp_conf_w1;  /* save this element      */
     adsl_l2tp_conf_w1 = adsl_l2tp_conf_w1->adsc_next;  /* get next in chain */
     if (adsl_l2tp_conf_w3->boc_referenced) {  /* entry is referenced  */
       adsl_l2tp_conf_w2 = adsl_l2tp_conf_w3;  /* save previous element */
       m_l2tp_start( adsl_l2tp_conf_w3 );   /* start L2TP-gateway      */
     } else {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error section L2TP-gateway entry \"%.*(u8)s\" not referenced - ignored",
                       adsl_l2tp_conf_w3->imc_len_name, adsl_l2tp_conf_w3 + 1 );
       if (adsl_l2tp_conf_w2 == NULL) {     /* no previous element     */
         adsp_loconf_1_fill->adsc_l2tp_conf = adsl_l2tp_conf_w1;  /* set new chain */
       } else {                             /* middle in chain         */
         adsl_l2tp_conf_w2->adsc_next = adsl_l2tp_conf_w1;  /* remove entry from chain */
       }
       free( adsl_l2tp_conf_w3 );           /* free memory             */
     }
   }
#ifdef INCL_TEST_RPC
   m_test_rpc_gen( &dsl_cs );
#endif
   return TRUE;
} /* end m_build_conf_01()                                             */

/** process SNMP-configuration                                         */
static BOOL m_general_snmp( struct dsd_conf_serv *adsp_cs, DOMNode *adsp_node_snmp ) {
   BOOL       bol1;                         /* working variable        */
   int        iml1, iml2;                   /* working variables       */
   int        iml_rc;                       /* return code             */
   int        iml_cmp;                      /* compare values          */
   int        iml_e_05;                     /* entry on stage 5        */
   int        iml_e_06;                     /* entry on stage 6        */
   char       *achl_w1;                     /* working variable        */
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_07;
   HL_WCHAR * awcl_06_name;
   HL_WCHAR * awcl_07_name;
   HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_07_value;
   int        *aiml_val;                    /* address of value        */
   struct dsd_temp_snmp_tt_1 *adsl_tstt_1_ch;  /* chain of temporary SNMP trap target */
   struct dsd_temp_snmp_tt_1 *adsl_tstt_1_w1;  /* working variable     */
   HL_WCHAR   *awcrl_tt_tab[ DEF_XML_G_SNMP_TT_MAX ];
   struct dsd_snmp_conf dsl_snmp_conf;      /* SNMP configuration      */
   struct dsd_temp_snmp_tt_1 dsl_tstt_1_st;  /* temporary SNMP trap target */
#ifdef B100726
   char       chrl_work1[512];              /* working variable        */
#endif

#define TRACEHLXX
#ifdef TRACEHLXX
   m_hlnew_printf( HLOG_TRACE1, "l%05d m_general_snmp() called", __LINE__ );
#endif
   adsl_node_fichi = adsp_node_snmp->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general SNMP-configuration has no child - ignored",
                     MAC_XML_LINENO( adsp_node_snmp ), MAC_XML_COL( adsp_node_snmp ) );
     return FALSE;                          /* all done                */
   }
   memset( &dsl_snmp_conf, 0, sizeof(struct dsd_snmp_conf) );  /* SNMP configuration */
   adsl_tstt_1_ch = NULL;                   /* chain of temporary SNMP trap target */
   adsl_node_05 = adsl_node_fichi;          /* get first node          */

   p_gen_snmp_20:                           /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_gen_snmp_80;                    /* get next node on stage 5 */
   }
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_gen_snmp) / sizeof(achrs_node_gen_snmp[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error general SNMP-configuration invalid node found \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_06_name );
       goto p_gen_snmp_80;                  /* get next node on stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_06_name, (char *) achrs_node_gen_snmp[ iml_e_05 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   if (iml_e_05 == DEF_XML_GEN_SNMP_TT) {   /* <trap-target>           */
     goto p_g_snmp_tt_00;                   /* process trap-target     */
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration name \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_06_name );
     goto p_gen_snmp_80;                     /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration name \"%(ux)s\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_06_name );
     goto p_gen_snmp_80;                    /* get next node on stage 5 */
   }
   aiml_val = NULL;                         /* clear address of value  */
#ifdef XYZ1
   aawcl_val = NULL;                        /* clear address of value  */
#endif
   switch (iml_e_05) {                      /* switch keyword found    */
     case DEF_XML_GEN_SNMP_TSL:             /* <trap-send-level>       */
       aiml_val = &dsl_snmp_conf.imc_trap_send_level;  /* <trap-send-level> */
       break;
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration node \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name );
       goto p_gen_snmp_80;                  /* get next node on stage 5 */
     }
     *aiml_val = m_get_wc_number( awcl_06_value );
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_gen_snmp_80;                  /* get next node on stage 5 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       goto p_gen_snmp_80;                  /* get next node on stage 5 */
     }
     if (   (iml_e_05 == DEF_XML_GEN_SNMP_TSL)     /* <trap-send-level>       */
         && (*aiml_val > 9)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration name \"%(ux)s\" numeric value \"%(ux)s\" too high - adjusted to maximum value 9.",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       *aiml_val = 9;
     }
     goto p_gen_snmp_80;                    /* get next node on stage 5 */
   }
   /* program should never get here                                    */

   p_gen_snmp_80:                           /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_gen_snmp_20;    /* process node on stage 5 */
   if (   (adsl_tstt_1_ch == NULL)          /* no chain of temporary SNMP trap target */
       && (dsl_snmp_conf.imc_trap_send_level == 0)) {  /* <trap-send-level> */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general SNMP-configuration no valid values found - ignored",
                     MAC_XML_LINENO( adsp_node_snmp ), MAC_XML_COL( adsp_node_snmp ) );
     return FALSE;
   }
#ifdef B100726
   iml1 = 0;                                /* clear length of memory  */
   if (adsl_tstt_1_ch == NULL) {            /* no chain of temporary SNMP trap target */
     goto p_gen_snmp_88;                    /* length of memory calculated */
   }
   adsl_tstt_1_w1 = adsl_tstt_1_ch;         /* get chain of temporary SNMP trap target */
   do {                                     /* loop over all SNMP trap targets */
     iml2 = sizeof(struct dsd_snmp_trap_target);
     if (adsl_tstt_1_w1->awcc_comment) {    /* with comment            */
       iml2 += m_len_vx_vx( ied_chs_utf_8, adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* add length of comment */
     }
     iml1 += (iml2 + sizeof(void *) - 1) & (0 - sizeof(void *));
     adsl_tstt_1_w1 = adsl_tstt_1_w1->adsc_next;  /* get next in chain */
   } while (adsl_tstt_1_w1);

   p_gen_snmp_88:                           /* length of memory calculated */
   adsp_cs->adsc_loconf_1_fill->adsc_snmp_conf  /* SNMP configuration  */
     = (struct dsd_snmp_conf *) malloc( iml1 );
   memcpy( adsp_cs->adsc_loconf_1_fill->adsc_snmp_conf,
           &dsl_snmp_conf,
           sizeof(struct dsd_snmp_conf) );
   if (adsl_tstt_1_ch == NULL) {            /* no chain of temporary SNMP trap target */
     return;                                /* all done                */
   }
   achl_w1 = (char *) (adsp_cs->adsc_loconf_1_fill->adsc_snmp_conf + 1);
   adsl_tstt_1_w1 = adsl_tstt_1_ch;         /* get chain of temporary SNMP trap target */
   do {                                     /* loop over all SNMP trap targets */
#define ADSL_STT_G ((struct dsd_snmp_trap_target *) achl_w1)
     memset( ADSL_STT_G, 0, sizeof(struct dsd_snmp_trap_target) );
     ADSL_STT_G->imc_socket = -1;           /* socket not yet valid    */
     /* definition UDP parameter                                       */
     memcpy( &ADSL_STT_G->dsc_udp_param_1,
             &adsl_tstt_1_w1->dsc_udp_param_1,
             sizeof(struct dsd_udp_param_1) );
     switch (ADSL_STT_G->dsc_udp_param_1.dsc_soa_target.ss_family) {
       case AF_INET:                        /* IPV4                    */
         ((struct sockaddr_in *) &ADSL_STT_G->dsc_udp_param_1.dsc_soa_target)->sin_port
           = htons( adsl_tstt_1_w1->imc_port );
         break;
       case AF_INET6:                       /* IPV6                    */
         ((struct sockaddr_in6 *) &ADSL_STT_G->dsc_udp_param_1.dsc_soa_target)->sin6_port
           = htons( adsl_tstt_1_w1->imc_port );
         break;
     }
     if (adsl_tstt_1_w1->awcc_comment) {    /* with comment            */
       ADSL_STT_G->dsc_comment.ac_str = ADSL_STT_G + 1;
       ADSL_STT_G->dsc_comment.imc_len_str
         = m_len_vx_vx( ied_chs_utf_8, adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* add length of comment */
       ADSL_STT_G->dsc_comment.iec_chs_str = ied_chs_utf_8;
       m_cpy_vx_vx( ADSL_STT_G->dsc_comment.ac_str, ADSL_STT_G->dsc_comment.imc_len_str, ied_chs_utf_8,
                    adsl_tstt_1_w1->awcc_comment, -1, ied_chs_utf_16 );  /* copy comment */
     }
     achl_w1 += ((sizeof(struct dsd_snmp_trap_target) + ADSL_STT_G->dsc_comment.imc_len_str)
                   + sizeof(void *) - 1) & (0 - sizeof(void *));
     adsl_tstt_1_w1 = adsl_tstt_1_w1->adsc_next;  /* get next in chain */
   } while (adsl_tstt_1_w1);
#undef ADSL_STT_G
#endif
   memcpy( &adsp_cs->dsc_snmp_conf, &dsl_snmp_conf, sizeof(struct dsd_snmp_conf) );  /* SNMP configuration */
   adsp_cs->adsc_tstt_1_ch = adsl_tstt_1_ch;  /* chain of temporary SNMP trap target */
   return TRUE;

   p_g_snmp_tt_00:                          /* process trap-target     */
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general SNMP-configuration trap-target has no child - ignored",
                     MAC_XML_LINENO( adsp_node_snmp ), MAC_XML_COL( adsp_node_snmp ) );
     goto p_gen_snmp_80;                    /* get next node on stage 5 */
   }
   memset( awcrl_tt_tab, 0, sizeof(awcrl_tt_tab) );
   memset( &dsl_tstt_1_st, 0, sizeof(struct dsd_temp_snmp_tt_1) );  /* temporary SNMP trap target */

   p_g_snmp_tt_20:                          /* process node on stage 6 */
   if (adsl_node_06->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_g_snmp_tt_80;                   /* get next node on stage 6 */
   }
   awcl_07_name = (HL_WCHAR *) adsl_node_06->getNodeName();
   iml_e_06 = sizeof(achrs_node_g_snmp_tt) / sizeof(achrs_node_g_snmp_tt[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_06 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error general SNMP-configuration trap-target invalid node found \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_07_name );
       goto p_g_snmp_tt_80;                  /* get next node on stage 6 */
     }
     iml_e_06--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_07_name, (char *) achrs_node_g_snmp_tt[ iml_e_06 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   adsl_node_07 = adsl_node_06->getFirstChild();
   if (adsl_node_07 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target name \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                     awcl_07_name );
     goto p_g_snmp_tt_80;                   /* get next node on stage 6 */
   }
   do {
     if (adsl_node_07->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_07_value = (HL_WCHAR *) adsl_node_07->getNodeValue();
       break;
     }
     adsl_node_07 = adsl_node_07->getNextSibling();
   } while (adsl_node_07);                  /* for all siblings        */
   if (adsl_node_07 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target name \"%(ux)s\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                     awcl_07_name );
     goto p_g_snmp_tt_80;                   /* get next node on stage 6 */
   }
   if (awcrl_tt_tab[ iml_e_06 ]) {          /* value already set       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target name \"%(ux)s\" value \"%(ux)s\" name double - ignored",
                     MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                     awcl_07_name, awcl_07_value );
     goto p_g_snmp_tt_80;                   /* get next node on stage 6 */
   }
   awcrl_tt_tab[ iml_e_06 ] = awcl_07_value;  /* set the value         */

   p_g_snmp_tt_80:                          /* get next node on stage 6 */
   adsl_node_06 = adsl_node_06->getNextSibling();
   if (adsl_node_06) goto p_g_snmp_tt_20;   /* process node on stage 6 */

   if (awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAINETA ] == NULL) {  /* no <target-ineta> */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target no target-ineta defined - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ) );
     goto p_gen_snmp_80;                       /* get next node on stage 5 */
   }
#ifdef B100726
   iml_rc = m_build_udp_param( &dsl_tstt_1_st.dsc_udp_param_1, chrl_work1,
                               awcrl_tt_tab[ DEF_XML_G_SNMP_TT_GOINETA ], -1, ied_chs_utf_16,
                               awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAINETA ], -1, ied_chs_utf_16 );
   if (iml_rc) {                            /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target target-ineta \"%(ux)s\" invalid error %d - trap-target ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAINETA ], iml_rc );
     goto p_gen_snmp_80;                    /* get next node on stage 5 */
   }
#endif
   dsl_tstt_1_st.imc_port = -1;             /* make port invalid       */
   if (awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAPORT ]) {  /* <target-port>   */
     dsl_tstt_1_st.imc_port = m_get_wc_number( awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAPORT ] );  /* UDP port trap target */
     if (dsl_tstt_1_st.imc_port < 0) {      /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general SNMP-configuration trap-target target-port \"%(ux)s\" not numeric - use default port 162.",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAPORT ] );
     }
   }
   if (dsl_tstt_1_st.imc_port < 0) {        /* port invalid            */
     dsl_tstt_1_st.imc_port = DEF_SNMP_TRAP_PORT;
   }
   dsl_tstt_1_st.awcc_go_ineta = awcrl_tt_tab[ DEF_XML_G_SNMP_TT_GOINETA ];  /* gate-out-ineta */
   dsl_tstt_1_st.awcc_tt_ineta = awcrl_tt_tab[ DEF_XML_G_SNMP_TT_TAINETA ];  /* target-ineta */
   dsl_tstt_1_st.awcc_comment = awcrl_tt_tab[ DEF_XML_G_SNMP_TT_COMMENT ];  /* comment */
   dsl_tstt_1_st.imc_xml_lineno = MAC_XML_LINENO( adsl_node_05 );  /* line number in XML configuration file */
   dsl_tstt_1_st.imc_xml_col = MAC_XML_COL( adsl_node_05 );  /* column in XML configuration file */
   adsl_tstt_1_w1 = (struct dsd_temp_snmp_tt_1 *) malloc( sizeof(struct dsd_temp_snmp_tt_1) );
   memcpy( adsl_tstt_1_w1, &dsl_tstt_1_st, sizeof(struct dsd_temp_snmp_tt_1) );
   adsl_tstt_1_w1->adsc_next = adsl_tstt_1_ch;  /* get old chain       */
   adsl_tstt_1_ch = adsl_tstt_1_w1;         /* set chain of temporary SNMP trap target */
   goto p_gen_snmp_80;                      /* get next node on stage 5 */
} /* end m_general_snmp()                                              */

/** process UDP-gate                                                   */
static void m_general_udp_gate( struct dsd_conf_serv *adsp_cs, DOMNode *adsp_node_udp_gate ) {
   BOOL       bol1;                         /* working variable        */
   int        iml1, iml2;                   /* working variables       */
   int        iml_cmp;                      /* compare values          */
   int        iml_e_05;                     /* entry on stage 5        */
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   HL_WCHAR * awcl_06_name;
   HL_WCHAR * awcl_06_value;
   int        *aiml_val;                    /* address of value        */
   HL_WCHAR ** aawcl_val;                   /* address of value        */
   struct dsd_temp_udp_gate_1 *adsl_tug1_w1;  /* temporary UDP-gate    */
   struct dsd_temp_udp_gate_1 *adsl_tug1_w2;  /* temporary UDP-gate    */
   struct dsd_temp_udp_gate_1 dsl_tug1_st;  /* temporary UDP-gate      */

#ifdef TRACEHLXX
   m_hlnew_printf( HLOG_TRACE1, "l%05d m_general_udp_gate() called", __LINE__ );
#endif
   adsl_node_fichi = adsp_node_udp_gate->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general UDP-gate has no child - ignored",
                     MAC_XML_LINENO( adsp_node_udp_gate ), MAC_XML_COL( adsp_node_udp_gate ) );
     return;                                /* all done                */
   }
   memset( &dsl_tug1_st, 0, sizeof(struct dsd_temp_udp_gate_1) );  /* temporary UDP-gate */
   adsl_node_05 = adsl_node_fichi;          /* get first node          */

   p_gen_udpg_20:                           /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_gen_udpg_80;                    /* get next node on stage 5 */
   }
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_gen_udp_gate) / sizeof(achrs_node_gen_udp_gate[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error general UDP-gate invalid node found \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_06_name );
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_06_name, (char *) achrs_node_gen_udp_gate[ iml_e_05 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate name \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_06_name );
     goto p_gen_udpg_80;                     /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate name \"%(ux)s\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_06_name );
     goto p_gen_udpg_80;                    /* get next node on stage 5 */
   }
   aiml_val = NULL;                         /* clear address of value  */
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_05) {                      /* switch keyword found    */
     case DEF_XML_GEN_UDPG_GINETA:          /* <gate-ineta>            */
       aawcl_val = &dsl_tug1_st.awcc_g_ineta;  /* gate-ineta              */
       break;
     case DEF_XML_GEN_UDPG_PORT:            /* <UDP-port>              */
       aiml_val = &dsl_tug1_st.imc_port;       /* UDP port                */
       break;
   }
   if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate node \"%(ux)s\" value \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     *aawcl_val = awcl_06_value;            /* save value found        */
     goto p_gen_udpg_80;                    /* get next node on stage 5 */
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate node \"%(ux)s\" value \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     *aiml_val = m_get_wc_number( awcl_06_value );
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     if (*aiml_val >= 0X010000) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element general UDP-gate name \"%(ux)s\" numeric value \"%(ux)s\" too high (port till 65535) - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_06_name, awcl_06_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_gen_udpg_80;                  /* get next node on stage 5 */
     }
     goto p_gen_udpg_80;                    /* get next node on stage 5 */
   }
   /* program should never get here                                    */

   p_gen_udpg_80:                           /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_gen_udpg_20;    /* process node on stage 5 */

   if (dsl_tug1_st.awcc_g_ineta == NULL) {  /* no gate-ineta found     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general UDP-gate no gate-ineta found - ignored",
                     MAC_XML_LINENO( adsp_node_udp_gate ), MAC_XML_COL( adsp_node_udp_gate ) );
     return;
   }
   if (dsl_tug1_st.imc_port <= 0) {         /* no UDP-port found       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW line=%d col=%d Error general UDP-gate no UDP-port found - ignored",
                     MAC_XML_LINENO( adsp_node_udp_gate ), MAC_XML_COL( adsp_node_udp_gate ) );
     return;
   }
   dsl_tug1_st.imc_xml_lineno = MAC_XML_LINENO( adsp_node_udp_gate );  /* line number in XML configuration file */
   dsl_tug1_st.imc_xml_col = MAC_XML_COL( adsp_node_udp_gate );  /* column in XML configuration file */
   adsl_tug1_w1 = (struct dsd_temp_udp_gate_1 *) malloc( sizeof(struct dsd_temp_udp_gate_1) );  /* temporary UDP-gate */
   memcpy( adsl_tug1_w1, &dsl_tug1_st, sizeof(struct dsd_temp_udp_gate_1) );  /* UDP-gate */
   if (adsp_cs->adsc_tug1_ch == NULL) {     /* chain is empty          */
     adsp_cs->adsc_tug1_ch = adsl_tug1_w1;  /* set first element       */
     return;
   }
   adsl_tug1_w2 = adsp_cs->adsc_tug1_ch;    /* get chain               */
   while (adsl_tug1_w2->adsc_next) adsl_tug1_w2 = adsl_tug1_w2->adsc_next;
   adsl_tug1_w2->adsc_next = adsl_tug1_w1;  /* append to chain         */
   return;
} /* end m_general_udp_gate()                                          */

/** process UDP-gw-ineta                                               */
static void m_conf_udp_gw_ineta( DOMNode *adsp_udp_gw_ineta, struct dsd_loconf_1 *adsp_loconf_1_fill ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_udpgwi_name;       /* name of UDP-gw-ineta    */
   DOMNode    *adsl_node_gate_ineta;        /* gate-ineta              */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_udpgwi_name;             /* UDP-gw-ineta name       */
   HL_WCHAR * awcl_gate_ineta;              /* entry gate-ineta        */
   struct dsd_udp_gw_ineta *adsl_udpgwi_w1;  /* working variable       */
   struct dsd_udp_gw_ineta dsl_udpgwi;      /* definition UDP-gw-ineta entry */

#ifdef OLD01
   adsl_node_fichi = adsp_udp_gw_ineta->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error general UDP-gw-ineta has no child - ignored" );
     return;                                /* all done                */
   }
#endif
   adsl_node_fichi = adsp_udp_gw_ineta;
   /* search name first                                                */
   adsl_node_udpgwi_name = NULL;            /* clear name of UDP-gw-ineta */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_udpgwi_name) {       /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element general UDP-gw-ineta name double - ignored" );
         } else {
           adsl_node_udpgwi_name = adsl_node_04;  /* save name         */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_udpgwi_name == NULL) {     /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error general UDP-gw-ineta has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_udpgwi_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_udpgwi_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_udpgwi_w1 = adsp_loconf_1_fill->adsc_udp_gw_ineta;  /* get chain UDP-gw-INETA */
   while (adsl_udpgwi_w1) {                 /* loop over already defined UDP-gw-INETA */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_udpgwi_name, -1, ied_chs_utf_16,
                         adsl_udpgwi_w1 + 1, adsl_udpgwi_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta %(ux)s already defined - ignored",
                       awcl_udpgwi_name );
       return;                              /* do not process this entry */
     }
     adsl_udpgwi_w1 = adsl_udpgwi_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_udp_gw_ineta() l%05d-T UDP-gw-ineta name %(ux)s",
                   __LINE__, awcl_udpgwi_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_gate_ineta = NULL;             /* clear gate-ineta        */
   do {
     if (   (adsl_node_04 != adsl_node_udpgwi_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "gate-ineta" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_gate_ineta) {        /* gate-ineta already defined */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element general UDP-gw-ineta %(ux)s gate-ineta double - ignored",
                           awcl_udpgwi_name );
         } else {
           adsl_node_gate_ineta = adsl_node_04;  /* save gate-ineta    */
         }
       } else {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element general UDP-gw-ineta %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         awcl_udpgwi_name, awcl_05_name );
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_gate_ineta == NULL) {      /* no gate-ineta found     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error general UDP-gw-ineta %(ux)s has no gate-ineta - ignored",
                     awcl_udpgwi_name );
     return;                                /* do not process this entry */
   }
   /* retrieve gate-ineta                                              */
   adsl_node_05 = adsl_node_gate_ineta->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta %(ux)s name \"gate-ineta\" has no child - ignored",
                     awcl_udpgwi_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_gate_ineta = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta %(ux)s name \"gate-ineta\" no TEXT_NODE found - ignored",
                     awcl_udpgwi_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_udp_gw_ineta() l%05d-T UDP-gw-ineta name %(ux)s gate-ineta %(ux)s",
                   __LINE__, awcl_udpgwi_name, awcl_gate_ineta );
#endif
   memset( &dsl_udpgwi, 0, sizeof(struct dsd_udp_gw_ineta) );  /* clear definition UDP-gw-ineta entry */
   iml1 = m_build_bind_ineta( &dsl_udpgwi.dsc_ineta,
                              awcl_gate_ineta, -1, ied_chs_utf_16 );
   if (iml1 != 0) {                         /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element general UDP-gw-ineta %(ux)s name \"gate-ineta\" value \"%(ux)s\" invalid INETA error %d - ignored",
                     awcl_udpgwi_name, awcl_gate_ineta, iml1 );
     return;                                /* do not process this entry */
   }
   dsl_udpgwi.imc_len_name = m_count_wchar_z_to_utf8( awcl_udpgwi_name );
   adsl_udpgwi_w1 = (struct dsd_udp_gw_ineta *) malloc( sizeof(struct dsd_udp_gw_ineta)
                                                          + dsl_udpgwi.imc_len_name );
   memcpy( adsl_udpgwi_w1, &dsl_udpgwi, sizeof(struct dsd_udp_gw_ineta) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_udpgwi_w1 + 1), awcl_udpgwi_name );
   adsl_udpgwi_w1->adsc_next = adsp_loconf_1_fill->adsc_udp_gw_ineta;  /* get chain UDP-gw-INETA */
   adsp_loconf_1_fill->adsc_udp_gw_ineta = adsl_udpgwi_w1;  /* set chain UDP-gw-INETA */
} /* end m_conf_udp_gw_ineta()                                         */

/** process connection domain-information                              */
static struct dsd_domain_info_1 * m_conf_domain_info_1( struct dsd_conf_serv *adsp_cs,
                                                        DOMNode *adsp_node_domain_info ) {
   BOOL       bol_rc;                       /* return value            */
   BOOL       bol_dns;                      /* DNS entry, not dotted   */
   int        iml_rc;                       /* return code             */
   int        iml_index;                    /* index of tables         */
   int        iml_cmp;                      /* compare values          */
   int        iml_len;                      /* length information      */
   int        iml_var_len;                  /* length of variable storage */
   int        iml_use_full_pm_url_xml_lineno;  /* XML line number      */
   int        iml_use_full_pm_url_xml_col;  /* XML column              */
   int        iml1;                         /* working variable        */
   DOMNode    *adsl_node_di_l1;             /* node level 1            */
   DOMNode    *adsl_node_di_l2;             /* node level 2            */
   HL_WCHAR   *awcl_l1_name;                /* name node level 1       */
   HL_WCHAR   *awcl_l2_value;               /* value node level 2      */
   char       *achl_w1;                     /* working variable        */
   struct dsd_unicode_string *adsl_ucs_w1;  /* working variable        */
   struct dsd_domain_info_ineta_1 *adsl_di_ineta_1_ch;  /* chain domain-information INETA */
   struct dsd_domain_info_ineta_1 *adsl_di_ineta_1_last;  /* last in chain domain-information INETA */
   struct dsd_domain_info_ineta_1 *adsl_di_ineta_1_w1;  /* working variable domain-information INETA */
   struct dsd_domain_info_def_1 *adsl_domain_info_def_1_w1;  /* working variable domain-information definition */
   struct addrinfo *adsl_addrinfo_w1;
   struct addrinfo dsl_addrinfo_l;
   HL_WCHAR   *awcrl_node_di_text[ sizeof(achrs_node_domain_info) / sizeof(achrs_node_domain_info[0]) ];  /* store text fields */
   int        imrl_len_node_di_text[ sizeof(achrs_node_domain_info) / sizeof(achrs_node_domain_info[0]) ];  /* store length of fields */
   struct dsd_domain_info_1 dsl_domain_info_l;  /* domain information  */
   struct dsd_domain_info_1 *adsl_domain_info_w1;  /* domain information */
   char       byrl_work1[ 1024 ];           /* working area            */

   adsl_node_di_l1 = adsp_node_domain_info->getFirstChild();
   if (adsl_node_di_l1 == NULL) {           /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02800W line=%d col=%d Error element name \"connection\" \"domain-information\" has no child - ignored",
                     MAC_XML_LINENO( adsp_node_domain_info ), MAC_XML_COL( adsp_node_domain_info ) );
     return NULL;                           /* this entry not valid    */
   }
   memset( awcrl_node_di_text, 0, sizeof(awcrl_node_di_text) );
   memset( imrl_len_node_di_text, 0, sizeof(imrl_len_node_di_text) );
   memset( &dsl_domain_info_l, 0, sizeof(struct dsd_domain_info_1) );  /* domain information */
   adsl_di_ineta_1_ch = NULL;               /* chain domain-information INETA */
   /* last in chain domain-information INETA                           */
   adsl_di_ineta_1_last
     = (struct dsd_domain_info_ineta_1 *) ((char *) &adsl_di_ineta_1_ch - offsetof( struct dsd_domain_info_ineta_1, adsc_next ));
   iml_var_len = 0;                         /* length of variable storage */

   p_dom_info_20:                           /* process node level 1    */
   if (adsl_node_di_l1->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   awcl_l1_name = (HL_WCHAR *) adsl_node_di_l1->getNodeName();
   iml_index = sizeof(achrs_node_domain_info) / sizeof(achrs_node_domain_info[0]) - 1;
   do {                                     /* search node name in table */
     bol_rc = m_cmp_vx_vx( &iml_cmp,
                           (void *) achrs_node_domain_info[ iml_index ],
                           -1,
                           ied_chs_utf_8,
                           awcl_l1_name,
                           -1,
                           ied_chs_utf_16 );
     if ((bol_rc) && (iml_cmp == 0)) {      /* strings are equal       */
       break;
     }
     iml_index--;                           /* decrement index         */
   } while (iml_index >= 0);
   if (iml_index < 0) {                     /* not found in table      */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02801W line=%d col=%d Error element name \"connection\" \"domain-information\" invalid node found \"%(ux)s\" - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   if (awcrl_node_di_text[ iml_index ] != NULL) {  /* already defined  */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02802W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" defined double - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   /* search text to node                                              */
   adsl_node_di_l2 = adsl_node_di_l1->getFirstChild();
   if (adsl_node_di_l2 == NULL) {           /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02803W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   do {
     if (adsl_node_di_l2->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_l2_value = (HL_WCHAR *) adsl_node_di_l2->getNodeValue();
       break;
     }
     adsl_node_di_l2 = adsl_node_di_l2->getNextSibling();
   } while (adsl_node_di_l2);
   if (adsl_node_di_l2 == NULL) {           /* no text node found      */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02804W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" no text found - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   if (   (iml_index == DEF_XML_DOM_INFO_USE_PM_URL)  /* <use-full-permanently-moved-URL> */
       || (iml_index == DEF_XML_DOM_INFO_USE_AS_DEF)) {
     goto p_dom_info_yes_no_00;             /* YES or NO               */
   }
   if (   (iml_index == DEF_XML_DOM_INFO_S_DOT_INETA)  /* <server-dotted-ineta> */
       || (iml_index == DEF_XML_DOM_INFO_S_DNS_INETA)) {  /* <use-as-default> */
     goto p_dom_info_ineta_00;              /* node with INETA         */
   }
   if (iml_index != DEF_XML_DOM_INFO_AUTH_TYPE) {  /* not <authentication-type> */
     goto p_dom_info_normal_00;             /* normal node             */
   }
   iml_index = sizeof(adsrs_node_auth_type) / sizeof(adsrs_node_auth_type[0]) - 1;
   do {                                     /* search node name in table */
     bol_rc = m_cmp_vx_vx( &iml_cmp,
                           adsrs_node_auth_type[ iml_index ].achc_keyword,
                           -1,
                           ied_chs_utf_8,
                           awcl_l2_value,
                           -1,
                           ied_chs_utf_16 );
     if ((bol_rc) && (iml_cmp == 0)) {      /* strings are equal       */
       break;
     }
     iml_index--;                           /* decrement index         */
   } while (iml_index >= 0);
   if (iml_index < 0) {                     /* not found in table      */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02805W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"authentication-type\" value \"%(ux)s\" not defined - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l2_value );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   dsl_domain_info_l.iec_diat = adsrs_node_auth_type[ iml_index ].iec_diat;  /* domain information authentication-type */
   awcrl_node_di_text[ DEF_XML_DOM_INFO_AUTH_TYPE ] = awcl_l2_value;  /* set text       */
   goto p_dom_info_60;                      /* end of node level 1     */

   p_dom_info_yes_no_00:                    /* YES or NO               */
   bol_rc = m_cmp_vx_vx( &iml_cmp,
                         awcl_l2_value, -1, ied_chs_utf_16,
                         (void *) "YES", -1, ied_chs_utf_8 );
   if ((bol_rc) && (iml_cmp == 0)) {        /* strings are equal, YES  */
     if (iml_index == DEF_XML_DOM_INFO_USE_PM_URL) {  /* <use-full-permanently-moved-URL> */
       dsl_domain_info_l.boc_use_full_pm_url = TRUE;  /* use-full-permanently-moved-URL */
       iml_use_full_pm_url_xml_lineno = MAC_XML_LINENO( adsl_node_di_l1 );  /* XML line number */
       iml_use_full_pm_url_xml_col = MAC_XML_COL( adsl_node_di_l1 );  /* XML column */
       goto p_dom_info_mark;                /* mark element as set     */
     }
     goto p_dom_info_yes_no_20;             /* YES to <use-as-default> */
   }
   bol_rc = m_cmp_vx_vx( &iml_cmp,
                         awcl_l2_value, -1, ied_chs_utf_16,
                         (void *) "NO", -1, ied_chs_utf_8 );
   if ((bol_rc) && (iml_cmp == 0)) {        /* strings are equal, NO   */
     goto p_dom_info_mark;                  /* mark element as set     */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02810W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" neither YES nor NO: \"%(ux)s\" - ignored",
                   MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                   awcl_l1_name, awcl_l2_value );
   goto p_dom_info_60;                      /* end of node level 1     */

   p_dom_info_yes_no_20:                    /* YES to <use-as-default> */
   adsl_domain_info_def_1_w1 = adsp_cs->adsc_domain_info_def_1_ch;  /* get chain of domain-information definition */
   while (adsl_domain_info_def_1_w1) {      /* loop over already defined definitions */
     if (adsl_domain_info_def_1_w1->adsc_domain_info->boc_use_as_default) {  /* use-as-default */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02811W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" - use-as-default already set in domain-information line=%d col=%d - ignored",
                       MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                       awcl_l1_name, awcl_l2_value,
                       adsl_domain_info_def_1_w1->imc_xml_lineno,
                       adsl_domain_info_def_1_w1->imc_xml_col );
       goto p_dom_info_60;                  /* end of node level 1     */
     }
     adsl_domain_info_def_1_w1 = adsl_domain_info_def_1_w1->adsc_next;
   }
   dsl_domain_info_l.boc_use_as_default = TRUE;  /* use-as-default     */
   goto p_dom_info_mark;                    /* mark element as set     */

   p_dom_info_normal_00:                    /* normal node             */
   iml_len = m_len_vx_vx( ied_chs_utf_8,    /* Unicode UTF-8           */
                          awcl_l2_value, -1, ied_chs_utf_16 );
   if (iml_len <= 0) {                      /* did not copy            */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02812W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" text length invalid - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name, awcl_l2_value );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   if (iml_index != DEF_XML_DOM_INFO_COMMENT) {  /* do not check for comment */
     adsl_domain_info_def_1_w1 = adsp_cs->adsc_domain_info_def_1_ch;  /* get chain of domain-information definition */
     while (adsl_domain_info_def_1_w1) {    /* loop over already defined definitions */
#define ADSL_UCS_G ((struct dsd_unicode_string *) ((char *) adsl_domain_info_def_1_w1->adsc_domain_info + imrs_node_domain_info_disp[ iml_index ]))
       bol_rc = m_cmp_vx_vx( &iml_cmp,
                             awcl_l2_value, -1, ied_chs_utf_16,
                             ADSL_UCS_G->ac_str, ADSL_UCS_G->imc_len_str, ADSL_UCS_G->iec_chs_str );
       if ((bol_rc) && (iml_cmp == 0)) {    /* strings are equal       */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02813W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" already defined in domain-information line=%d col=%d - warning only",
                         MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                         awcl_l1_name, awcl_l2_value,
                         adsl_domain_info_def_1_w1->imc_xml_lineno,
                         adsl_domain_info_def_1_w1->imc_xml_col );
       }
#undef ADSL_UCS_G
       adsl_domain_info_def_1_w1 = adsl_domain_info_def_1_w1->adsc_next;
     }
   }
   imrl_len_node_di_text[ iml_index ] = iml_len;  /* store length of fields */
   iml_var_len += iml_len;                  /* length of variable storage */

   p_dom_info_mark:                         /* mark element as set     */
   awcrl_node_di_text[ iml_index ] = awcl_l2_value;  /* set text       */
   goto p_dom_info_60;                      /* end of node level 1     */

   p_dom_info_ineta_00:                     /* node with INETA         */
   iml_len = m_cpy_vx_vx( byrl_work1, sizeof(byrl_work1), ied_chs_utf_8,  /* Unicode UTF-8 */
                          awcl_l2_value, -1, ied_chs_utf_16 );
   if (iml_len <= 0) {                      /* did not copy            */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02820W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" text length invalid - ignored",
                     MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                     awcl_l1_name, awcl_l2_value );
     goto p_dom_info_60;                    /* end of node level 1     */
   }
   adsl_di_ineta_1_w1 = adsl_di_ineta_1_ch;  /* chain domain-information INETA */
   while (adsl_di_ineta_1_w1) {             /* loop over chain domain-information INETA */
     if (   (adsl_di_ineta_1_w1->imc_len == iml_len)
         && (!memcmp( adsl_di_ineta_1_w1 + 1, byrl_work1, iml_len ))) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02821W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" already defined line=%d col=%d - ignored",
                       MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                       awcl_l1_name, awcl_l2_value,
                       adsl_di_ineta_1_w1->imc_xml_lineno,
                       adsl_di_ineta_1_w1->imc_xml_col );
       goto p_dom_info_60;                  /* end of node level 1     */
     }
     adsl_di_ineta_1_w1 = adsl_di_ineta_1_w1->adsc_next;  /* get next in chain */
   }
   adsl_domain_info_def_1_w1 = adsp_cs->adsc_domain_info_def_1_ch;  /* get chain of domain-information definition */
   while (adsl_domain_info_def_1_w1) {      /* loop over already defined definitions */
     iml1
       = adsl_domain_info_def_1_w1->adsc_domain_info->imc_no_dotted_ineta  /* number of server-dotted-ineta */
           + adsl_domain_info_def_1_w1->adsc_domain_info->imc_no_dns_ineta;  /* number of server-DNS-ineta */
     adsl_ucs_w1 = adsl_domain_info_def_1_w1->adsc_domain_info->adsc_ucs_dns_ineta;  /* array of server-DNS-ineta */
     while (iml1 > 0) {                     /* loop over variable INETAs */
       bol_rc = m_cmp_vx_vx( &iml_cmp,
                             awcl_l2_value, -1, ied_chs_utf_16,
                             adsl_ucs_w1->ac_str, adsl_ucs_w1->imc_len_str, adsl_ucs_w1->iec_chs_str );
       if ((bol_rc) && (iml_cmp == 0)) {    /* strings are equal       */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02822W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" already defined in domain-information line=%d col=%d - warning only",
                         MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                         awcl_l1_name, awcl_l2_value,
                         adsl_domain_info_def_1_w1->imc_xml_lineno,
                         adsl_domain_info_def_1_w1->imc_xml_col );
         break;
       }
       adsl_ucs_w1++;                       /* next unicode string     */
       iml1--;                              /* decrement index         */
     }
     adsl_domain_info_def_1_w1 = adsl_domain_info_def_1_w1->adsc_next;
   }
   bol_dns = TRUE;                          /* DNS entry, not dotted   */
   memset( &dsl_addrinfo_l, 0, sizeof(struct addrinfo) );
   dsl_addrinfo_l.ai_family = AF_UNSPEC;
   dsl_addrinfo_l.ai_flags = AI_NUMERICHOST;
   adsl_addrinfo_w1 = NULL;
   iml_rc = getaddrinfo( byrl_work1, NULL, &dsl_addrinfo_l, &adsl_addrinfo_w1 );
   if (iml_rc == 0) {                       /* no error, numeric INETA */
     freeaddrinfo( adsl_addrinfo_w1 );      /* free addresses again    */
     bol_dns = FALSE;                       /* DNS entry, not dotted   */
   } else {
#ifndef HL_UNIX
#define D_TEMP_ERROR WSAHOST_NOT_FOUND
#else
#define D_TEMP_ERROR EAI_NONAME
#endif
     if (iml_rc != D_TEMP_ERROR) {          /* error occured           */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02823W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" getaddrinfo() returned %d %d - ignored",
                       MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                       awcl_l1_name, awcl_l2_value,
                       iml_rc, D_TCP_ERROR );
       goto p_dom_info_60;                  /* end of node level 1     */
     }
   }
#undef D_TEMP_ERROR
   if (iml_index == DEF_XML_DOM_INFO_S_DOT_INETA) {  /* <server-dotted-ineta> */
     if (bol_dns) {                         /* DNS entry, not dotted   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02824W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" did not find valid dotted INETA - ignored",
                       MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                       awcl_l1_name, awcl_l2_value,
                       iml_rc, D_TCP_ERROR );
       goto p_dom_info_60;                  /* end of node level 1     */
     }
   } else {                                 /* <server-DNS-ineta>      */
     if (bol_dns == FALSE) {                /* DNS entry, not dotted   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02825W line=%d col=%d Error element name \"connection\" \"domain-information\" node \"%(ux)s\" value \"%(ux)s\" did find dotted INETA - ignored",
                       MAC_XML_LINENO( adsl_node_di_l1 ), MAC_XML_COL( adsl_node_di_l1 ),
                       awcl_l1_name, awcl_l2_value,
                       iml_rc, D_TCP_ERROR );
       goto p_dom_info_60;                  /* end of node level 1     */
     }
   }
   adsl_di_ineta_1_w1 = (struct dsd_domain_info_ineta_1 *) malloc( sizeof(struct dsd_domain_info_ineta_1) + iml_len );  /* working variable domain-information INETA */
   adsl_di_ineta_1_w1->adsc_next = NULL;    /* field for chaining      */
   adsl_di_ineta_1_w1->imc_len = iml_len;   /* length text             */
   adsl_di_ineta_1_w1->boc_dns = bol_dns;   /* DNS entry, not dotted   */
   adsl_di_ineta_1_w1->imc_xml_lineno = MAC_XML_LINENO( adsl_node_di_l1 );
   adsl_di_ineta_1_w1->imc_xml_col = MAC_XML_COL( adsl_node_di_l1 );
   memcpy( adsl_di_ineta_1_w1 + 1, byrl_work1, iml_len );

   adsl_di_ineta_1_last->adsc_next = adsl_di_ineta_1_w1;  /* append to chain */
   adsl_di_ineta_1_last = adsl_di_ineta_1_w1;  /* is last in chain now */

   iml_var_len += sizeof(struct dsd_unicode_string) + iml_len;  /* length of variable storage */
   if (bol_dns == FALSE) {                  /* DNS entry, not dotted   */
     dsl_domain_info_l.imc_no_dotted_ineta++;  /* number of server-dotted-ineta */
   } else {
     dsl_domain_info_l.imc_no_dns_ineta++;  /* number of server-DNS-ineta */
   }

   p_dom_info_60:                           /* end of node level 1     */
   adsl_node_di_l1 = adsl_node_di_l1->getNextSibling();
   if (adsl_node_di_l1) goto p_dom_info_20;  /* process node level 1   */

   if (adsl_di_ineta_1_ch == NULL) {        /* chain domain-information INETA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02830W line=%d col=%d Error element name \"connection\" \"domain-information\" neither server-dotted-ineta nor server-DNS-ineta defined - ignored",
                     MAC_XML_LINENO( adsp_node_domain_info ), MAC_XML_COL( adsp_node_domain_info ) );
     return NULL;                           /* this entry not valid    */
   }
   if (   (imrl_len_node_di_text[ DEF_XML_DOM_INFO_PERM_M_URL ] == 0)
       && (dsl_domain_info_l.boc_use_full_pm_url)) {  /* use-full-permanently-moved-URL */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02831W line=%d col=%d Error element name \"connection\" \"domain-information\" use-full-permanently-moved-URL set to YES but no permanently-moved-URL - use-full-permanently-moved-URL set to NO.",
                     iml_use_full_pm_url_xml_lineno,  /* XML line number */
                     iml_use_full_pm_url_xml_col );  /* XML column     */
     dsl_domain_info_l.boc_use_full_pm_url = FALSE;  /* use-full-permanently-moved-URL */
   }
   adsl_domain_info_w1 = (struct dsd_domain_info_1 *) malloc( sizeof(struct dsd_domain_info_1) + iml_var_len );  /* domain information */
   *adsl_domain_info_w1 = dsl_domain_info_l;  /* domain information    */
   adsl_ucs_w1 = (struct dsd_unicode_string *) (adsl_domain_info_w1 + 1);  /* start of variable memory */
   achl_w1 = (char *) (adsl_domain_info_w1 + 1) + iml_var_len;  /* end of memory */
   iml_index = sizeof(achrs_node_domain_info) / sizeof(achrs_node_domain_info[0]) - 1;
   do {                                     /* search node name in table */
     if (imrl_len_node_di_text[ iml_index ] > 0) {
       achl_w1 -= imrl_len_node_di_text[ iml_index ];
       m_cpy_vx_vx( achl_w1, imrl_len_node_di_text[ iml_index ], ied_chs_utf_8,
                    awcrl_node_di_text[ iml_index ], -1, ied_chs_utf_16 );
#define ADSL_UCS_G ((struct dsd_unicode_string *) ((char *) adsl_domain_info_w1 + imrs_node_domain_info_disp[ iml_index ]))
       ADSL_UCS_G->ac_str = achl_w1;        /* address of string       */
       ADSL_UCS_G->imc_len_str = imrl_len_node_di_text[ iml_index ];  /* length of string in elements */
       ADSL_UCS_G->iec_chs_str = ied_chs_utf_8;  /* character set of string */
#undef ADSL_UCS_G
     }
     iml_index--;                           /* decrement index         */
   } while (iml_index >= 0);

   bol_dns = TRUE;                          /* DNS entry, not dotted   */
   adsl_domain_info_w1->adsc_ucs_dns_ineta = adsl_ucs_w1;  /* array of server-DNS-ineta */

   p_dom_info_80:                           /* fill variable part      */
   adsl_di_ineta_1_w1 = adsl_di_ineta_1_ch;  /* chain domain-information INETA */
   while (adsl_di_ineta_1_w1) {             /* loop over chain domain-information INETA */
     if (adsl_di_ineta_1_w1->boc_dns == bol_dns) {
       achl_w1 -= adsl_di_ineta_1_w1->imc_len;  /* length text         */
       memcpy( achl_w1, adsl_di_ineta_1_w1 + 1, adsl_di_ineta_1_w1->imc_len );
       adsl_ucs_w1->ac_str = achl_w1;       /* address of string       */
       adsl_ucs_w1->imc_len_str = adsl_di_ineta_1_w1->imc_len;  /* length of string in elements */
       adsl_ucs_w1->iec_chs_str = ied_chs_utf_8;  /* character set of string */
       adsl_ucs_w1++;                       /* space used              */
     }
     adsl_di_ineta_1_w1 = adsl_di_ineta_1_w1->adsc_next;  /* get next in chain */
   }
   if (bol_dns) {                           /* DNS entry, not dotted   */
     bol_dns = FALSE;                       /* DNS entry, not dotted   */
     adsl_domain_info_w1->adsc_ucs_dotted_ineta = adsl_ucs_w1;  /* array of server-dotted-ineta */
     goto p_dom_info_80;                    /* fill variable part      */
   }
   while (adsl_di_ineta_1_ch) {             /* loop to free chain domain-information INETA */
     adsl_di_ineta_1_w1 = adsl_di_ineta_1_ch;  /* chain domain-information INETA */
     adsl_di_ineta_1_ch = adsl_di_ineta_1_w1->adsc_next;  /* remove from chain */
     free( adsl_di_ineta_1_w1 );            /* free memory again       */
   }
   return adsl_domain_info_w1;
} /* end m_conf_domain_info_1()                                        */

#ifdef B110104
static struct dsd_targfi_1 * m_conf_targfi_1( struct dsd_conf_serv *adsp_cs,
                                              DOMNode *adsp_node_targfi_d ) {
   int        iml1, iml2, iml3, iml4;       /* working-variables       */
   int        iml_alde;                     /* index allow / deny      */
   BOOL       bol1;                         /* working-variable        */
   char       *achl1;                       /* working variable        */
   int        iml_no_targfi_ele_1;          /* number of elements      */
   int        iml_no_targfi_ele_deny;       /* number of elements deny */
   int        iml_no_port;                  /* number of ports         */
   int        iml_no_protocol;              /* number of protocols     */
   int        iml_port_temp;                /* number of ports temporary */
   int        iml_protocol_temp;            /* number of protocols temporary */
   int        iml_len_dns;                  /* length DNS names        */
   int        *aimrl_port;                  /* address array ports     */
   char       *achrl_protocol;              /* address array protocols */
   char       *achl_dns_name;               /* address DNS-name        */
   DOMNode    *adsl_node_ctf_save;          /* save node level 3       */
   DOMNode    *adsl_node_ctf_l3;            /* node level 3            */
   DOMNode    *adsl_node_ctf_l4;            /* node level 4            */
   DOMNode    *adsl_node_ctf_l5;            /* node level 5            */
   HL_WCHAR   *awcl_l3_name;                /* name node level 3       */
   HL_WCHAR   *awcl_l4_name;                /* name node level 4       */
   HL_WCHAR   *awcl_l5_value;               /* value node level 5      */
   HL_WCHAR   *awcl_ctf_name;               /* name of this target-filter */
   HL_WCHAR   *awcrl_ctfad_text[ DEF_XML_TFE1_ALPHA ];  /* store text fields */
   struct dsd_targfi_1 *adsl_targfi_1;      /* result                  */

   adsl_node_ctf_save = adsp_node_targfi_d->getFirstChild();
   if (adsl_node_ctf_save == NULL) {        /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02000W Error element name \"sslgate-configuration\" \"target-filter\" has no child - ignored" );
     return NULL;                           /* this entry not valid    */
   }
   achl_dns_name = NULL;                    /* first pass              */
   iml_no_port = 0;                         /* clear number of ports   */
   iml_no_protocol = 0;                     /* clear number of protocols */
   iml_len_dns = 0;                         /* clear length DNS names    */
   awcl_ctf_name = NULL;                    /* clear name of this target-filter */

   p_ctf_l3_00:                             /* process entries level 3 */
   iml_no_targfi_ele_1 = 0;                 /* clear number of elements */
   iml_no_targfi_ele_deny = 0;              /* clear number of elements deny */
   adsl_node_ctf_l3 = adsl_node_ctf_save;   /* get first element       */

   p_ctf_l3_20:                             /* next entry level 3      */
   if (adsl_node_ctf_l3->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   awcl_l3_name = (HL_WCHAR *) adsl_node_ctf_l3->getNodeName();
   iml_alde = sizeof(achrs_node_targfi_1) / sizeof(achrs_node_targfi_1[0]);
   while (TRUE) {                           /* search node name in table */
     iml_alde--;                            /* decrement index         */
     if (iml_alde < 0) {                    /* was already last entry  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02001W Error element name \"sslgate-configuration\" \"target-filter\" invalid node found \"%(ux)s\" - ignored",
                       awcl_l3_name );
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     bol1 = m_cmp_u16z_u8z( &iml2, awcl_l3_name, (char *) achrs_node_targfi_1[ iml_alde ] );
     if ((bol1) && (iml2 == 0)) {           /* strings are equal       */
       break;
     }
   }
   adsl_node_ctf_l4 = adsl_node_ctf_l3->getFirstChild();
   if (adsl_node_ctf_l4 == NULL) {          /* no child found          */
     if (achl_dns_name) {                   /* second pass             */
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02002W Error element name \"sslgate-configuration\" \"target-filter\" entry \"<%(ux)s>\" has no child - ignored",
                     awcl_l3_name );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   if (iml_alde == 0) {                     /* name found              */
     if (achl_dns_name) {                   /* second pass             */
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     if (awcl_ctf_name) {                   /* name already defined    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02003W Error element name \"sslgate-configuration\" \"target-filter\" entry <name> double - first name \"%(ux)s\" used",
                       awcl_ctf_name );
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     do {                                   /* loop over all siblings  */
       if (adsl_node_ctf_l4->getNodeType() == DOMNode::TEXT_NODE) {
         awcl_ctf_name = (HL_WCHAR *) adsl_node_ctf_l4->getNodeValue();
         goto p_ctf_l3_80;                  /* end entry level 3    ´  */
       }
       adsl_node_ctf_l4 = adsl_node_ctf_l4->getNextSibling();
     } while (adsl_node_ctf_l4);
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02004W Error element name \"sslgate-configuration\" \"target-filter\" entry <name> no text node" );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   /* is allow or deny - process children                              */
   memset( awcrl_ctfad_text, 0, sizeof(awcrl_ctfad_text) );
   iml_port_temp = 0;                       /* clear number of ports temporary */
   iml_protocol_temp = 0;                   /* clear number of protocols temporary */
   if (achl_dns_name) {                     /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->aimrc_port = aimrl_port;
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->achrc_protocol = achrl_protocol;
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_netw_mask = -1;                /* bits network-mask       */
     if (iml_alde == 1) {                   /* allow                   */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
         ->boc_allow = TRUE;                /* this entry allow        */
     }
   }
   do {
     if (adsl_node_ctf_l4->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_l4_name = (HL_WCHAR *) adsl_node_ctf_l4->getNodeName();
       iml1 = 0;                            /* clear index             */
       do {
         bol1 = m_cmp_u16z_u8z( &iml2, awcl_l4_name, (char *) achrs_node_targfi_ele_1[ iml1 ] );
         if ((bol1) && (iml2 == 0)) {       /* strings are equal       */
           break;
         }
         iml1++;                            /* increment index         */
       } while (iml1 < (sizeof(achrs_node_targfi_ele_1) / sizeof(achrs_node_targfi_ele_1[0])));
       do {
         if (iml1 >= (sizeof(achrs_node_targfi_ele_1) / sizeof(achrs_node_targfi_ele_1[0]))) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02005W Error element name \"sslgate-configuration\" \"target-filter\" \"%(ux)s\"\
 has invalid child \"%(ux)s\" - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         if (   (iml1 < DEF_XML_TFE1_ALPHA)
             && (awcrl_ctfad_text[iml1] != NULL)) {  /* store text fields */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02006W Error element name \"sslgate-configuration\" \"target-filter\" \"%(ux)s\"\
 child double \"%(ux)s\" - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         adsl_node_ctf_l5 = adsl_node_ctf_l4->getFirstChild();
         if (adsl_node_ctf_l5 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02007W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" has no child - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         do {                               /* search text node        */
           if (adsl_node_ctf_l5->getNodeType() == DOMNode::TEXT_NODE) {
             awcl_l5_value = (HL_WCHAR *) adsl_node_ctf_l5->getNodeValue();
             break;
           }
           adsl_node_ctf_l5 = adsl_node_ctf_l5->getNextSibling();
         } while (adsl_node_ctf_l5);
         if (adsl_node_ctf_l5 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02008W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         if (iml1 < DEF_XML_TFE1_ALPHA) {
           awcrl_ctfad_text[iml1] = awcl_l5_value;
           break;
         }
         if (iml1 == DEF_XML_TFE1_PROTOCOL) {  /* process protocol     */
           do {                             /* pseudo-loop for protocol */
             iml2 = sizeof(dss_protocol_name_no) / sizeof(dss_protocol_name_no[0]);
             while (TRUE) {                 /* loop to compare protocol name */
               iml2--;
               if (iml2 < 0) break;
               bol1 = m_cmp_u16z_u8z( &iml3, awcl_l5_value, dss_protocol_name_no[ iml2 ].achc_name );
               if (bol1 && (iml3 == 0)) break;  /* strings are equal   */
             }
             if (iml2 >= 0) {               /* protocol found          */
               iml2 = (unsigned char) dss_protocol_name_no[ iml2 ].chc_no;
               break;
             }
             /* check if numeric / 0Xnn                                */
             if (awcl_l5_value[0] != '0') break;
             if ((awcl_l5_value[1] != 'x') && (awcl_l5_value[1] != 'X')) break;
             iml3 = iml4 = 0;
             while (TRUE) {
               if (awcl_l5_value[ 2 + iml3 ] == 0) {
                 if (iml3 == 0) break;
                 iml2 = iml4;               /* get value protocol      */
                 break;
               }
               if (iml3 >= 2) break;
               iml4 <<= 4;                  /* shift old value         */
               if ((awcl_l5_value[ 2 + iml3 ] >= '0') && (awcl_l5_value[ 2 + iml3 ] <= '9')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - '0';  /* apply new bits */
               } else if ((awcl_l5_value[ 2 + iml3 ] >= 'A') && (awcl_l5_value[ 2 + iml3 ] <= 'F')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - 'A' + 10;  /* apply new bits */
               } else if ((awcl_l5_value[ 2 + iml3 ] >= 'a') && (awcl_l5_value[ 2 + iml3 ] <= 'f')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - 'a' + 10;  /* apply new bits */
               } else break;                /* invalid                 */
               iml3++;                      /* increment index input   */
             }
           } while (FALSE);
           if (iml2 < 0) {                  /* protocol not defined    */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02021W Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" found protocol \"%(ux)s\" not defined - ignored",
                             awcl_ctf_name, awcl_l5_value );
             break;
           }
           iml_protocol_temp++;             /* increment number of protocols temporary */
           if (achl_dns_name == NULL) {     /* first pass              */
             break;
           }
           /* second pass                                                */
           *achrl_protocol++ = (unsigned char) iml2;  /* save protocol */
           break;
         }
         /* from here is for port / TCP-port and UDP-port              */
         iml2 = m_get_wc_number( awcl_l5_value );
         if (iml2 < 0) {                    /* number not valid        */
           if (achl_dns_name) break;        /* second pass             */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02009W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" content \"%(ux)s\" no valid number - ignored",
                           awcl_l3_name, awcl_l4_name, awcl_l5_value );
           break;
         }
         iml_port_temp++;                   /* increment number of ports temporary */
         if (achl_dns_name == NULL) {       /* first pass              */
           break;
         }
         /* second pass                                                */
         iml3 = IPPROTO_TCP;
         if (iml1 == DEF_XML_TFE1_UDP_PORT) {
           iml3 = IPPROTO_UDP;
         }
         *aimrl_port++ = (iml3 << 24) | (iml2 & 0XFFFF);  /* save port number */
       } while (FALSE);
     }
     adsl_node_ctf_l4 = adsl_node_ctf_l4->getNextSibling();
   } while (adsl_node_ctf_l4);
   if (   (awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] == NULL)  /* no DNS-name */
       && (awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] == NULL)  /* no INETA */
       && (iml_port_temp == 0)              /* no ports                */
       && (iml_protocol_temp == 0)) {       /* no protocols            */
     if (achl_dns_name) goto p_ctf_l3_80;   /* second pass             */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02010W Error element \"target-filter\" \"%(ux)s\" contains no valid entries - ignored",
                     awcl_l3_name );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   if (awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] == NULL) {  /* no DNS-name */
     goto p_ctf_l4_40;                      /* check INETA             */
   }
   achl1 = XMLString::transcode( (XMLCh *) awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] );
   iml1 = strlen( achl1 ) + 1;              /* length of name          */
   if (achl_dns_name == NULL) {             /* first pass              */
     iml_len_dns += iml1;                   /* add to length DNS names */
   } else {                                 /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->achc_dns_name = achl_dns_name;
     memcpy( achl_dns_name, achl1, iml1 );  /* copy DNS-name           */
     achl_dns_name += iml1;                 /* after this string       */
   }
   XMLString::release( &achl1 );            /* free DNS-name again     */

   p_ctf_l4_40:                             /* check INETA             */
   if (awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] == NULL) {  /* no INETA  */
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   iml1 = 0;                                /* set index in string     */
   iml2 = 0;                                /* set element index       */

   p_ctf_l4_44:                             /* loop to get number      */
   iml3 = 0;                                /* clear number            */
   iml4 = iml1;                             /* save position in string */
   while (   (*(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) >= '0')
          && (*(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) <= '9')) {
     iml3 *= 10;
     iml3 += *(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) - '0';
     iml1++;                                /* next digit              */
   }
   if (iml1 <= iml4) {                      /* no digits found         */
     if (achl_dns_name) goto p_ctf_l4_80;   /* second pass             */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02011W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" cannot recognize digits - ignored",
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   iml4 = 255;                              /* maximum value part INETA */
   if (iml2 == 4) iml4 = 32;                /* maximum length network-mask */
   if (iml3 > iml4) {
     if (achl_dns_name) goto p_ctf_l4_80;   /* second pass             */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02012W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" recognized digits too high (%d) - ignored",
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ], iml3 );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (achl_dns_name) {                     /* second pass             */
     if (iml2 < 4) {                        /* still in INETA          */
       *((unsigned char *)
         &((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
           ->umc_ineta + iml2) = (unsigned char) iml3;
     } else {                               /* network-mask            */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
         ->imc_netw_mask = iml3;
     }
   }
   iml2++;                                  /* next number             */
   /* check end of string                                              */
   if (*(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) == 0) {
     if (iml2 == 5) goto p_ctf_l4_80;       /* all done with element   */
     if (iml2 < 4) {                        /* not complete INETA      */
       if (achl_dns_name) goto p_ctf_l4_80;  /* second pass            */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02013W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" recognized too less parts in INETA - ignored",
                       awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
       goto p_ctf_l4_80;                    /* all done with element   */
     }
     if (achl_dns_name == NULL) goto p_ctf_l4_80;  /* first pass       */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_netw_mask = 32;                /* set all bits in network-mask */
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (*(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) == L'.') {
     if (iml2 < 4) {                        /* still in INETA          */
       iml1++;                              /* this character done     */
       goto p_ctf_l4_44;                    /* get next part of INETA  */
     }
     if (achl_dns_name == NULL) {           /* first pass              */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02014W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" contains more than four parts in INETA - ignored",
                       awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
       goto p_ctf_l4_80;                    /* all done with element   */
     }
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_netw_mask = 0;                 /* ignore INETA thru network-mask */
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (*(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) == L'/') {
     if (iml2 == 4) {                       /* at end of INETA         */
       iml1++;                              /* this character done     */
       goto p_ctf_l4_44;                    /* get network-mask        */
     }
     if (achl_dns_name == NULL) {           /* first pass              */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02015W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" contains less than four parts in INETA before network-mask - ignored",
                       awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
       goto p_ctf_l4_80;                    /* all done with element   */
     }
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_netw_mask = 0;                 /* ignore INETA thru network-mask */
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (achl_dns_name == NULL) {             /* first pass              */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02016W Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" contains invalid character %(ux)c - ignored",
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ],
                     *(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1) );
   } else {                                 /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_netw_mask = 0;                 /* ignore INETA thru network-mask */
   }

   p_ctf_l4_80:                             /* all done with element   */
   if (achl_dns_name) {                     /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_no_port = iml_port_temp;
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
       ->imc_no_protocol = iml_protocol_temp;
   }
   iml_no_port += iml_port_temp;            /* add to number of ports  */
   iml_no_protocol += iml_protocol_temp;    /* add to number of protocols */
   iml_no_targfi_ele_1++;                   /* increment number of elements */
   iml_no_targfi_ele_deny++;                /* number of elements deny */
   if (iml_alde == 1) {                     /* allow                   */
     iml_no_targfi_ele_deny = 0;            /* number of elements deny */
   }

   p_ctf_l3_80:                             /* end entry level 3    ´  */
   adsl_node_ctf_l3 = adsl_node_ctf_l3->getNextSibling();
   if (adsl_node_ctf_l3) goto p_ctf_l3_20;  /* next entry level 3      */
   if (achl_dns_name) {                     /* second pass             */
     return adsl_targfi_1;                  /* all done                */
   }
   if (awcl_ctf_name == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02017W Error element name \"sslgate-configuration\" \"target-filter\" no <name> found - no target-filter generated" );
     return NULL;                           /* cannot generate target-filter */
   }
   /* check if name double                                             */
// UUU 12.06.06 KB
   if (iml_no_targfi_ele_1 == 0) {          /* no elements found       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02018W Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" no allow or deny found - no target-filter generated",
                     awcl_ctf_name );
     return NULL;                           /* cannot generate target-filter */
   }
   if (iml_no_targfi_ele_1 == iml_no_targfi_ele_deny) {  /* only deny found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02019W Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" only deny found, configuration illogic - no target-filter generated",
                     awcl_ctf_name );
     return NULL;                           /* cannot generate target-filter */
   }
   if (iml_no_targfi_ele_deny) {            /* number of elements deny */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02020W Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" at end sections deny found (%d) - configuration illogic",
                     awcl_ctf_name, iml_no_targfi_ele_deny );
   }
   iml1 = (iml_no_protocol * sizeof(char) + sizeof(int) - 1) & (0 - sizeof(int));
   iml2 = (HL_WCSLEN( awcl_ctf_name ) + 1) * sizeof(HL_WCHAR);
   adsl_targfi_1 = (struct dsd_targfi_1 *) malloc( sizeof(struct dsd_targfi_1)
                     + iml_no_targfi_ele_1 * sizeof(struct dsd_targfi_ele_1)
                     + iml_no_port * sizeof(int)
                     + iml1 + iml2 + iml_len_dns );
   memset( adsl_targfi_1, 0, sizeof(struct dsd_targfi_1)
                               + iml_no_targfi_ele_1 * sizeof(struct dsd_targfi_ele_1) );
   memcpy( ((char *) ((int *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1) + iml_no_port) + iml1),
           awcl_ctf_name, iml2 );
   adsl_targfi_1->awcc_name = (HL_WCHAR *) ((char *) ((int *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1)
                                + iml_no_targfi_ele_1) + iml_no_port) + iml1);
   adsl_targfi_1->imc_no_targfi_ele_1 = iml_no_targfi_ele_1;
   if (iml_len_dns) {                       /* check if includes DNS filter */
     adsl_targfi_1->boc_with_dns = TRUE;    /* includes DNS filter     */
   }
   aimrl_port = (int *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1);
   achrl_protocol = (char *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1) + iml_no_targfi_ele_1)
                               + iml_no_port * sizeof(int);
   achl_dns_name = (char *) ((int *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_1 + 1)
                     + iml_no_targfi_ele_1) + iml_no_port) + iml1 + iml2;
   goto p_ctf_l3_00;                        /* process second pass     */
} /* end m_conf_targfi_1()                                             */
#endif

/** process configuration of target-filter                             */
static struct dsd_targfi_1 * m_conf_targfi_1( struct dsd_conf_serv *adsp_cs,
                                              DOMNode *adsp_node_targfi_d ) {
   int        iml_rc;                       /* return code             */
   int        iml1, iml2, iml3, iml4;       /* working-variables       */
   int        iml_alde;                     /* index allow / deny      */
   int        iml_cmp;                      /* compare values          */
   BOOL       bol1;                         /* working-variable        */
   BOOL       bol_rc;                       /* return value            */
   BOOL       bol_prot_tcp;                 /* protocol TCP defined    */
   BOOL       bol_prot_udp;                 /* protocol UDP defined    */
   BOOL       bol_blacklist_def;            /* use-as-blacklist defined */
   BOOL       bol_use_blacklist;            /* use-as-blacklist        */
   BOOL       bol_pass_error_1;             /* pass only for error message */
   BOOL       bol_pass_error_2;             /* pass only for error message */
   char       *achl1, *achl2;               /* working variables       */
   int        iml_no_targfi_ele_1;          /* number of elements      */
   int        iml_no_targfi_ele_deny;       /* number of elements deny */
   int        iml_last_targfi_ele_deny;     /* number of last element deny */
   int        iml_no_port;                  /* number of ports         */
   int        iml_no_protocol;              /* number of protocols     */
   int        iml_port_temp;                /* number of ports temporary */
   int        iml_protocol_temp;            /* number of protocols temporary */
   int        iml_len_ineta;                /* length INETAs           */
   int        iml_len_dns;                  /* length DNS names        */
#ifdef XYZ_160501
save line= col=
#ifndef B160501
   int        iml_save_file_line;           /* save line number in XML file */
   int        iml_save_file_col;            /* save column number in XML file */
#endif
#endif
   char       *achl_ineta;                  /* address INETAs          */
   int        *aimrl_port;                  /* address array ports     */
   char       *achrl_protocol;              /* address array protocols */
   char       *achl_dns_name;               /* address DNS-name        */
   DOMNode    *adsl_node_ctf_save;          /* save node level 3       */
   DOMNode    *adsl_node_ctf_l3;            /* node level 3            */
   DOMNode    *adsl_node_ctf_l4;            /* node level 4            */
   DOMNode    *adsl_node_ctf_l5;            /* node level 5            */
   DOMNode    *adsl_node_ctf_tcp;           /* node TCP defined        */
   DOMNode    *adsl_node_ctf_udp;           /* node UDP defined        */
   DOMNode    *adsrl_node_ctf_text[ DEF_XML_TFE1_ALPHA ];  /* store text fields */
   HL_WCHAR   *awcl_l3_name;                /* name node level 3       */
   HL_WCHAR   *awcl_l4_name;                /* name node level 4       */
   HL_WCHAR   *awcl_l4_value;               /* value node level 4      */
   HL_WCHAR   *awcl_l5_value;               /* value node level 5      */
   HL_WCHAR   *awcl_ctf_name;               /* name of this target-filter */
   HL_WCHAR   *awcrl_ctfad_text[ DEF_XML_TFE1_ALPHA ];  /* store text fields */
   struct dsd_targfi_1 *adsl_targfi_w1;     /* result                  */
   struct addrinfo dsl_addrinfo_l;
   struct addrinfo *adsl_addrinfo_w1;
   char       chrl_ineta[ 128 ];            /* INETA                   */

   adsl_node_ctf_save = adsp_node_targfi_d->getFirstChild();
   if (adsl_node_ctf_save == NULL) {        /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02000W Error element name \"sslgate-configuration\" \"target-filter\" has no child - ignored" );
     return NULL;                           /* this entry not valid    */
   }
   adsl_targfi_w1 = NULL;                   /* first pass, not yet output */
   iml_len_ineta = 0;                       /* clear length INETAs     */
   iml_no_port = 0;                         /* clear number of ports   */
   iml_no_protocol = 0;                     /* clear number of protocols */
   iml_len_dns = 0;                         /* clear length DNS names  */
   bol_pass_error_1 = FALSE;                /* pass only for error message */
   bol_pass_error_2 = FALSE;                /* pass only for error message */
   awcl_ctf_name = NULL;                    /* clear name of this target-filter */

   p_ctf_l3_00:                             /* process entries level 3 */
   iml_no_targfi_ele_1 = 0;                 /* clear number of elements */
   iml_no_targfi_ele_deny = 0;              /* clear number of elements deny */
   iml_last_targfi_ele_deny = 0;            /* clear number of last element deny */
   bol_blacklist_def = FALSE;               /* use-as-blacklist defined */
   bol_use_blacklist = FALSE;               /* use-as-blacklist        */
   adsl_node_ctf_l3 = adsl_node_ctf_save;   /* get first element       */

   p_ctf_l3_20:                             /* next entry level 3      */
   if (adsl_node_ctf_l3->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   awcl_l3_name = (HL_WCHAR *) adsl_node_ctf_l3->getNodeName();
   iml_alde = sizeof(achrs_node_targfi_1) / sizeof(achrs_node_targfi_1[0]);
   while (TRUE) {                           /* search node name in table */
     iml_alde--;                            /* decrement index         */
     if (iml_alde < 0) {                    /* was already last entry  */
       if (adsl_targfi_w1) {                /* second pass             */
         goto p_ctf_l3_80;                  /* end entry level 3    ´  */
       }
       if (bol_pass_error_2) goto p_ctf_l3_80;  /* pass only for error message */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02001W Error element name \"sslgate-configuration\" \"target-filter\" invalid node found \"%(ux)s\" - ignored",
                       awcl_l3_name );
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     bol1 = m_cmp_vx_vx( &iml2,
                         awcl_l3_name, -1, ied_chs_utf_16,
                         (char *) achrs_node_targfi_1[ iml_alde ], -1, ied_chs_utf_8 );
     if ((bol1) && (iml2 == 0)) {           /* strings are equal       */
       break;
     }
   }
   adsl_node_ctf_l4 = adsl_node_ctf_l3->getFirstChild();
   if (adsl_node_ctf_l4 == NULL) {          /* no child found          */
     if (adsl_targfi_w1) {                  /* second pass             */
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     if (bol_pass_error_2) goto p_ctf_l3_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02002W Error element name \"sslgate-configuration\" \"target-filter\" entry \"<%(ux)s>\" has no child - ignored",
                     awcl_l3_name );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   if (iml_alde == 0) {                     /* name found              */
     if (adsl_targfi_w1) {                  /* second pass             */
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     if (bol_pass_error_2) goto p_ctf_l3_80;  /* pass only for error message */
     if (awcl_ctf_name) {                   /* name already defined    */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02003W Error element name \"sslgate-configuration\" \"target-filter\" entry <name> double - first name \"%(ux)s\" used",
                       awcl_ctf_name );
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     do {                                   /* loop over all siblings  */
       if (adsl_node_ctf_l4->getNodeType() == DOMNode::TEXT_NODE) {
         awcl_ctf_name = (HL_WCHAR *) adsl_node_ctf_l4->getNodeValue();
         goto p_ctf_l3_80;                  /* end entry level 3    ´  */
       }
       adsl_node_ctf_l4 = adsl_node_ctf_l4->getNextSibling();
     } while (adsl_node_ctf_l4);
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02004W Error element name \"sslgate-configuration\" \"target-filter\" entry <name> no text node" );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   if (iml_alde == 3) {                     /* usa-as-blacklist found  */
     if (bol_blacklist_def) {               /* use-as-blacklist already defined */
       if (adsl_targfi_w1) {                /* second pass             */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02032W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" <use-as-blacklist> defined multiple times - ignored",
                         MAC_XML_LINENO( adsl_node_ctf_l4 ), MAC_XML_COL( adsl_node_ctf_l4 ),
                         awcl_ctf_name );
       }
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     do {                                   /* loop over all siblings  */
       if (adsl_node_ctf_l4->getNodeType() == DOMNode::TEXT_NODE) {
         awcl_l4_value = (HL_WCHAR *) adsl_node_ctf_l4->getNodeValue();
//---
         bol_rc = m_cmp_vx_vx( &iml_cmp,
                               awcl_l4_value, -1, ied_chs_utf_16,
                               (void *) "YES", -1, ied_chs_utf_8 );
         if ((bol_rc) && (iml_cmp == 0)) {  /* strings are equal, YES  */
           bol_use_blacklist = TRUE;        /* use-as-blacklist        */
           if (adsl_targfi_w1) {            /* second pass             */
             adsl_targfi_w1->boc_blacklist = TRUE;  /* use-as-blacklist */
           }
           bol_blacklist_def = TRUE;        /* use-as-blacklist defined */
           goto p_ctf_l3_80;                /* end entry level 3    ´  */
         }
         bol_rc = m_cmp_vx_vx( &iml_cmp,
                               awcl_l4_value, -1, ied_chs_utf_16,
                               (void *) "NO", -1, ied_chs_utf_8 );
         if ((bol_rc) && (iml_cmp == 0)) {  /* strings are equal, NO   */
           bol_blacklist_def = TRUE;        /* use-as-blacklist defined */
           goto p_ctf_l3_80;                /* end entry level 3    ´  */
         }
         if (adsl_targfi_w1 == NULL) {      /* first pass, name not yet defined */
           goto p_ctf_l3_80;                /* end entry level 3    ´  */
         }
         if (bol_pass_error_2) goto p_ctf_l3_80;  /* pass only for error message */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02033W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" \"use-as-blacklist\" neither YES nor NO: \"%(ux)s\" - ignored",
                         MAC_XML_LINENO( adsl_node_ctf_l4 ), MAC_XML_COL( adsl_node_ctf_l4 ),
                         awcl_ctf_name, awcl_l4_value );
//---
         goto p_ctf_l3_80;                  /* end entry level 3    ´  */
       }
       adsl_node_ctf_l4 = adsl_node_ctf_l4->getNextSibling();
     } while (adsl_node_ctf_l4);
     if (adsl_targfi_w1) {                  /* second pass             */
       goto p_ctf_l3_80;                    /* end entry level 3    ´  */
     }
     if (bol_pass_error_2) goto p_ctf_l3_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" entry <use-as-blacklist> no text node",
                     MAC_XML_LINENO( adsl_node_ctf_l4 ), MAC_XML_COL( adsl_node_ctf_l4 ) );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   /* is allow or deny - process children                              */
   memset( awcrl_ctfad_text, 0, sizeof(awcrl_ctfad_text) );
   iml_port_temp = 0;                       /* clear number of ports temporary */
   iml_protocol_temp = 0;                   /* clear number of protocols temporary */
   bol_prot_tcp = bol_prot_udp = FALSE;     /* protocols not defined   */
   adsl_node_ctf_tcp = adsl_node_ctf_udp = NULL;  /* node TCP and UDP undefined */
#ifdef XYZ_160501
save line= col=
#ifndef B160501
   iml_save_file_line = MAC_XML_LINENO( adsl_node_ctf_l3 );  /* save line number in XML file */
   iml_save_file_col = MAC_XML_COL( adsl_node_ctf_l3 );  /* save column number in XML file */
#endif
#endif
   if (adsl_targfi_w1) {                    /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_off_port = ((char *) aimrl_port) - ((char *) adsl_targfi_w1);  /* offset of ports */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_off_protocol = ((char *) achrl_protocol) - ((char *) adsl_targfi_w1);  /* offset of protocols */
     if (iml_alde == 1) {                   /* allow                   */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
         ->boc_allow = TRUE;                /* this entry allow        */
     }
   }
   do {
     if (adsl_node_ctf_l4->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_l4_name = (HL_WCHAR *) adsl_node_ctf_l4->getNodeName();
       iml1 = 0;                            /* clear index             */
       do {
         bol1 = m_cmp_vx_vx( &iml2,
                             awcl_l4_name, -1, ied_chs_utf_16,
                             (char *) achrs_node_targfi_ele_1[ iml1 ], -1, ied_chs_utf_8 );
         if ((bol1) && (iml2 == 0)) {       /* strings are equal       */
           break;
         }
         iml1++;                            /* increment index         */
       } while (iml1 < (sizeof(achrs_node_targfi_ele_1) / sizeof(achrs_node_targfi_ele_1[0])));
       do {
         if (iml1 >= (sizeof(achrs_node_targfi_ele_1) / sizeof(achrs_node_targfi_ele_1[0]))) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02005W Error element name \"sslgate-configuration\" \"target-filter\" \"%(ux)s\"\
 has invalid child \"%(ux)s\" - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         if (   (iml1 < DEF_XML_TFE1_ALPHA)
             && (awcrl_ctfad_text[iml1] != NULL)) {  /* store text fields */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02006W Error element name \"sslgate-configuration\" \"target-filter\" \"%(ux)s\"\
 child double \"%(ux)s\" - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         adsl_node_ctf_l5 = adsl_node_ctf_l4->getFirstChild();
         if (adsl_node_ctf_l5 == NULL) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02007W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" has no child - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         do {                               /* search text node        */
           if (adsl_node_ctf_l5->getNodeType() == DOMNode::TEXT_NODE) {
             awcl_l5_value = (HL_WCHAR *) adsl_node_ctf_l5->getNodeValue();
             break;
           }
           adsl_node_ctf_l5 = adsl_node_ctf_l5->getNextSibling();
         } while (adsl_node_ctf_l5);
         if (adsl_node_ctf_l5 == NULL) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02008W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" no TEXT_NODE found - ignored",
                           awcl_l3_name, awcl_l4_name );
           break;
         }
         if (iml1 < DEF_XML_TFE1_ALPHA) {
           adsrl_node_ctf_text[iml1] = adsl_node_ctf_l5;  /* save the node */
           awcrl_ctfad_text[iml1] = awcl_l5_value;  /* save the value  */
           break;
         }
         if (iml1 == DEF_XML_TFE1_PROTOCOL) {  /* process protocol     */
           do {                             /* pseudo-loop for protocol */
             iml2 = sizeof(dss_protocol_name_no) / sizeof(dss_protocol_name_no[0]);
             while (TRUE) {                 /* loop to compare protocol name */
               iml2--;
               if (iml2 < 0) break;
               bol1 = m_cmp_u16z_u8z( &iml3, awcl_l5_value, dss_protocol_name_no[ iml2 ].achc_name );
               if (bol1 && (iml3 == 0)) break;  /* strings are equal   */
             }
             if (iml2 >= 0) {               /* protocol found          */
               iml2 = (unsigned char) dss_protocol_name_no[ iml2 ].chc_no;
               break;
             }
             /* check if numeric / 0Xnn                                */
             if (awcl_l5_value[0] != '0') break;
             if ((awcl_l5_value[1] != 'x') && (awcl_l5_value[1] != 'X')) break;
             iml3 = iml4 = 0;
             while (TRUE) {
               if (awcl_l5_value[ 2 + iml3 ] == 0) {
                 if (iml3 == 0) break;
                 iml2 = iml4;               /* get value protocol      */
                 break;
               }
               if (iml3 >= 2) break;
               iml4 <<= 4;                  /* shift old value         */
               if ((awcl_l5_value[ 2 + iml3 ] >= '0') && (awcl_l5_value[ 2 + iml3 ] <= '9')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - '0';  /* apply new bits */
               } else if ((awcl_l5_value[ 2 + iml3 ] >= 'A') && (awcl_l5_value[ 2 + iml3 ] <= 'F')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - 'A' + 10;  /* apply new bits */
               } else if ((awcl_l5_value[ 2 + iml3 ] >= 'a') && (awcl_l5_value[ 2 + iml3 ] <= 'f')) {
                 iml4 |= awcl_l5_value[ 2 + iml3 ] - 'a' + 10;  /* apply new bits */
               } else break;                /* invalid                 */
               iml3++;                      /* increment index input   */
             }
           } while (FALSE);
           if (iml2 < 0) {                  /* protocol not defined    */
             if (adsl_targfi_w1 == NULL) break;  /* first pass, name not yet defined */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02009W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" found protocol \"%(ux)s\" not defined - ignored",
                             MAC_XML_LINENO( adsl_node_ctf_l5 ), MAC_XML_COL( adsl_node_ctf_l5 ),
                             awcl_ctf_name, awcl_l5_value );
             break;
           }
           iml_protocol_temp++;             /* increment number of protocols temporary */
           if (iml2 == IPPROTO_TCP) {       /* TCP specified           */
             bol_prot_tcp = TRUE;           /* set value               */
           }
           if (iml2 == IPPROTO_UDP) {       /* UDP specified           */
             bol_prot_udp = TRUE;           /* set value               */
           }
           if (adsl_targfi_w1 == NULL) {    /* first pass              */
             break;
           }
           /* second pass                                                */
           *achrl_protocol++ = (unsigned char) iml2;  /* save protocol */
           break;
         }
         /* from here is for port / TCP-port and UDP-port              */
         iml2 = m_get_wc_number( awcl_l5_value );
         if (iml2 < 0) {                    /* number not valid        */
           if (adsl_targfi_w1 == NULL) break;  /* not second pass      */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02010W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" content \"%(ux)s\" no valid number - ignored",
                           awcl_l3_name, awcl_l4_name, awcl_l5_value );
           break;
         }
         if (   (iml2 == 0)                 /* number zero             */
             || (iml2 >= 0X010000)) {       /* number too high         */
           if (adsl_targfi_w1 == NULL) break;  /* not second pass      */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02011W Error element \"target-filter\" \"%(ux)s\" name \"%(ux)s\" content \"%(ux)s\" / %d out of range - ignored",
                           awcl_l3_name, awcl_l4_name, awcl_l5_value, iml2 );
           break;
         }
         iml_port_temp++;                   /* increment number of ports temporary */
         if (iml1 != DEF_XML_TFE1_UDP_PORT) {
           iml3 = IPPROTO_TCP;
           if (adsl_node_ctf_tcp == NULL) {  /* node TCP not yet defined */
             adsl_node_ctf_tcp = adsl_node_ctf_l4;  /* save current node */
           }
         } else {
           iml3 = IPPROTO_UDP;
           if (adsl_node_ctf_udp == NULL) {  /* node UDP not yet defined */
             adsl_node_ctf_udp = adsl_node_ctf_l4;  /* save current node */
           }
         }
         if (adsl_targfi_w1 == NULL) {      /* first pass              */
           break;
         }
         /* second pass                                                */
         *aimrl_port++ = (iml3 << 24) | (iml2 & 0XFFFF);  /* save port number */
       } while (FALSE);
     }
     adsl_node_ctf_l4 = adsl_node_ctf_l4->getNextSibling();
   } while (adsl_node_ctf_l4);
   if (   (awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] == NULL)  /* no DNS-name */
       && (awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] == NULL)  /* no INETA */
       && (iml_port_temp == 0)              /* no ports                */
       && (iml_protocol_temp == 0)) {       /* no protocols            */
     if (adsl_targfi_w1) goto p_ctf_l3_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02012W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" contains no valid entries - ignored",
                     MAC_XML_LINENO( adsl_node_ctf_l3 ), MAC_XML_COL( adsl_node_ctf_l3 ), awcl_l3_name );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
   if (awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] == NULL) {  /* no DNS-name */
     goto p_ctf_l4_40;                      /* check INETA             */
   }
   achl1 = XMLString::transcode( (XMLCh *) awcrl_ctfad_text[ DEF_XML_TFE1_DNS ] );
   iml1 = strlen( achl1 ) + 1;              /* length of name          */
   if (adsl_targfi_w1 == NULL) {            /* first pass              */
     iml_len_dns += iml1;                   /* add to length DNS names */
   } else {                                 /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_off_dns_name = achl_dns_name - ((char *) adsl_targfi_w1);  /* offset DNS-name */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_len_dns_name = iml1 - 1;       /* length DNS-name without zero */
     memcpy( achl_dns_name, achl1, iml1 );  /* copy DNS-name           */
     achl_dns_name += iml1;                 /* after this string       */
   }
   XMLString::release( &achl1 );            /* free DNS-name again     */

   p_ctf_l4_40:                             /* check INETA             */
   if (awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] == NULL) {  /* no INETA  */
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   achl1 = chrl_ineta;                      /* INETA                   */
   iml1 = 0;                                /* set index in string     */

   p_ctf_l4_44:                             /* loop to get number      */
   iml2 = *(awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1);  /* get unicode character */
   if (   ((iml2 >= '0') && (iml2 <= '9'))
       || ((iml2 >= 'A') && (iml2 <= 'F'))
       || ((iml2 >= 'a') && (iml2 <= 'f'))
       || (iml2 == '.')
       || (iml2 == ':')) {
     if (achl1 < (chrl_ineta + sizeof(chrl_ineta) - 1)) {
       *achl1++ = (unsigned char) iml2;     /* save this character     */
       iml1++;                              /* this character has been processed */
       goto p_ctf_l4_44;                    /* loop to get number      */
     }
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02013W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" too long - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (achl1 <= chrl_ineta) {               /* no digits found         */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02014W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" no digits found - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   *achl1 = 0;                              /* make zero-terminated    */
   iml3 = 0;                                /* default prefix          */
   if (iml2 == 0) goto p_ctf_l4_48;         /* prefix recognized       */
   if (iml2 != '/') {                       /* not separator for prefix */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02015W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" invalid character \"%c\" found - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ], iml2 );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   iml3 = m_get_wc_number( awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] + iml1 + 1 );
   if (iml3 < 0) {                          /* number not valid        */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02016W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" prefix not valid number - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (iml3 == 0) {                         /* prefix zero not valid        */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02017W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%(ux)s\" prefix zero not valid - ineta ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, awcrl_ctfad_text[ DEF_XML_TFE1_INETA ] );
     goto p_ctf_l4_80;                      /* all done with element   */
   }

   p_ctf_l4_48:                             /* prefix recognized       */
   memset( &dsl_addrinfo_l, 0, sizeof(struct addrinfo) );
   dsl_addrinfo_l.ai_family = AF_UNSPEC;
   dsl_addrinfo_l.ai_flags = AI_NUMERICHOST;
   adsl_addrinfo_w1 = NULL;
   iml_rc = getaddrinfo( chrl_ineta, NULL, &dsl_addrinfo_l, &adsl_addrinfo_w1 );
   if (iml_rc) {                            /* error occured           */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02018W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%s\" getaddrinfo() returned Error %d %d - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, chrl_ineta, iml_rc, D_TCP_ERROR );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (adsl_addrinfo_w1 == NULL) {          /* no INETA returned       */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02019W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%s\" getaddrinfo() did not return INETA - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, chrl_ineta );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   iml2 = 0;                                /* clear length            */
   switch (adsl_addrinfo_w1->ai_family) {
     case AF_INET:                          /* IPV4                    */
       iml2 = 4;                            /* set length              */
       achl1 = (char *) &((struct sockaddr_in *) adsl_addrinfo_w1->ai_addr)->sin_addr;
       break;
     case AF_INET6:                         /* IPV6                    */
       iml2 = 16;                           /* set length              */
       achl1 = (char *) &((struct sockaddr_in6 *) adsl_addrinfo_w1->ai_addr)->sin6_addr;
       break;
   }
   if (iml2 == 0) {                         /* did not recognize family */
     freeaddrinfo( adsl_addrinfo_w1 );      /* free addresses again    */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02020W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%s\" getaddrinfo() returned invalid family %d - ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, chrl_ineta, adsl_addrinfo_w1->ai_family );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (iml3 >= (iml2 * 8)) {                /* prefix too high         */
     freeaddrinfo( adsl_addrinfo_w1 );      /* free addresses again    */
     if (adsl_targfi_w1) goto p_ctf_l4_80;  /* second pass             */
     if (bol_pass_error_2) goto p_ctf_l4_80;  /* pass only for error message */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02021W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%s\" prefix %d too high for length ineta %d - ineta ignored",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, chrl_ineta, iml3, iml2  );
     goto p_ctf_l4_80;                      /* all done with element   */
   }
   if (iml3 == 0) goto p_ctf_l4_56;         /* no prefix, prefix is o.k. */
   iml4 = iml2 * 8 - iml3;                  /* number of bits that should be zero */
   achl2 = achl1 + iml2;                    /* end of INETA            */
   while (iml4 >= 8) {                      /* check full bytes        */
     if (*(--achl2)) {                      /* byte not zero           */
       goto p_ctf_l4_52;                    /* prefix bits not zero    */
     }
     iml4 -= 8;                             /* decrement number of bits */
   }
   if (iml4 == 0) goto p_ctf_l4_56;         /* prefix is o.k.          */
   achl2--;                                 /* byte before             */
   if (((*((unsigned char *) achl2) << (8 - iml4)) & 0XFF) == 0) {
     goto p_ctf_l4_56;                      /* prefix is o.k.          */
   }

   p_ctf_l4_52:                             /* prefix bits not zero    */
   if (adsl_targfi_w1 == NULL) {            /* first pass              */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02022W line=%d col=%d Error element \"target-filter\" \"%(ux)s\" ineta \"%s\" prefix /%d bits not zero - bits of ineta cleared",
                     MAC_XML_LINENO( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     MAC_XML_COL( adsrl_node_ctf_text[ DEF_XML_TFE1_INETA ] ),
                     awcl_l3_name, chrl_ineta, iml3 );
     goto p_ctf_l4_56;                      /* prefix is o.k.          */
   }
   iml4 = iml2 * 8 - iml3;                  /* number of bits that should be zero */
   achl2 = achl1 + iml2;                    /* end of INETA            */
   while (iml4 >= 8) {                      /* check full bytes        */
     *(--achl2) = 0;                        /* set byte zero           */
     iml4 -= 8;                             /* decrement number of bits */
   }
   achl2--;                                 /* byte before             */
   *((unsigned char *) achl2) &= 0XFF << iml4;  /* clear the bits      */

   p_ctf_l4_56:                             /* prefix is o.k.          */
   if (adsl_targfi_w1 == NULL) {            /* first pass              */
     iml_len_ineta += iml2;                 /* add length INETAs       */
   } else {                                 /* second pass             */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_off_ineta = achl_ineta - ((char *) adsl_targfi_w1);  /* offset INETA */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_len_ineta = iml2;              /* length INETA            */
     ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
       ->imc_prefix_ineta = iml3;           /* prefix of INETA         */
     memcpy( achl_ineta, achl1, iml2 );
     achl_ineta += iml2;
   }
   freeaddrinfo( adsl_addrinfo_w1 );        /* free addresses again    */

   p_ctf_l4_80:                             /* all done with element   */
#ifdef XYZ_160501
   iml_port_temp == 0
   iml_protocol_temp == 0
   iml_len_ineta == 0
   iml_len_dns == 0
   if (adsl_targfi_w1 == NULL) {            /* first pass              */
goto
   p_ctf_l3_80:                             /* end entry level 3    ´  */
   }
save line= col=
---
   iml_len_ineta = 0;                       /* clear length INETAs     */
   iml_no_port = 0;                         /* clear number of ports   */
   iml_no_protocol = 0;                     /* clear number of protocols */
   iml_len_dns = 0;                         /* clear length DNS names  */
#endif
#ifndef B160501
   if ((iml_len_ineta + iml_no_port + iml_no_protocol + iml_len_dns) == 0) {
     bol_pass_error_1 = TRUE;               /* pass only for error message */
//   if (adsl_targfi_w1) goto p_ctf_l3_80;  /* second pass             */
//   if (adsl_targfi_w1 == NULL) goto p_ctf_l3_80;  /* not second pass */
// to-do 03.05.16 KB - how to display error message; second pass, with name
     if (bol_pass_error_2 == FALSE) goto p_ctf_l3_80;  /* second pass  */
#ifdef XYZ1
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02031W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" no parameters found - ignored",
                     iml_save_file_line, iml_save_file_col,
                     awcl_ctf_name );
#endif
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02031W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" no parameters found - ignored",
                     MAC_XML_LINENO( adsl_node_ctf_l3 ), MAC_XML_COL( adsl_node_ctf_l3 ),
                     awcl_ctf_name );
     goto p_ctf_l3_80;                      /* end entry level 3    ´  */
   }
#endif
   if (iml_protocol_temp) {                 /* with protocols          */
     if (adsl_node_ctf_tcp) {               /* node port TCP defined   */
       if (bol_prot_tcp == FALSE) {         /* protocol TCP not defined */
         if (adsl_targfi_w1 == NULL) {      /* not second pass         */
           iml_protocol_temp++;             /* add protocol TCP        */
         } else {                           /* second pass             */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02023W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" found TCP-port but not protocol IPPROTO_TCP - protocol TCP added to list of protocols",
                           MAC_XML_LINENO( adsl_node_ctf_tcp ), MAC_XML_COL( adsl_node_ctf_tcp ),
                           awcl_ctf_name );
           *achrl_protocol++ = (unsigned char) IPPROTO_TCP;  /* save protocol TCP */
         }
       }
     }
     if (adsl_node_ctf_udp) {               /* node port UDP defined   */
       if (bol_prot_udp == FALSE) {         /* protocol UDP not defined */
         if (adsl_targfi_w1 == NULL) {      /* not second pass         */
           iml_protocol_temp++;             /* add protocol UDP        */
         } else {                           /* second pass             */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02024W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" found UDP-port but not protocol IPPROTO_UDP - protocol UDP added to list of protocols",
                           MAC_XML_LINENO( adsl_node_ctf_udp ), MAC_XML_COL( adsl_node_ctf_udp ),
                           awcl_ctf_name );
           *achrl_protocol++ = (unsigned char) IPPROTO_UDP;  /* save protocol UDP */
         }
       }
     }
   }
   if (adsl_targfi_w1) {                    /* second pass             */
     if (iml_port_temp) {                   /* with ports              */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
         ->imc_no_port = iml_port_temp;
     } else {                               /* no ports                */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
         ->imc_off_port = 0;                /* clear offset of ports   */
     }
     if (iml_protocol_temp) {               /* with protocols          */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
         ->imc_no_protocol = iml_protocol_temp;
     } else {                               /* no protocols            */
       ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1)
         ->imc_off_protocol = 0;            /* offset of protocols     */
     }
   }
   iml_no_port += iml_port_temp;            /* add to number of ports  */
   iml_no_protocol += iml_protocol_temp;    /* add to number of protocols */
   iml_no_targfi_ele_1++;                   /* increment number of elements */
   iml_no_targfi_ele_deny++;                /* number of elements deny */
   if (iml_alde == 1) {                     /* allow                   */
     iml_no_targfi_ele_deny = 0;            /* number of elements deny */
   } else {                                 /* deny                    */
     iml_last_targfi_ele_deny = iml_no_targfi_ele_1;  /* set number of last element deny */
   }

   p_ctf_l3_80:                             /* end entry level 3    ´  */
   adsl_node_ctf_l3 = adsl_node_ctf_l3->getNextSibling();
   if (adsl_node_ctf_l3) goto p_ctf_l3_20;  /* next entry level 3      */
   if (adsl_targfi_w1) {                    /* second pass             */
     return adsl_targfi_w1;                 /* all done                */
   }
   if (awcl_ctf_name == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02025W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" no <name> found - no target-filter generated",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ) );
     return NULL;                           /* cannot generate target-filter */
   }
   if (bol_pass_error_2 == FALSE) {         /* pass only for error message */
     bol_pass_error_2 = bol_pass_error_1;   /* pass only for error message */
     if (bol_pass_error_2) {                /* pass only for error message */
       if (   (iml_no_targfi_ele_1 == 0)    /* no elements found       */
           || (   (iml_no_targfi_ele_1 == iml_no_targfi_ele_deny)  /* only deny found */
               && (bol_use_blacklist == FALSE))  /* use-as-blacklist   */
           || (   (iml_last_targfi_ele_deny == 0)  /* number of last element deny */
               && (bol_use_blacklist))) {   /* use-as-blacklist        */
         goto p_ctf_l3_00;                  /* process second pass     */
       }
     }
   }
   /* check if name double                                             */
   adsl_targfi_w1 = adsp_cs->adsc_targfi_1_anchor;  /* get chain target-filter */
   while (adsl_targfi_w1) {                 /* loop over all target-filter */
     bol1 = m_cmp_vx_vx( &iml1,
                         (char *) adsl_targfi_w1 + adsl_targfi_w1->imc_off_name,
                         adsl_targfi_w1->imc_len_name,
                         ied_chs_utf_8,
                         awcl_ctf_name,
                         -1,
                         ied_chs_utf_16 );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02026W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" already defined before - no target-filter generated",
                       MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ), awcl_ctf_name );
       return NULL;                         /* cannot generate target-filter */
     }
     adsl_targfi_w1 = adsl_targfi_w1->adsc_next;  /* get next in chain */
   }
   if (iml_no_targfi_ele_1 == 0) {          /* no elements found       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02027W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" no allow or deny found - no target-filter generated",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ), awcl_ctf_name );
     return NULL;                           /* cannot generate target-filter */
   }
   if (   (iml_no_targfi_ele_1 == iml_no_targfi_ele_deny)  /* only deny found */
       && (bol_use_blacklist == FALSE)) {   /* use-as-blacklist        */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02028W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" only deny found, configuration illogic - no target-filter generated",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ),
                     awcl_ctf_name );
     return NULL;                           /* cannot generate target-filter */
   }
   if (   (iml_last_targfi_ele_deny == 0)   /* number of last element deny */
       && (bol_use_blacklist)) {            /* use-as-blacklist        */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02034W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" only allow found for blacklist, configuration illogic - no target-filter generated",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ),
                     awcl_ctf_name );
     return NULL;                           /* cannot generate target-filter */
   }
   if (   (iml_no_targfi_ele_deny)          /* number of elements deny */
       && (bol_use_blacklist == FALSE)) {   /* use-as-blacklist        */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02029W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" at end sections deny found (%d) - configuration illogic",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ),
                     awcl_ctf_name, iml_no_targfi_ele_deny );
   }
   if (   (iml_last_targfi_ele_deny != iml_no_targfi_ele_1)  /* last element not deny */
       && (bol_use_blacklist)) {            /* use-as-blacklist        */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02035W line=%d col=%d Error element name \"sslgate-configuration\" \"target-filter\" name \"%(ux)s\" at end sections allow found (last %d) - configuration illogic",
                     MAC_XML_LINENO( adsp_node_targfi_d ), MAC_XML_COL( adsp_node_targfi_d ),
                     awcl_ctf_name, iml_last_targfi_ele_deny );
   }
   iml2 = m_len_vx_vx( ied_chs_utf_8,       /* Unicode UTF-8           */
                       awcl_ctf_name, -1, ied_chs_utf_16 );  /* name of target-filter */
   iml1 = (sizeof(struct dsd_targfi_1)
             + iml_no_targfi_ele_1 * sizeof(struct dsd_targfi_ele_1)
             + iml_len_ineta                /* length INETAs           */
             + iml_no_port * sizeof(int)
             + iml_no_protocol
             + iml_len_dns
             + iml2 + 1
             + sizeof(void *) - 1)
          & (0 - sizeof(void *));
   adsl_targfi_w1 = (struct dsd_targfi_1 *) malloc( iml1 );
   memset( adsl_targfi_w1, 0, sizeof(struct dsd_targfi_1)
                                + iml_no_targfi_ele_1 * sizeof(struct dsd_targfi_ele_1) );
   adsl_targfi_w1->imc_len_total = iml1;    /* length total this target-filter */
   adsl_targfi_w1->imc_off_name = iml1 - (iml2 + 1);  /* offset name UTF-8 */
   adsl_targfi_w1->imc_len_name = iml2;     /* length name UTF-8       */
   adsl_targfi_w1->imc_no_targfi_ele_1 = iml_no_targfi_ele_1;
   m_cpy_vx_vx( (char *) adsl_targfi_w1 + iml1 - (iml2 + 1), iml2 + 1, ied_chs_utf_8,
                awcl_ctf_name, -1, ied_chs_utf_16 );  /* name of target-filter */
   if (iml_len_dns) {                       /* check if includes DNS filter */
     adsl_targfi_w1->boc_with_dns = TRUE;   /* includes DNS filter     */
   }
   achl_ineta = (char *) ((struct dsd_targfi_ele_1 *) (adsl_targfi_w1 + 1) + iml_no_targfi_ele_1);
   aimrl_port = (int *) (achl_ineta + iml_len_ineta);
   achrl_protocol = (char *) (aimrl_port + iml_no_port);
   achl_dns_name = achrl_protocol + iml_no_protocol;
   goto p_ctf_l3_00;                        /* process second pass     */
} /* end m_conf_targfi_1()                                             */

#define D_COND_SELI (adsp_cs->achc_msgtext_1 == chrs_msgtxt_sl)
/** process configuration or server-entry, part of server-list         */
static BOOL m_conf_conn( struct dsd_conf_serv *adsp_cs ) {
   int        inl1, inl2, inl3;             /* working variables       */
   int        iml1, iml2, iml3, iml4, iml5;  /* working variables      */
   int        iml_cmp;                      /* compare values          */
   int        iml_rc;                       /* return code             */
   BOOL       bol1;                         /* working variable        */
// DWORD      dwl1;                         /* working variable        */
   BOOL       bol_rc;                       /* return value            */
   char       *achl1, *achl2;               /* working variables       */
   HL_WCHAR   *awcl1;                       /* working variable        */
   DWORD      dwl_error;                    /* return errors           */
   int        iml_keyw_01;                  /* keyword                 */
#ifndef B090411
   int        iml_no_krb5_kdc;              /* number of Kerberos 5 KDCs */
   int        iml_no_ldap_group;            /* number of LDAP groups   */
#endif
// int        inl_keyw_02;                  /* keyword                 */
   DOMNode    *adsl_node_01, *adsl_node_02, *adsl_node_03;
   DOMNode    *adsl_node_save1;
   DOMNode    *adsl_node_name;              /* save node with name     */
   DOMNode    *adsl_node_func;              /* save node with function */
   DOMNode    *adsl_node_dyn_radius;        /* dynamic-radius          */
   DOMNode    *adsl_node_dyn_krb5;          /* dynamic-Kerberos-5-KDC  */
   DOMNode    *adsl_node_dyn_ldap;          /* dynamic-LDAP            */
   DOMNode    *adsl_node_hrl_conf;          /* part of configuration   */
   DOMNode    *adsl_node_phl_conf;          /* part of configuration   */
   DOMNode    *adsl_node_hobwspat3_conf;    /* part of configuration   */
   DOMNode    *adsl_node_sdh_conf;          /* part of configuration   */
   HL_WCHAR * awcu3_name;
   HL_WCHAR * awcu3_value;
   HL_WCHAR * awcu4_name;
   HL_WCHAR * awcu4_value;
   HL_WCHAR   *awcl_func_value;             /* value of function       */
   HL_WCHAR   *awcl_node_sdhlib;            /* value no server data ho */
   HL_WCHAR   *awcl_node_serverineta;       /* value serverineta       */
   HL_WCHAR   *awcl_node_hrl_lib_na;        /* value library name      */
   HL_WCHAR   *awcl_node_phl_lib_na;        /* value library name      */
   HL_WCHAR   *awcl_node_hobwspat3_lib_na;  /* value library name      */
   BOOL       borl_conn[ DEF_XML_CONN_MAX ];
   struct dsd_wtsg_1 *adsl_wtsg1_1;         /* for WTSGATE             */
#ifndef OLD_1112
   struct dsd_wtsg_1 *adsl_wtsg1_2;         /* for WTSGATE             */
#endif
   int        iml_wtsg_port;                /* WTSGATE port LB         */
   UNSIG_MED  uml_wtsg_ineta;               /* WTSGATE IP-address      */
#ifdef OLD01
   struct hostent *adsl_hostentry;          /* for gethostbyname()     */
   struct dsd_target_ineta_1 *adsl_wtsg_ineta;  /* target INETA WTSGATE */
#endif
   struct dsd_chain_listen_ineta_1 *adsl_cli1_w1;  /* chain INETA listen */
   class dsd_file_read_1 dsl_file_read_1;   /* class read input file   */
   void **    avpl_w1;                      /* working variable        */
#ifdef B111222
   void **    avpl_radius_ch_1;             /* working variable        */
#endif
   struct dsd_domain_info_1 *adsl_domain_info_1_w1;  /* working variable domain information */
   struct dsd_domain_info_def_1 *adsl_domain_info_def_1_w1;  /* working variable domain-information definition */
   struct dsd_domain_info_def_1 *adsl_domain_info_def_1_w2;  /* working variable domain-information definition */
   void **    avpl_usgro_ch_1;              /* working variable        */
   void **    avpl_selserv_ch_1;            /* working variable        */
   struct dsd_phl_def_1 *adsl_phl_ch_1;     /* working variable        */
   struct dsd_phl_def_1 *adsl_phl_ch_last;  /* last in chain           */
   struct dsd_hrl_obj_1 *adsl_hrl_obj_w1;   /* working variable        */
   struct dsd_phl_obj_1 *adsl_phl_obj_w1;   /* working variable        */
   struct dsd_wspat_obj_1 *adsl_wspat_obj_w1;  /* working variable     */
   struct dsd_user_group *adsl_usgro_w1;    /* structure user group    */
   struct dsd_radius_entry *adsl_raent_1;   /* working variable        */
   struct dsd_targfi_1 *adsl_targfi_w1;     /* working variable        */
   struct dsd_server_list_1 *adsl_seli_1_w1;  /* working variable      */
   struct dsd_radius_group *adsl_radius_group_w1;  /* definition Radius group */
   struct dsd_krb5_kdc_1 *adsl_krb5_kdc_1_w1;  /* definition Kerberos 5 KDC */
   struct dsd_ldap_group *adsl_ldap_group_w1;  /* definition LDAP group */
   struct dsd_l2tp_conf *adsl_l2tp_conf_w1;  /* working variable       */
   struct dsd_ppp_auth_e *adsl_ppp_auth_w1;  /* ppp authentication element */
   struct dsd_sdh_obj_1 *adsl_sdh_obj_w1;   /* working variable        */
#ifdef B111218
   enum ied_pttd_conf1 iel_pttd_conf1;      /* pass thru to deskt conf */
   enum ied_rasc_conf1 iel_rasc_conf1;      /* send certificate        */
#endif
   struct dsd_sdh_def_1 *adsl_sdhlib_ch_1;  /* working variable        */
// BOOL       borl_auli[ 6 ];
#ifndef HL_UNIX
   struct dsd_ineta_1 dsl_ineta_1;
   struct dsd_wtspo_1 dsl_wtspo_1;
#endif
   struct addrinfo dsl_addrinfo_w1;
   struct addrinfo *adsl_addrinfo_w2;
   struct addrinfo *adsl_addrinfo_w3;
#ifndef OLD_1112
   struct dsd_ineta_single_ret dsl_ineta_single_ret;  /* single INETA  */
#endif
#ifdef B121120
   char       chrl_buffer_01[ 256 ];        /* buffer for different needs */
#else
   char       chrl_buffer_01[ 1024 ];       /* buffer for different needs */
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_conn called %p", adsp_cs );
#endif
// adsp_cs->boc_return = FALSE;             /* return success          */
   memset( &adsp_cs->dsc_server_conf_1_c, 0, sizeof(adsp_cs->dsc_server_conf_1_c) );  /* configuration ser */
   adsp_cs->dsc_server_conf_1_c.inc_wts_time1 = DEF_LB_TIME1;  /* set LB time all */
   adsp_cs->dsc_server_conf_1_c.inc_wts_time2 = DEF_LB_TIME2;  /* set LB time any */
   adsp_cs->aarc_radius_array = NULL;       /* array of radius-server  */
   adsp_cs->aarc_krb5_array = NULL;         /* array of KRB5           */
   adsp_cs->aarc_ldap_array = NULL;         /* array of LDAP           */
   adsp_cs->boc_dyn_radius = FALSE;         /* dynamic-radius          */
   adsp_cs->boc_dyn_krb5 = FALSE;           /* dynamic-Kerberos-5-KDC  */
   adsp_cs->boc_dyn_ldap = FALSE;           /* dynamic-LDAP            */
   adsp_cs->boc_dsdhhre1 = FALSE;           /* disable-SDH-HOB-RDP-EXT1 */
   adsp_cs->adsc_wtsg1_ch = NULL;           /* chain for WTSGATE       */
   adsp_cs->adsc_hrl_def = NULL;            /* for loading of HTTP-redirect-library */
   adsp_cs->adsc_hrl_obj = NULL;            /* HTTP-redirect-library-object */
#ifdef B130227
   adsp_cs->adsc_phl_def = NULL;            /* for loading of plain-HTTP-library */
   adsp_cs->adsc_phl_obj = NULL;            /* plain-HTTP-library-object */
#endif
   adsp_cs->adsc_phl_chain = NULL;          /* chain of plain-HTTP-libraries */
   adsp_cs->adsc_hobwspat3_def_1 = NULL;    /* authentication library definition */
   adsp_cs->adsc_wspat_obj = NULL;          /* definition authentication-library-object */
   adsp_cs->adsc_sdhlib_chain = NULL;       /* chain server data hook  */
   adsp_cs->awcc_node_serverineta = NULL;   /* value serverineta       */
#ifndef B110930
#ifdef B111222
   adsp_cs->avpc_radius_chain = NULL;       /* chain of radius names   */
#endif
   memset( &adsp_cs->dsc_gate, 0, sizeof(adsp_cs->dsc_gate) );  /* gateway listening */
#endif
   if (!D_COND_SELI) {                      /* not in server-list      */
#ifdef B110930
     memset( &adsp_cs->dsc_gate, 0, sizeof(adsp_cs->dsc_gate) );  /* gateway listening */
#endif
#ifdef B080407
     adsp_cs->awcc_gateport = NULL;         /* value of gateport       */
#endif
#ifdef B141227
     adsp_cs->awcc_in_ineta = NULL;         /* value of INETA input    */
#endif
     adsp_cs->adsc_cli1 = NULL;             /* chain INETA listen      */
#ifdef B110930
     adsp_cs->avpc_radius_chain = NULL;     /* chain of radius names   */
#endif
     adsp_cs->avpc_usgro_chain = NULL;      /* chain of user groups    */
     adsp_cs->avpc_selserv_chain = NULL;    /* chain of server-lists   */
#ifndef B090411
     iml_no_krb5_kdc = 0;                   /* number of Kerberos 5 KDCs */
     iml_no_ldap_group = 0;                 /* number of LDAP groups   */
#endif
#ifdef OLD01
     adsp_cs->boc_auli_set = FALSE;         /* authentification set    */
#endif
     adsp_cs->achc_fconfig = NULL;          /* SSL-config-file         */
     adsp_cs->achc_fcertdb = NULL;          /* SSL-certdb-file         */
     adsp_cs->achc_password = NULL;         /* SSL-password-file       */
   }
   adsl_node_01 = adsp_cs->adsc_node_conf->getFirstChild();
   if (adsl_node_01 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01101W Error %s%(ux)s%s element has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
     return FALSE;                          /* not successfull         */
   }
   /* search name, function, dynamic-radius, dynamic-Kerberos-5-KDC, dynamic-LDAP */
/**
to-do 29.08.09 KB
  first pass only name
  second pass function, dynamic-Kerberos-5-KDC, dynamic-LDAP
to-do 24.07.10 KB
  second pass also protocol
*/
   adsl_node_save1 = adsl_node_01;          /* save node               */
   adsl_node_name = adsl_node_func = adsl_node_dyn_radius = adsl_node_dyn_krb5 = adsl_node_dyn_ldap = NULL;
   adsp_cs->awcc_name_value = awcl_func_value = NULL;
   while (adsl_node_01) {
     if (adsl_node_01->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcu3_name = (HL_WCHAR *) adsl_node_01->getNodeName();
       inl1 = 0;                            /* nothing found yet       */
       while (TRUE) {                       /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, "name" );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           if (adsl_node_name) {            /* name already set        */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01102W Error %s%(ux)s%s element name came double - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
             return FALSE;                  /* not successfull         */
           }
           adsl_node_name = adsl_node_01;   /* save node               */
           inl1 = 1;                        /* search value            */
           break;
         }
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, "function" );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           if (adsl_node_func) {            /* function already set    */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01103W Error %s%(ux)s%s element function came double - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
             return FALSE;                  /* not successfull         */
           }
           adsl_node_func = adsl_node_01;   /* save node               */
           inl1 = 2;                        /* search value            */
           break;
         }
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, "dynamic-radius" );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           if (adsl_node_dyn_radius) {      /* dynamic radius already set */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-radius came double - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
             break;                         /* ignore this node        */
           }
           inl1 = 3;                        /* search value            */
           break;
         }
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, "dynamic-Kerberos-5-KDC" );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           if (adsl_node_dyn_krb5) {        /* dynamic KRB5 already set */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-Kerberos-5-KDC came double - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
             break;                         /* ignore this node        */
           }
           inl1 = 4;                        /* search value            */
           break;
         }
         bol1 = m_cmp_u16z_u8z( &inl2, awcu3_name, "dynamic-LDAP" );
         if ((bol1) && (inl2 == 0)) {       /* strings are equal       */
           if (adsl_node_dyn_ldap) {        /* dynamic LDAP already set */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-LDAP came double - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
             break;                         /* ignore this node        */
           }
           inl1 = 5;                        /* search value            */
           break;
         }
         break;
       }
       if (inl1 > 0) {                      /* search value            */
         adsl_node_02 = adsl_node_01->getFirstChild();
         if (adsl_node_02 == NULL) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01104W Error %s%(ux)s%s element name \"%(ux)s\" has no child - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           awcu3_name );
           return FALSE;                    /* not successfull         */
         }
         do {
           if (adsl_node_02->getNodeType() == DOMNode::TEXT_NODE) {
             awcu3_value = (HL_WCHAR *) adsl_node_02->getNodeValue();
             if (inl1 == 1) {               /* name                    */
               adsp_cs->awcc_name_value = awcu3_value;
               break;
             }
             if (inl1 == 2) {               /* function                */
               awcl_func_value = awcu3_value;
               break;
             }
             bol1 = m_cmp_u16z_u8z( &inl2, awcu3_value, "YES" );
             if ((bol1) && (inl2 == 0)) {   /* strings are equal       */
               switch (inl1) {              /* node requested          */
                 case 3:                    /* dynamic radius          */
                   adsl_node_dyn_radius = adsl_node_01;  /* save node  */
                   if (adsp_cs->adsc_loconf_1_fill->adsc_radius_group == NULL) {  /* chain Radius groups */
                     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-radius YES but no <radius-server> configured - ignored",
                                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
                     break;
                   }
                   adsp_cs->boc_dyn_radius = TRUE;  /* dynamic-radius  */
                   break;
                 case 4:                    /* dynamic KRB5            */
                   adsl_node_dyn_krb5 = adsl_node_01;  /* save node    */
                   if (adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1 == NULL) {  /* chain of Kerberos 5 KDC */
                     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-Kerberos-5-KDC YES but no <Kerberos-5-KDC> configured - ignored",
                                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
                     break;
                   }
                   adsp_cs->boc_dyn_krb5 = TRUE;  /* dynamic-Kerberos-5-KDC */
                   break;
                 case 5:                    /* dynamic LDAP            */
                   adsl_node_dyn_ldap = adsl_node_01;  /* save node    */
                   if (adsp_cs->adsc_ldap_group == NULL) {  /* chain of LDAP groups */
                     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element dynamic-LDAP YES but no <LDAP-service> configured - ignored",
                                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
                     break;
                   }
                   adsp_cs->boc_dyn_ldap = TRUE;  /* dynamic-LDAP      */
                   break;
               }
               break;
             }
             bol1 = m_cmp_u16z_u8z( &inl2, awcu3_value, "NO" );
             if ((bol1) && (inl2 == 0)) {   /* strings are equal       */
               switch (inl1) {              /* node requested          */
                 case 3:                    /* dynamic radius          */
                   adsl_node_dyn_radius = adsl_node_01;  /* save node  */
                   break;
                 case 4:                    /* dynamic KRB5            */
                   adsl_node_dyn_krb5 = adsl_node_01;  /* save node    */
                   break;
                 case 5:                    /* dynamic LDAP            */
                   adsl_node_dyn_ldap = adsl_node_01;  /* save node    */
                   break;
               }
               break;
             }
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s element %(ux)s neither YES nor NO: \"%(ux)s\" - ignored",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                             awcu3_name, awcu3_value );
             break;
           }
           adsl_node_02 = adsl_node_02->getNextSibling();
         } while (adsl_node_02);
       }
     }
     if ((adsl_node_name) && (adsl_node_func) && (adsl_node_dyn_radius) && (adsl_node_dyn_krb5) && (adsl_node_dyn_ldap)) break;
     adsl_node_01 = adsl_node_01->getNextSibling();
   }
   if (adsp_cs->awcc_name_value == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01105W Error %s%(ux)s%s element no name value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
     return FALSE;                          /* not successfull         */
   }
#ifdef TRACEHL1
   {
#ifndef HL_UNIX
     HL_WCHAR * awch1 = (HL_WCHAR *) L"";
#else
     HL_WCHAR * awch1 = &wcs_empty;
#endif
     if (awcl_func_value) awch1 = awcl_func_value;
     m_hlnew_printf( HLOG_TRACE1, "m_conf_conn found %s%(ux)s%s name:%(ux)s func:%(ux)s",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value, awch1 );
   }
#endif
   adsp_cs->dsc_server_conf_1_c.inc_function = 0;  /* set function     */
   if (awcl_func_value == NULL) goto p_conf_conn_16;
   /* search function in table                                         */
   inl1 = sizeof(dsrs_func_e) / sizeof(dsrs_func_e[0]);
   while (TRUE) {                           /* loop over table         */
     inl1--;                                /* element before          */
     if (inl1 < 0) break;                   /* end of table            */
     bol1 = m_cmp_u16z_u8z( &inl2, awcl_func_value, dsrs_func_e[ inl1 ].achc_function );
     if ((bol1) && (inl2 == 0)) {           /* strings are equal       */
       break;
     }
   }
   if (inl1 < 0) {                          /* not found in table      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01106W Error %s%(ux)s%s \"%(ux)s\" invalid function found \"%(ux)s\" - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value, awcl_func_value );
     return FALSE;                          /* not successfull         */
   }
   /* set function                                                     */
   adsp_cs->dsc_server_conf_1_c.inc_function = dsrs_func_e[ inl1 ].inc_func_value;
#ifdef B080324
   if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_BLADE) {
     if (adsp_cs->boc_blacont_def == FALSE) {        /* BLADE Control not def   */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01174W Error %s%(ux)s%s \"%(ux)s\" function BLADEGATE found but no section blade-control - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       return FALSE;                        /* not successfull         */
     }
   }
#endif
   if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_SS5H) {
     if (D_COND_SELI) {                     /* in server-list          */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02100W Error %s%(ux)s%s \"%(ux)s\" function SELECT-SOCKS5-HTTP found in server-entry, not allowed - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       return FALSE;                        /* not successfull         */
     }
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_CASC_WSP) {
     if (adsp_cs->adsc_loconf_1_fill->boc_csssl_conf == FALSE) {  /* Client Side SSL not configured */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s \"%(ux)s\" function CASCADED-WSP found in server-entry but section client-side-SSL not defined - ignored",
                       MAC_XML_LINENO( adsp_cs->adsc_node_conf ), MAC_XML_COL( adsp_cs->adsc_node_conf ),
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       return FALSE;                        /* not successfull         */
     }
     if (adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1 == NULL) {  /* chain of Kerberos 5 KDC */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s \"%(ux)s\" function CASCADED-WSP found in server-entry but no Kerberos-5-KDC defined - ignored",
                       MAC_XML_LINENO( adsp_cs->adsc_node_conf ), MAC_XML_COL( adsp_cs->adsc_node_conf ),
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       return FALSE;                        /* not successfull         */
     }
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_function < 0) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_rdp;  /* protocol MS RDP */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_RDP) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_rdp;  /* protocol MS RDP */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_HRDPE1) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_hrdpe1;  /* protocol HOB MS RDP Extension 1 */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_ICA) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_ica;  /* protocol ICA */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_PTTD) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_rdp;  /* protocol MS RDP */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_HPPPT1) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_hpppt1;  /* protocol HOB-PPP-T1 */
   } else if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_SSTP) {
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = ied_scp_sstp;  /* protocol SSTP */
   }

   p_conf_conn_16:                          /* function set            */
   adsp_cs->dsc_gate.ifunction = adsp_cs->dsc_server_conf_1_c.inc_function;
   memset( borl_conn, 0, sizeof( borl_conn ) );  /* clear flags        */
#ifdef B111218
   memset( &adsp_cs->dsc_radius_conf, 0, sizeof(dsd_radius_conf) );  /* radius configuration */
   if (   (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_PTTD)
       || (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_SS5H)) {
     adsp_cs->dsc_radius_conf.iec_pttd_conf1 = ied_pttdc_do;  /* do pttd */
   }
#endif
#ifndef B080407
   adsp_cs->dsc_gate.imc_gateport = -1;
   adsp_cs->dsc_gate.imc_permmov_from_port = -1;
   adsp_cs->dsc_gate.imc_permmov_to_port = -1;
   adsp_cs->dsc_gate.imc_backlog = -1;
#endif
#ifdef B080407
   adsp_cs->dsc_gate.igateport = -1;
   adsp_cs->dsc_gate.ibacklog = -1;
#endif
   adsp_cs->adsc_domain_info_def_1_ch = NULL;  /* chain of domain-information definition */
   adsp_cs->dsc_server_conf_1_c.inc_server_port = -1;
   adsp_cs->awcc_node_tm_url = NULL;        /* clear permanently-moved-URL */
   adsp_cs->dsc_tn_krb5_keytab.awcc_value = NULL;  /* value Kerberos-5-keytab-file */
   adsp_cs->awcc_node_krb5_princ = NULL;    /* value Kerberos-5-service-principal-name */
   awcl_node_serverineta = NULL;            /* clear value serverineta */

   adsl_node_01 = adsl_node_save1;          /* restore node            */

   p_buco_conn_20:                          /* child of connection     */
   if (adsl_node_01->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_conn_80;
   if (adsl_node_01 == adsl_node_name) goto p_buco_conn_80;
   if (adsl_node_01 == adsl_node_func) goto p_buco_conn_80;
   if (adsl_node_01 == adsl_node_dyn_radius) goto p_buco_conn_80;  /* dynamic-radius */
   if (adsl_node_01 == adsl_node_dyn_krb5) goto p_buco_conn_80;  /* dynamic-Kerberos-5-KDC */
   if (adsl_node_01 == adsl_node_dyn_ldap) goto p_buco_conn_80;  /* dynamic-LDAP */

// p_buco_conn_24:                          /* get name of node        */
   awcu3_name = (HL_WCHAR *) adsl_node_01->getNodeName();
   /* search keyword (tag) in table                                    */
   iml_keyw_01 = sizeof(dsrs_conndef_e) / sizeof(dsrs_conndef_e[0]);
   while (TRUE) {                           /* loop over table         */
     iml_keyw_01--;                         /* element before          */
     if (iml_keyw_01 < 0) break;            /* end of table            */
#ifndef OLD01
     bol1 = m_cmp_u16z_u8z( &inl1, awcu3_name, (char *) dsrs_conndef_e[ iml_keyw_01 ].achc_keyword );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       break;
     }
#else
     if (!wcscmp( awcu3_name, dsrs_conndef_e[ iml_keyw_01 ].awcc_keyword )) {
       break;
     }
#endif
   }
   if (iml_keyw_01 < 0) {                   /* keyword not defined     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01107W Error %s%(ux)s%s %(ux)s invalid node found \"%(ux)s\" - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (dsrs_conndef_e[ iml_keyw_01 ].imc_mask & D_MASK_CLIENT_ONLY) {
     if (D_COND_SELI) {                     /* in server-list          */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02101W Error %s%(ux)s%s \"%(ux)s\" element \"%(ux)s\" not allowed in server-list - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       goto p_buco_conn_80;                 /* end of this element     */
     }
   } else if (dsrs_conndef_e[ iml_keyw_01 ].imc_mask == 0) {
     if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_SS5H) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02102W Error %s%(ux)s%s \"%(ux)s\" element \"%(ux)s\" not allowed in function SELECT-SOCKS5-HTTP - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       goto p_buco_conn_80;                 /* end of this element     */
     }
   }
   if (iml_keyw_01 >= DEF_XML_CONN_MAX) {   /* not normal entry        */
     if (iml_keyw_01 == DEF_XML_CONN_SDH_S) {  /* server-data-hook     */
       goto p_buco_conn_sdh_00;
     }
     goto p_buco_conn_sdh_obj_00;           /* <server-data-hook-object> */
   }
   while (borl_conn[ iml_keyw_01 ]) {       /* element already set     */
     if (   (iml_keyw_01 == DEF_XML_CONN_RADIUS_GROUP)  /* radius-group */
         && (adsp_cs->boc_dyn_radius)) {    /* dynamic-radius          */
       break;
     }
     if (   (iml_keyw_01 == DEF_XML_CONN_KRB5_KDC)  /* Kerberos-5-KDC  */
         && (adsp_cs->boc_dyn_krb5)) {      /* dynamic-Kerberos-5-KDC  */
       break;
     }
     if (   (iml_keyw_01 == DEF_XML_CONN_LDAP_SERV)  /* LDAP-service   */
         && (adsp_cs->boc_dyn_ldap)) {      /* dynamic-LDAP            */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01108W Error %s%(ux)s%s %(ux)s element node name \"%(ux)s\" double - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   adsl_node_02 = adsl_node_01->getFirstChild();
   if (adsl_node_02 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01109W Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (iml_keyw_01 == DEF_XML_CONN_PM_DOMAIN_INF) {  /* domain-information */
     goto p_buco_conn_domain_inf;           /* domain-information      */
   }
   if (iml_keyw_01 == DEF_XML_CONN_WTSSERVLI) goto p_buco_wtss_00;
#ifdef OLD_111205
   if (iml_keyw_01 == DEF_XML_CONN_BLASERVLI) goto p_buco_blas_00;
#endif
   if (iml_keyw_01 == DEF_XML_CONN_VDISOUSLI) goto p_buco_vdis_00;

   p_buco_conn_28:                          /* search value            */
   if (adsl_node_02->getNodeType() != DOMNode::TEXT_NODE) goto p_buco_conn_72;
   awcu3_value = (HL_WCHAR *) adsl_node_02->getNodeValue();
#ifdef TRACEHL1
// printf( "m_build_conf_01 found %S Name:%S Value:%S\n", awcu2, awcu3_name, awcu3_value );
   m_hlnew_printf( HLOG_TRACE1, "m_conf_conn found %s%(ux)s%s %(ux)s Name:%(ux)s Value:%(ux)s",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name, awcu3_value );
#endif
   switch (iml_keyw_01) {
     case DEF_XML_CONN_GATEPORT:
       goto p_buco_conn_gateport;
     case DEF_XML_CONN_PM_FR_PORT:          /* permanently-moved-from-port  */
       goto p_buco_conn_pm_fr_port;
     case DEF_XML_CONN_PM_TO_PORT:          /* permanently-moved-to-port */
       goto p_buco_conn_pm_to_port;
     case DEF_XML_CONN_PM_URL:              /* permanently-moved-URL   */
       goto p_buco_conn_pm_url;
     case DEF_XML_CONN_HTTP_REDIR_S:        /* HTTP-redirect-library   */
       goto p_buco_conn_http_redir;         /* HTTP-redirect-library   */
     case DEF_XML_CONN_HTTP_REDIR_O:        /* HTTP-redirect-library-object */
       goto p_buco_conn_http_rd_obj;        /* HTTP-redirect-library-object */
     case DEF_XML_CONN_PLAIN_HTTP_L_S:      /* plain-HTTP-library      */
       goto p_buco_conn_plain_http;         /* plain-HTTP-library      */
     case DEF_XML_CONN_PLAIN_HTTP_L_O:      /* plain-HTTP-library-object */
       goto p_buco_conn_plain_http_obj;     /* plain-HTTP-library-object */
     case DEF_XML_CONN_NOT_CL_LBAL:         /* do-not-close-by-load-balancing */
       goto p_buco_conn_not_cl_bal;
     case DEF_XML_CONN_CONN_TYPE:           /* conn-type               */
       goto p_buco_conn_conntype;           /* conn-type               */
     case DEF_XML_CONN_KRB5_KEYTAB:         /* Kerberos-5-keytab-file  */
       goto p_buco_conn_krb5_keytab;        /* Kerberos-5-keytab-file  */
     case DEF_XML_CONN_KRB5_PRINC:          /* Kerberos-5-service-principal-name */
       goto p_buco_conn_krb5_princ;         /* Kerberos-5-service-principal-name */
     case DEF_XML_CONN_SERVERINETA:
       goto p_buco_conn_serverineta;
     case DEF_XML_CONN_SERVERPORT:
       goto p_buco_conn_serverport;
     case DEF_XML_CONN_DNS_LOOKUP:          /* DNS-lookup-before-connect */
       goto p_buco_conn_dns_lookup;
     case DEF_XML_CONN_BACKLOG:
       goto p_buco_conn_backlog;
     case DEF_XML_CONN_GININETA:
       goto p_buco_conn_ginieta;
     case DEF_XML_CONN_GOUTINETA:
       goto p_buco_conn_goutineta;
     case DEF_XML_CONN_CONNRR:              /* connect-round-robin     */
       goto p_buco_conn_connrr;
     case DEF_XML_CONN_USEINETAAPPL:        /* use-ineta-appl          */
       goto p_buco_conn_useinetaappl;
     case DEF_XML_CONN_USECLSSSL:           /* use-client-side-SSL     */
       goto p_buco_conn_useclsssl;
     case DEF_XML_CONN_WTSBRPORT:
       goto p_buco_conn_wtsbrport;
     case DEF_XML_CONN_WTSCHNAME:
       goto p_buco_conn_wtschname;
#ifdef OLD_111205
     case DEF_XML_CONN_BLABRPORT:
       goto p_buco_conn_blabrport;
     case DEF_XML_CONN_BLACHNAME:
       goto p_buco_conn_blachname;
#endif
     case DEF_XML_CONN_VDIBRPORT:           /* VDI-broadcast-port      */
       goto p_buco_conn_vdibrport;          /* <VDI-broadcast-port>    */
     case DEF_XML_CONN_VDICHNAME:           /* VDI-check-name          */
       goto p_buco_conn_vdichname;          /* <VDI-check-name>        */
     case DEF_XML_CONN_SCPROT:
       goto p_buco_conn_scprot;
     case DEF_XML_CONN_HCPROXA:
       goto p_buco_conn_hcproxa;
     case DEF_XML_CONN_TARGETFI:
       goto p_buco_conn_targetfi;           /* <target-filter>         */
#ifdef OLD_111205
     case DEF_XML_CONN_AUTHLIB:
       goto p_buco_conn_authlib;
#endif
     case DEF_XML_CONN_AUTHLIB_S:           /* authentication-library */
       goto p_buco_conn_authlib;
     case DEF_XML_CONN_AUTHLIB_OBJ:         /* authentication-library-object */
       goto p_buco_conn_wspat_obj_00;       /* <authentication-library-object> */
#ifdef D_FUNC01
     case DEF_XML_CONN_AUTHMED:
       goto p_buco_conn_authmed;
     case DEF_XML_CONN_AUTHCOF:
       goto p_buco_conn_authcof;
     case DEF_XML_CONN_AUTHPA1:
       goto p_buco_conn_authpa1;
#endif
#ifdef OLD_111205
     case DEF_XML_CONN_AUTHRADIUS:
       goto p_buco_conn_authradius;
#endif
     case DEF_XML_CONN_RADIUS_GROUP:        /* radius-group            */
       goto p_buco_conn_rad_gr_00;          /* radius-group            */
#ifdef XYZ1
     case DEF_XML_CONN_DYN_RADIUS_GR:       /* dynamic-radius          */
       goto p_buco_conn_dyn_rad_00;         /* dynamic-radius          */
#endif
     case DEF_XML_CONN_USERLIST:
       goto p_buco_conn_userlist;
     case DEF_XML_CONN_LANGUAGE:
       goto p_buco_conn_language;
     case DEF_XML_CONN_SELSERV:
       goto p_buco_conn_selserv;
     case DEF_XML_CONN_TIMEOUT:
       goto p_buco_conn_timeout;
     case DEF_XML_CONN_MAXSESS:
       goto p_buco_conn_maxsess;
     case DEF_XML_CONN_CONFFI:
       goto p_buco_conn_conffi;
     case DEF_XML_CONN_CEDBFI:
       goto p_buco_conn_cedbfi;
     case DEF_XML_CONN_PAWOFI:
       goto p_buco_conn_pawofi;
     case DEF_XML_CONN_THRESH_SESS:         /* threshold-session       */
       goto p_buco_conn_thresh_sess;
     case DEF_XML_CONN_KRB5_KDC:            /* Kerberos-5-KDC          */
       goto p_buco_conn_krb5_kdc;
#ifdef XYZ1
     case DEF_XML_CONN_DYN_KRB5_KDC:        /* dynamic Kerberos-5-KDC  */
       goto p_buco_conn_dyn_krb5_kdc;
#endif
     case DEF_XML_CONN_LDAP_SERV:           /* LDAP-service            */
       goto p_buco_conn_ldap_serv;
#ifdef XYZ1
     case DEF_XML_CONN_DYN_LDAP:            /* dynamic LDAP            */
       goto p_buco_conn_dyn_ldap;
#endif
     case DEF_XML_CONN_RPC_DC:              /* RPC-DC                  */
       goto p_buco_conn_rpc_dc;             /* RPC-DC                  */
     case DEF_XML_CONN_L2TP_GW:             /* L2TP-gateway            */
       goto p_buco_conn_l2tp_gw;
     case DEF_XML_CONN_SERVER_NW:           /* server-network          */
       goto p_buco_conn_server_nw;
     case DEF_XML_CONN_AUTHMETH:            /* authentication-method   */
       goto p_buco_conn_authmeth;
     case DEF_XML_CONN_CHECK_SSTP_CB:          /* do-not-check-SSTP-channel-bindings */
       goto p_buco_conn_check_cert;         /* do-not-check-SSTP-channel-bindings */
     case DEF_XML_CONN_DISA_NS_CL:          /* disable-naegle-send-client */
       goto p_buco_conn_disa_ns_cl;
     case DEF_XML_CONN_DISA_NS_SE:          /* disable-naegle-send-server */
       goto p_buco_conn_disa_ns_se;
     case DEF_XML_CONN_CO_OTHER_SE:         /* option-connect-other-server */
       goto p_buco_conn_co_other_se;
     case DEF_XML_CONN_DSDHHRE1:            /* disable-SDH-HOB-RDP-EXT1 */
       goto p_buco_conn_dsdhhre1;
   }
   goto p_buco_conn_76;                     /* statement not reached   */

   p_buco_conn_gateport:
#ifndef B080407
   adsp_cs->dsc_gate.imc_gateport = m_get_port_no( awcu3_value, -1, ied_chs_utf_16 );
   if (adsp_cs->dsc_gate.imc_gateport < 0) {  /* port not numeric or not defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01110W Error %s%(ux)s%s %(ux)s gateport \"%(ux)s\" not numeric or not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */
#endif
#ifdef B080407
#ifdef HL_IPV6
   if (bog_ipv6 == FALSE) {
#endif
     adsp_cs->dsc_gate.igateport = m_get_wc_number( awcu3_value );
     if (adsp_cs->dsc_gate.igateport < 0) {  /* port not numeric       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01110W Error %s%(ux)s%s %(ux)s gateport \"%(ux)s\" not numeric - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       goto p_buco_conn_80;                 /* end of this element     */
     }
     goto p_buco_conn_76;                   /* mark element as set     */
#ifdef HL_IPV6
   }
   adsp_cs->awcc_gateport = awcu3_value;    /* save port found         */
   goto p_buco_conn_76;                     /* mark element as set     */
#endif
#endif

   p_buco_conn_pm_fr_port:                  /* permanently-moved-from-port */
   adsp_cs->dsc_gate.imc_permmov_from_port = m_get_port_no( awcu3_value, -1, ied_chs_utf_16 );
   if (adsp_cs->dsc_gate.imc_permmov_from_port < 0) {  /* port not numeric or not defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01110W Error %s%(ux)s%s %(ux)s permanently-moved-from-port \"%(ux)s\" not numeric or not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_pm_to_port:                  /* permanently-moved-to-port */
   adsp_cs->dsc_gate.imc_permmov_to_port = m_get_port_no( awcu3_value, -1, ied_chs_utf_16 );
   if (adsp_cs->dsc_gate.imc_permmov_to_port < 0) {  /* port not numeric or not defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error %s%(ux)s%s %(ux)s permanently-moved-to-port \"%(ux)s\" not numeric or not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_pm_url:                      /* permanently-moved-URL   */
   adsp_cs->awcc_node_tm_url = awcu3_value;  /* value permanently-moved-URL */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_domain_inf:                  /* domain-information      */
   adsl_domain_info_1_w1 = m_conf_domain_info_1( adsp_cs, adsl_node_01 );
   if (adsl_domain_info_1_w1 == NULL) {     /* invalid                 */
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsl_domain_info_def_1_w1 = (struct dsd_domain_info_def_1 *) malloc( sizeof(struct dsd_domain_info_def_1) );
   adsl_domain_info_def_1_w1->adsc_next = NULL;
   adsl_domain_info_def_1_w1->adsc_domain_info = adsl_domain_info_1_w1;  /* domain information */
   adsl_domain_info_def_1_w1->imc_xml_lineno = MAC_XML_LINENO( adsl_node_01 );
   adsl_domain_info_def_1_w1->imc_xml_col = MAC_XML_COL( adsl_node_01 );
   if (adsp_cs->adsc_domain_info_def_1_ch == NULL) {  /* chain of domain-information definition */
     adsp_cs->adsc_domain_info_def_1_ch = adsl_domain_info_def_1_w1;  /* set new chain of domain-information definition */
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsl_domain_info_def_1_w2 = adsp_cs->adsc_domain_info_def_1_ch;  /* get new chain of domain-information definition */
   while (adsl_domain_info_def_1_w2->adsc_next) adsl_domain_info_def_1_w2 = adsl_domain_info_def_1_w2->adsc_next;
   adsl_domain_info_def_1_w2->adsc_next = adsl_domain_info_def_1_w1;  /* append to chain of domain-information definition */
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_http_redir:                  /* HTTP-redirect-library   */
   if (adsp_cs->adsc_hrl_obj) {             /* HTTP-redirect-library already configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02540W line=%d col=%d Error %s%(ux)s%s HTTP-redirect-library but HTTP-redirect-library-object already configured - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   awcl_node_hrl_lib_na = NULL;             /* no library name         */
   adsl_node_hrl_conf = NULL;               /* no entry configuration-section */

   p_buco_hrl_ele_20:                       /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_hrl_ele_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
   while (TRUE) {                           /* pseudo-loop             */
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "configuration-section" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       goto p_buco_hrl_ele_40;              /* process configuration   */
     }
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "library-file-name" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02541W line=%d col=%d Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_hrl_ele_60;                /* get next list entry     */
   }
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02542W line=%d col=%d Error %s%(ux)s%s %(ux)s HTTP-redirect-library entry has no child - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_hrl_ele_60;                /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02543W line=%d col=%d Error %s%(ux)s%s %(ux)s HTTP-redirect-library entry no value found - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_hrl_ele_60;                /* get next list entry     */
   }
   if (awcl_node_hrl_lib_na != NULL) {      /* library name already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02544W line=%d col=%d Error %s%(ux)s%s %(ux)s HTTP-redirect-library library-file-name double - ignored",
                     MAC_XML_LINENO( adsl_node_03 ), MAC_XML_COL( adsl_node_03 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_hrl_ele_60;                /* get next list entry     */
   }
   awcl_node_hrl_lib_na = awcu4_value;      /* save library name       */
   goto p_buco_hrl_ele_60;                  /* get next sibling        */

   p_buco_hrl_ele_40:                       /* configuration-section found */
   if (adsl_node_hrl_conf) {                /* entry found before      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02545W Error line=%d col=%d %s%(ux)s%s %(ux)s HTTP-redirect-library configuration-section double - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
   } else {
     adsl_node_hrl_conf = adsl_node_02;     /* save this node          */
   }

   p_buco_hrl_ele_60:                       /* get next sibling        */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "p_buco_hrl_ele_60: adsl_node_02=%p", adsl_node_02 );
#endif
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_hrl_ele_20;
   if (awcl_node_hrl_lib_na == NULL) {      /* library name            */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02546W line=%d col=%d Error %s%(ux)s%s %(ux)s HTTP-redirect-library no <library-file-name> found - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }

   /* save this entry                                                  */
   adsp_cs->adsc_hrl_def = (struct dsd_hrl_def_1 *) malloc( sizeof(struct dsd_hrl_def_1) );
   memset( adsp_cs->adsc_hrl_def, 0, sizeof(struct dsd_hrl_def_1) );
   adsp_cs->adsc_hrl_def->adsc_node_def = adsl_node_01;  /* node definition */
   /* name of library                                                  */
   adsp_cs->adsc_hrl_def->awcc_library_name = awcl_node_hrl_lib_na;
   /* entry configuration-section                                      */
   adsp_cs->adsc_hrl_def->adsc_node_conf = adsl_node_hrl_conf;
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_hrl_def=%p", adsp_cs->adsc_hrl_def );
#endif
   /* HTTP-redirect-library processed                                  */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_http_rd_obj:                 /* HTTP-redirect-library-object */
   if (adsp_cs->adsc_hrl_def) {             /* HTTP-redirect-library already configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02560W line=%d col=%d Error %s%(ux)s%s HTTP-redirect-library-object \"%(ux)s\" but HTTP-redirect-library already configured - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   adsl_hrl_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_hrl_obj_1;  /* get chain HTTP-redirect-library-object */
   while (adsl_hrl_obj_w1) {                /* loop over all configured entries */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcu3_value, -1, ied_chs_utf_16,  /* Unicode UTF-16 = WCHAR */
                         adsl_hrl_obj_w1 + 1, adsl_hrl_obj_w1->imc_len_name, ied_chs_utf_8 );  /* Unicode UTF-8 */
     if (bol1 && (iml_cmp == 0)) break;     /* strings are equal       */
     adsl_hrl_obj_w1 = adsl_hrl_obj_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_hrl_obj_w1 == NULL) {           /* entry not found         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02561W line=%d col=%d Error %s%(ux)s%s HTTP-redirect-library-object \"%(ux)s\" configured but not defined elsewhere - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   adsp_cs->adsc_hrl_obj = adsl_hrl_obj_w1;  /* set this object        */
   /* HTTP-redirect-library-object processed                           */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_plain_http:                  /* plain-HTTP-library      */
#ifdef B130301
   if (adsp_cs->adsc_phl_obj) {             /* plain-HTTP-library already configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s plain-HTTP-library but HTTP-redirect-library-object already configured - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2 );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
#endif
   awcl_node_phl_lib_na = NULL;             /* no library name         */
   adsl_node_phl_conf = NULL;               /* no entry configuration-section */

   p_buco_phl_ele_20:                       /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_phl_ele_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
   while (TRUE) {                           /* pseudo-loop             */
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "configuration-section" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       goto p_buco_phl_ele_40;              /* process configuration   */
     }
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "library-file-name" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02541W line=%d col=%d Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_phl_ele_60;                /* get next list entry     */
   }
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s plain-HTTP-library entry has no child - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_phl_ele_60;                /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s plain-HTTP-library entry no value found - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_phl_ele_60;                /* get next list entry     */
   }
   if (awcl_node_phl_lib_na != NULL) {      /* library name already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s plain-HTTP-library library-file-name double - ignored",
                     MAC_XML_LINENO( adsl_node_03 ), MAC_XML_COL( adsl_node_03 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_phl_ele_60;                /* get next list entry     */
   }
   awcl_node_phl_lib_na = awcu4_value;      /* save library name       */
   goto p_buco_phl_ele_60;                  /* get next sibling        */

   p_buco_phl_ele_40:                       /* configuration-section found */
   if (adsl_node_phl_conf) {                /* entry found before      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error line=%d col=%d %s%(ux)s%s %(ux)s plain-HTTP-library configuration-section double - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
   } else {
     adsl_node_phl_conf = adsl_node_02;     /* save this node          */
   }

   p_buco_phl_ele_60:                       /* get next sibling        */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "p_buco_phl_ele_60: adsl_node_02=%p", adsl_node_02 );
#endif
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_phl_ele_20;
   if (awcl_node_phl_lib_na == NULL) {      /* library name            */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s plain-HTTP-library no <library-file-name> found - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }

#ifdef B130228
   /* save this entry                                                  */
   adsp_cs->adsc_phl_def = (struct dsd_phl_def_1 *) malloc( sizeof(struct dsd_phl_def_1) );
   memset( adsp_cs->adsc_phl_def, 0, sizeof(struct dsd_phl_def_1) );
   adsp_cs->adsc_phl_def->adsc_node_def = adsl_node_01;  /* node definition */
   /* name of library                                                  */
   adsp_cs->adsc_phl_def->awcc_library_name = awcl_node_phl_lib_na;
   /* entry configuration-section                                      */
   adsp_cs->adsc_phl_def->adsc_node_conf = adsl_node_phl_conf;
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "new adsp_cs->adsc_phl_def=%p", adsp_cs->adsc_phl_def );
#endif
#endif
   /* save this entry                                                  */
   /* the order of plain-HTTP-libraries need to be kept                */
   adsl_phl_ch_1 = (struct dsd_phl_def_1 *) malloc( sizeof(struct dsd_phl_def_1) );
#ifdef B130410
   adsl_phl_ch_1->adsc_next = adsp_cs->adsc_phl_chain;  /* get old chain of plain-HTTP-libraries */
#endif
   adsl_phl_ch_1->adsc_next = NULL;         /* clear chain of plain-HTTP-libraries */
   adsl_phl_ch_1->boc_valid = FALSE;        /* entry is not yet valid  */
   /* name of library                                                  */
   adsl_phl_ch_1->awcc_library_name = awcl_node_phl_lib_na;
   /* entry configuration-section                                      */
   adsl_phl_ch_1->adsc_node_conf = adsl_node_phl_conf;
   adsl_phl_ch_1->adsc_ext_lib1 = NULL;     /* plain-HTTP-library external library */
   adsl_phl_ch_1->adsc_phl_obj = NULL;      /* plain-HTTP-library-object */
#ifdef B130410
   adsp_cs->adsc_phl_chain = adsl_phl_ch_1;  /* set new chain          */
#endif
   if (adsp_cs->adsc_phl_chain == NULL) {    /* check old chain        */
     adsp_cs->adsc_phl_chain = adsl_phl_ch_1;  /* set new chain        */
   } else {
     adsl_phl_ch_last = adsp_cs->adsc_phl_chain;  /* last in chain     */
     while (adsl_phl_ch_last->adsc_next) adsl_phl_ch_last = adsl_phl_ch_last->adsc_next;
     adsl_phl_ch_last->adsc_next = adsl_phl_ch_1;  /* append to chain  */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_phl_chain=%p last element=%p.", adsp_cs->adsc_phl_chain, adsl_phl_ch_1 );
#endif
   /* plain-HTTP-library processed                                     */
#ifdef B130302
   goto p_buco_conn_76;                     /* mark element as set     */
#else
   goto p_buco_conn_80;                     /* get next name           */
#endif

   p_buco_conn_plain_http_obj:              /* plain-HTTP-library-object */
#ifdef B130322
   if (adsp_cs->adsc_phl_def) {             /* plain-HTTP-library already configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s plain-HTTP-library-object \"%(ux)s\" but plain-HTTP-library already configured - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
#endif
   adsl_phl_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_phl_obj_1;  /* get chain plain-HTTP-library-object */
   while (adsl_phl_obj_w1) {                /* loop over all configured entries */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcu3_value, -1, ied_chs_utf_16,  /* Unicode UTF-16 = WCHAR */
                         adsl_phl_obj_w1 + 1, adsl_phl_obj_w1->imc_len_name, ied_chs_utf_8 );  /* Unicode UTF-8 */
     if (bol1 && (iml_cmp == 0)) break;     /* strings are equal       */
     adsl_phl_obj_w1 = adsl_phl_obj_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_phl_obj_w1 == NULL) {           /* entry not found         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s plain-HTTP-library-object \"%(ux)s\" configured but not defined elsewhere - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
#ifdef B130228
   adsp_cs->adsc_phl_obj = adsl_phl_obj_w1;  /* set this object        */
#endif
   /* save this entry                                                  */
   /* the order of plain-HTTP-libraries need to be kept                */
   adsl_phl_ch_1 = (struct dsd_phl_def_1 *) malloc( sizeof(struct dsd_phl_def_1) );
#ifdef B130410
   adsl_phl_ch_1->adsc_next = adsp_cs->adsc_phl_chain;  /* get old chain of plain-HTTP-libraries */
#endif
   adsl_phl_ch_1->adsc_next = NULL;         /* clear chain of plain-HTTP-libraries */
   adsl_phl_ch_1->boc_valid = FALSE;        /* entry is not yet valid  */
   /* name of library                                                  */
   adsl_phl_ch_1->awcc_library_name = NULL;
   /* entry configuration-section                                      */
   adsl_phl_ch_1->adsc_node_conf = NULL;
   adsl_phl_ch_1->adsc_ext_lib1 = NULL;     /* server-data-hook external library */
   adsl_phl_ch_1->adsc_phl_obj = adsl_phl_obj_w1;  /* plain-HTTP-library-object */
#ifdef B130410
   adsp_cs->adsc_phl_chain = adsl_phl_ch_1;  /* set new chain          */
#endif
   if (adsp_cs->adsc_phl_chain == NULL) {    /* check old chain        */
     adsp_cs->adsc_phl_chain = adsl_phl_ch_1;  /* set new chain        */
   } else {
     adsl_phl_ch_last = adsp_cs->adsc_phl_chain;  /* last in chain     */
     while (adsl_phl_ch_last->adsc_next) adsl_phl_ch_last = adsl_phl_ch_last->adsc_next;
     adsl_phl_ch_last->adsc_next = adsl_phl_ch_1;  /* append to chain  */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_phl_chain=%p last element=%p.", adsp_cs->adsc_phl_chain, adsl_phl_ch_1 );
#endif
   /* plain-HTTP-library-object processed                              */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_not_cl_bal:                  /* do-not-close-by-load-balancing */
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.boc_not_close_lbal = TRUE;  /* do-not-close-by-load-balancing */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.boc_not_close_lbal = FALSE;  /* do-not-close-by-load-balancing */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01124W Error %s%(ux)s%s %(ux)s do-not-close-by-load-balancing neither YES nor NO: \"%(ux)s\" - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_conntype:                    /* conn-type               */
   iml1 = sizeof(dsrs_conn_type_tab) / sizeof(dsrs_conn_type_tab[0]);
   do {                                     /* loop to find value      */
     iml1--;                                /* decrement index         */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         dsrs_conn_type_tab[ iml1 ].achc_name, -1, ied_chs_utf_8,
                         awcu3_value, -1, ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       adsp_cs->dsc_gate.iec_coty = dsrs_conn_type_tab[ iml1 ].iec_coty;  /* connection type */
       goto p_buco_conn_76;                 /* mark element as set     */
     }
   } while (iml1 > 0);
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s conn-type \"%(ux)s\" not defined - ignored",
                   MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_krb5_keytab:                 /* Kerberos-5-keytab-file  */
   adsp_cs->dsc_tn_krb5_keytab.awcc_value = awcu3_value;  /* value Kerberos-5-keytab-file */
   adsp_cs->dsc_tn_krb5_keytab.iml_line_no = MAC_XML_LINENO( adsl_node_02 );  /* line number */
   adsp_cs->dsc_tn_krb5_keytab.iml_col_no = MAC_XML_COL( adsl_node_02 );  /* column number */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_krb5_princ:                  /* Kerberos-5-service-principal-name */
   adsp_cs->awcc_node_krb5_princ = awcu3_value;  /* value Kerberos-5-service-principal-name */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_serverineta:
   if (   (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_DIR)
       && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_CASC_WSP)) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01111W line=%d col=%d Error %s%(ux)s%s %(ux)s function neither DIRECT nor CASCADED-WSP - serverineta \"%(ux)s\" superfluous - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d)  /* protocol MS RDG_OUT_DATA */
       || (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_in_d)) {  /* protocol MS RDG_IN_DATA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s protocol RDG-OUT or RDG-IN - serverineta \"%(ux)s\" superfluous - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
#ifdef B070917
   achl1 = XMLString::transcode( (XMLCh *) awcu3_value );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_XYZ1, "m_conf_conn found serverineta %s", achl1 );
#endif
#ifndef OLD01
#ifdef B070917
   adsp_cs->dsc_server_conf_1_c.adsc_server_ineta = m_get_ineta_multi( achl1 );
#endif
   if (adsp_cs->dsc_server_conf_1_c.adsc_server_ineta == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01112W Error %s%(ux)s%s %(ux)s serverineta \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     XMLString::release( &achl1 );          /* free INETA again        */
     goto p_buco_conn_80;                   /* end of this element     */
   }
#else
   adsp_cs->dsc_server_conf_1_c.umc_server_ineta = IP_inet_addr( achl1 );
   if (adsp_cs->dsc_server_conf_1_c.umc_server_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     adsl_hostentry = IP_gethostbyname( achl1 );
     if (adsl_hostentry == NULL) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01112W Error %s%(ux)s%s %(ux)s serverineta \"%(ux)s\" invalid - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       XMLString::release( &achl1 );        /* free INETA again        */
       goto p_buco_conn_80;                 /* end of this element     */
     }
     adsp_cs->dsc_server_conf_1_c.umc_server_ineta
       = *((UNSIG_MED *) **(&(*adsl_hostentry).h_addr_list));
   }
#endif
   XMLString::release( &achl1 );            /* free INETA again        */
#endif
   awcl_node_serverineta = awcu3_value;     /* save value serverineta  */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_serverport:
   if (   (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_DIR)
       && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_CASC_WSP)) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01113W line=%d col=%d Error %s%(ux)s%s %(ux)s function neither DIRECT nor CASCADED-WSP - serverport \"%(ux)s\" superfluous - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d)  /* protocol MS RDG_OUT_DATA */
       || (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_in_d)) {  /* protocol MS RDG_IN_DATA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s protocol RDG-OUT or RDG-IN - serverport \"%(ux)s\" superfluous - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
#ifdef B070917
   adsp_cs->dsc_server_conf_1_c.inc_server_port = m_get_wc_number( awcu3_value );
#endif
   adsp_cs->dsc_server_conf_1_c.inc_server_port = m_get_port_no( awcu3_value, -1, ied_chs_utf_16 );
   if (adsp_cs->dsc_server_conf_1_c.inc_server_port < 0) {  /* not numeric */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01114W Error %s%(ux)s%s %(ux)s serverport \"%(ux)s\" not numeric or invalid protocol - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_dns_lookup:                  /* DNS-lookup-before-connect */
// to-do 24.07.10 KB
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_WTS:                     /* function WTSGATE        */
     case DEF_FUNC_VDI_WSP:                 /* function VDI-WSP-GATE   */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s DNS-lookup-before-connect \"%(ux)s\" cannot be applied for this function - ignored",
                       MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_dns_lookup_before_connect = TRUE;  /* needs to solve INETA before connect */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_dns_lookup_before_connect = FALSE;  /* needs to solve INETA before connect */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s DNS-lookup-before-connect neither YES nor NO: \"%(ux)s\" - ignored",
                   MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_backlog:
#ifndef B080407
   adsp_cs->dsc_gate.imc_backlog = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_gate.imc_backlog < 0) {  /* backlog not numeric    */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01115W Error %s%(ux)s%s %(ux)s backlog \"%(ux)s\" not numeric - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
#endif
#ifdef B080407
   adsp_cs->dsc_gate.ibacklog = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_gate.ibacklog < 0) {    /* backlog not numeric     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01115W Error %s%(ux)s%s %(ux)s backlog \"%(ux)s\" not numeric - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_name );
     goto p_buco_conn_80;                   /* end of this element     */
   }
#endif
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_ginieta:                     /* gate-in-ineta           */
#ifdef B080407
#ifdef HL_IPV6
   if (bog_ipv6 == FALSE) {                 /* is not IPV6             */
#endif
     achl1 = XMLString::transcode( (XMLCh *) awcu3_value );
#ifndef OLD01
     adsp_cs->dsc_gate.ul_in_ineta = m_get_ineta_single( achl1 );
     if (adsp_cs->dsc_gate.ul_in_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01116W Error %s%(ux)s%s %(ux)s gate-in-ineta \"%(ux)s\" not valid - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       adsp_cs->dsc_gate.ul_in_ineta = INADDR_ANY;  /* set default     */
       XMLString::release( &achl1 );        /* free INETA again        */
       goto p_buco_conn_80;                 /* end of this element     */
     }
#else
     adsp_cs->dsc_gate.ul_in_ineta = IP_inet_addr( achl1 );
     if (adsp_cs->dsc_gate.ul_in_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
       adsl_hostentry = IP_gethostbyname( achl1 );
       if (adsl_hostentry == NULL) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01116W Error %s%(ux)s%s %(ux)s gate-in-ineta \"%(ux)s\" not valid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
         adsp_cs->dsc_gate.ul_in_ineta = INADDR_ANY;  /* set default   */
         XMLString::release( &achl1 );      /* free INETA again        */
         goto p_buco_conn_80;               /* end of this element     */
       } else {
         adsp_cs->dsc_gate.ul_in_ineta = *((UNSIG_MED *) **(&(*adsl_hostentry).h_addr_list) );
       }
     }
#endif
     XMLString::release( &achl1 );            /* free INETA again        */
#ifdef TRACEHL1
     m_hlnew_printf( HLOG_TRACE1, "gate_in_ineta ip-addr %08X", adsp_cs->dsc_gate.ul_in_ineta );
#endif
     goto p_buco_conn_76;                   /* mark element as set     */
#ifdef HL_IPV6
   }
   adsp_cs->awcc_in_ineta = awcu3_value;    /* value of INETA input    */
   goto p_buco_conn_76;                     /* mark element as set     */
#endif
#endif
#ifdef B141227
#ifndef B080407
   adsp_cs->awcc_in_ineta = awcu3_value;    /* value of INETA input    */
   goto p_buco_conn_76;                     /* mark element as set     */
#endif
#endif
   adsl_cli1_w1 = adsp_cs->adsc_cli1;       /* get chain INETA listen  */
   while (adsl_cli1_w1) {                   /* loop over elements configured before */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         adsl_cli1_w1->vpc_work_1, -1, ied_chs_utf_16,
                         awcu3_value, -1, ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01290W line=%d col=%d Error %s%(ux)s%s %(ux)s gate-in-ineta \"%(ux)s\" configured before, double - ignored",
                       MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* end of this element     */
     }
     adsl_cli1_w1 = adsl_cli1_w1->adsc_next;  /* get next in chain     */
   }
   adsl_cli1_w1 = m_get_chain_listen_ineta( awcu3_value, -1, ied_chs_utf_16 );
   if (adsl_cli1_w1 == NULL) {              /* failed to build listen-INETA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01291W line=%d col=%d Error %s%(ux)s%s %(ux)s gate-in-ineta \"%(ux)s\" not valid - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   adsl_cli1_w1->vpc_work_1 = awcu3_value;  /* save this value         */
   adsl_cli1_w1->adsc_next = adsp_cs->adsc_cli1;  /* get old chain INETA listen */
   adsp_cs->adsc_cli1 = adsl_cli1_w1;       /* set new chain INETA listen */
   goto p_buco_conn_80;                     /* end of this element     */

   p_buco_conn_goutineta:                   /* gate-out-ineta          */
#ifdef B070917
   achl1 = XMLString::transcode( (XMLCh *) awcu3_value );
#ifndef OLD01
   adsp_cs->dsc_server_conf_1_c.umc_out_ineta = m_get_ineta_single( achl1 );
   if (adsp_cs->dsc_server_conf_1_c.umc_out_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01117W Error %s%(ux)s%s %(ux)s gate-out-ineta \"%(ux)s\" not valid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     XMLString::release( &achl1 );          /* free INETA again        */
     adsp_cs->dsc_server_conf_1_c.umc_out_ineta = INADDR_ANY;  /* set default */
     goto p_buco_conn_80;                   /* end of this element     */
   }
#else
   adsp_cs->dsc_server_conf_1_c.umc_out_ineta = IP_inet_addr( achl1 );
   if (adsp_cs->dsc_server_conf_1_c.umc_out_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
     adsl_hostentry = IP_gethostbyname( achl1 );
     if (adsl_hostentry == NULL) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01117W Error %s%(ux)s%s %(ux)s gate-out-ineta \"%(ux)s\" not valid - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
       XMLString::release( &achl1 );        /* free INETA again        */
       adsp_cs->dsc_server_conf_1_c.umc_out_ineta = INADDR_ANY;  /* set default */
       goto p_buco_conn_80;                 /* end of this element     */
     } else {
       adsp_cs->dsc_server_conf_1_c.umc_out_ineta = *((UNSIG_MED *) **(&(*adsl_hostentry).h_addr_list) );
     }
   }
#endif
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "gate_out_ineta ip-addr %08X", adsp_cs->dsc_server_conf_1_c.umc_out_ineta );
#endif
   XMLString::release( &achl1 );            /* free INETA again        */
#endif
   inl1 = m_build_bind_ineta( &adsp_cs->dsc_server_conf_1_c.dsc_bind_out,
                              awcu3_value, -1, ied_chs_utf_16 );
   if (inl1) {                              /* error occured           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01117W Error %s%(ux)s%s %(ux)s gate-out-ineta \"%(ux)s\" not valid, error %d - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name, inl1 );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_connrr:                      /* connect-round-robin     */
// to-do 24.07.10 KB
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_WTS:                     /* function WTSGATE        */
     case DEF_FUNC_VDI_WSP:                 /* function VDI-WSP-GATE   */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s connect-round-robin \"%(ux)s\" cannot be applied for this function - ignored",
                       MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_connect_round_robin = TRUE;  /* connect-round-robin */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_connect_round_robin = FALSE;  /* connect-round-robin */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s connect-round-robin neither YES nor NO: \"%(ux)s\" - ignored",
                   MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_useinetaappl:                /* use-ineta-appl          */
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s use-ineta-appl \"%(ux)s\" not possible for this function - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_use_ineta_appl = TRUE;  /* use HTCP */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_use_ineta_appl = FALSE;  /* use HTCP */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s use-ineta-appl neither YES nor NO: \"%(ux)s\" - ignored",
               adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
               adsp_cs->awcc_name_value,
               awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_useclsssl:                   /* use-client-side-SSL     */
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s use-client-side-SSL \"%(ux)s\" not possible for this function - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     case DEF_FUNC_CASC_WSP:                /* set function CASCADED-WSP */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s use-client-side-SSL \"%(ux)s\" not configurable - always set for function CASCADED-WSP - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     if (adsp_cs->adsc_loconf_1_fill->boc_csssl_conf == FALSE) {  /* Client Side SSL not configured */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s use-client-side-SSL \"%(ux)s\" not possible because no section client-side-SSL found - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_use_csssl = TRUE;  /* use client-side-SSL */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_use_csssl = FALSE;  /* use client-side-SSL */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s use-client-side-SSL neither YES nor NO: \"%(ux)s\" - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_wtsbrport:
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_WTS) {  /* function not WTSGATE */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01118W Error %s%(ux)s%s %(ux)s function not WTSGATE - wts-br-port \"%(ux)s\" superfluous - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (adsp_cs->adsc_wtsg1_ch) {            /* chain server list       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01119W Error %s%(ux)s%s %(ux)s wts-server-list set - wts-br-port \"%(ux)s\" not allowed - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   adsp_cs->dsc_server_conf_1_c.inc_wts_br_port = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port < 0) {  /* not numeric */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01120W Error %s%(ux)s%s %(ux)s wts-br-port \"%(ux)s\" not numeric - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_wtschname:                   /* <wts-check-name>        */
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_WTS) {  /* function not WTSGATE */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01121W Error %s%(ux)s%s %(ux)s function not WTSGATE - wts-check-name \"%(ux)s\" superfluous - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = TRUE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#else
   if (!wcscmp( awcu3_value, L"YES" )) {
     if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_WTS) {  /* function not WTSGATE */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01121W Error %s%(ux)s%s %(ux)s function not WTSGATE - wts-check-name \"%(ux)s\" superfluous - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
//   adsp_cs->dsc_gate.bo_wts_check_name = TRUE;  /* check name logon WTS */
     adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = TRUE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   if (!wcscmp( awcu3_value, L"NO" )) {
//   adsp_cs->dsc_gate.bo_wts_check_name = FALSE;  /* check name logon WTS */
//   adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = FALSE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#endif
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01122W Error %s%(ux)s%s %(ux)s wts-check-name neither YES nor NO: \"%(ux)s\" - ignored",
               adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
               adsp_cs->awcc_name_value,
               awcu3_value );
   goto p_buco_conn_80;                     /* end of this element     */

#ifdef OLD_111205
   p_buco_conn_blabrport:
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {  /* compare if VDI-WSP-GATE */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01161W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - blade-br-port \"%(ux)s\" superfluous - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (adsp_cs->adsc_wtsg1_ch) {            /* chain server list       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01162W Error %s%(ux)s%s %(ux)s blade-server-list set - blade-br-port \"%(ux)s\" not allowed - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsp_cs->dsc_server_conf_1_c.inc_wts_br_port = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port < 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01163W Error %s%(ux)s%s %(ux)s blade-br-port \"%(ux)s\" not numeric - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_blachname:                   /* <blade-check-name>      */
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {  /* function not VDI-WSP-GATE */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01164W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - blade-check-name \"%(ux)s\" superfluous - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = TRUE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#else
   if (!wcscmp( awcu3_value, L"YES" )) {
     if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_BLADE) {    /* function not BLADEGATE  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01164W Error %s%(ux)s%s %(ux)s function not BLADEGATE - blade-check-name \"%(ux)s\" superfluous - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
//   adsp_cs->dsc_gate.bo_wts_check_name = TRUE;  /* check name logon WTS */
     adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = TRUE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   if (!wcscmp( awcu3_value, L"NO" )) {
//   adsp_cs->dsc_gate.bo_wts_check_name = FALSE;  /* check name logon WTS */
//   adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = FALSE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#endif
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01165W Error %s%(ux)s%s %(ux)s blade-check-name neither YES nor NO: \"%(ux)s\" - ignored",
               adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
               adsp_cs->awcc_name_value,
               awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */
#endif

   p_buco_conn_vdibrport:                   /* <VDI-broadcast-port>    */
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {  /* compare if VDI-WSP-GATE */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01161W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - VDI-broadcast-port \"%(ux)s\" superfluous - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   if (adsp_cs->adsc_wtsg1_ch) {            /* chain server list       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01162W Error %s%(ux)s%s %(ux)s VDI-suos-list set - VDI-broadcast-port \"%(ux)s\" not allowed - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsp_cs->dsc_server_conf_1_c.inc_wts_br_port = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port < 0) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01163W Error %s%(ux)s%s %(ux)s VDI-broadcast-port \"%(ux)s\" not numeric - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port == 0)
       || (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port >= 0X010000)) {  /* out of range */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW line=%d col=%d Error %s%(ux)s%s %(ux)s VDI-broadcast-port value \"%(ux)s\" / \"%d\" out of range - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     adsp_cs->dsc_server_conf_1_c.inc_wts_br_port );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_vdichname:                   /* <VDI-check-name>        */
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {  /* function not VDI-WSP-GATE */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01164W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - VDI-check-name \"%(ux)s\" superfluous - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_wts_check_name = TRUE;  /* check name logon WTS */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01165W Error %s%(ux)s%s %(ux)s VDI-check-name neither YES nor NO: \"%(ux)s\" - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_scprot:                      /* <protocol>              */
   inl2 = adsp_cs->dsc_server_conf_1_c.iec_scp_def;  /* save old protocoll */
#ifndef OLD01
   inl1 = m_count_wchar_z_to_utf8( (HL_WCHAR *) awcu3_value );  /* length UTF-8 */
   if (inl1 > sizeof(adsp_cs->chrc_prot_1) ){  /* UTF-8 string too long */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02110W Error %s%(ux)s%s %(ux)s protocol strint \"%(ux)s\" too long (UTF-8 len %d > %d) - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value, inl1, sizeof(adsp_cs->chrc_prot_1) );
     goto p_buco_conn_80;                   /* get next name           */
   }
   m_trans_wchar_z_to_utf8( adsp_cs->chrc_prot_1, (HL_WCHAR *) awcu3_value );
   adsp_cs->dsc_server_conf_1_c.iec_scp_def
     = m_decode_prot( ied_chs_utf_8, adsp_cs->chrc_prot_1, inl1 );
   if (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_spec) {
     adsp_cs->dsc_server_conf_1_c.inc_len_protocol = inl1;
   }
#else
   inl1 = m_count_wchar_z_to_utf8( (HL_WCHAR *) awcu3_value );  /* length UTF-8 */
   if (inl1 > sizeof(adsp_cs->chrc_prot_1) ){  /* UTF-8 string too long */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01116-xxW Error %s%(ux)s%s %(ux)s protocol strint \"%(ux)s\" too long (UTF-8 len %d > %d) - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value, inl1, sizeof(adsp_cs->chrc_prot_1) );
     goto p_buco_conn_80;                   /* get next name           */
   }
   m_trans_wchar_z_to_utf8( adsp_cs->chrc_prot_1, (HL_WCHAR *) awcu3_value );
   adsp_cs->dsc_server_conf_1_c.iec_scp_def = m_decode_prot( adsp_cs->chrc_prot_1, inl1 );
   if (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_spec) {
     adsp_cs->dsc_server_conf_1_c.inc_len_protocol = inl1;
   }
#endif
#ifdef B150520
   if (   (   (inl2 != ied_scp_undef)
           && (inl2 != ied_scp_rdp)         /* protocol MS RDP         */
           && (inl2 != ied_scp_hrdpe1))     /* protocol HOB MS RDP Extension 1 */
       && (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_rdp)  /* protocol MS RDP */
           && (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_hrdpe1))) {  /* protocol HOB MS RDP Extension 1 */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02111W Error %s%(ux)s%s %(ux)s protocol already set - value: \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = (ied_scp_def) inl2;  /* restore old protocoll */
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
#ifndef B150520
   if (   (   (inl2 != ied_scp_undef)
           && (inl2 != ied_scp_rdp)         /* protocol MS RDP         */
           && (inl2 != ied_scp_hrdpe1)      /* protocol HOB MS RDP Extension 1 */
           && (inl2 != ied_scp_sstp))       /* protocol SSTP           */
       && (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_rdp)  /* protocol MS RDP */
           && (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_hrdpe1)  /* protocol HOB MS RDP Extension 1 */
           && (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_sstp))) {  /* protocol SSTP */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02111W Error %s%(ux)s%s %(ux)s protocol already set - value: \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     adsp_cs->dsc_server_conf_1_c.iec_scp_def = (ied_scp_def) inl2;  /* restore old protocoll */
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       switch (adsp_cs->dsc_server_conf_1_c.iec_scp_def) {
         case ied_scp_hpppt1:               /* protocol HOB-PPP-T1     */
         case ied_scp_sstp:                 /* protocol SSTP           */
           break;
         default:
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW Error %s%(ux)s%s %(ux)s protocol value: \"%(ux)s\" not valid for this function - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           awcu3_value );
           adsp_cs->dsc_server_conf_1_c.iec_scp_def = (ied_scp_def) inl2;  /* restore old protocoll */
           goto p_buco_conn_80;             /* get next name           */
       }
       break;                               /* this is valid           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_hcproxa:                     /* <hcproxauth>            */
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     if (adsp_cs->dsc_server_conf_1_c.inc_function != 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01123W Error %s%(ux)s%s %(ux)s function not DIRECT - hcproxauth \"%(ux)s\" not possible - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_hc_proxauth = TRUE;  /* HOBCOM proxy communic */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_hc_proxauth = FALSE;  /* HOBCOM proxy communic */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#else
   if (!wcscmp( awcu3_value, L"YES" )) {
     if (adsp_cs->dsc_server_conf_1_c.inc_function != 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01123W Error %s%(ux)s%s %(ux)s function not DIRECT - hcproxauth \"%(ux)s\" not possible - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsp_cs->dsc_server_conf_1_c.boc_hc_proxauth = TRUE;  /* HOBCOM proxy communic */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   if (!wcscmp( awcu3_value, L"NO" )) {
     adsp_cs->dsc_server_conf_1_c.boc_hc_proxauth = FALSE;  /* HOBCOM proxy communic */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
#endif
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01124W Error %s%(ux)s%s %(ux)s hcproxauth neither YES nor NO: \"%(ux)s\" - ignored",
               adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
               adsp_cs->awcc_name_value,
               awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_targetfi:                    /* <target-filter>         */
   adsl_targfi_w1 = adsp_cs->adsc_targfi_1_anchor;  /* get chain target-filter */
   while (adsl_targfi_w1) {                 /* loop over all target-filter */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         (char *) adsl_targfi_w1 + adsl_targfi_w1->imc_off_name,
                         adsl_targfi_w1->imc_len_name,
                         ied_chs_utf_8,
                         awcu3_value,
                         -1,
                         ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
     adsl_targfi_w1 = adsl_targfi_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_targfi_w1 == NULL) {            /* target-filter not found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02112W Error %s%(ux)s%s %(ux)s target-filter \"%(ux)s\" not defined - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value,
                 awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsp_cs->dsc_server_conf_1_c.adsc_targfi_1 = adsl_targfi_w1;  /* set target-filter */
   adsl_targfi_w1->boc_in_use = TRUE;       /* target-filter is in use */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_authlib:                     /* <authentication-library> */
   if (borl_conn[ DEF_XML_CONN_AUTHLIB_OBJ ]) {  /* authentication-library-object already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s node <authentication-library> found but node <authentication-library-object> defined before - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   awcl_node_hobwspat3_lib_na = NULL;       /* no library name         */
   adsl_node_hobwspat3_conf = NULL;         /* no entry configuration-section */

   p_buco_auli_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_auli_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
   while (TRUE) {                           /* pseudo-loop             */
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "configuration-section" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       goto p_buco_auli_40;                 /* process configuration   */
     }
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "library-file-name" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01118W Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_auli_60;                   /* get next list entry     */
   }
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02120W Error %s%(ux)s%s %(ux)s authentication-library entry has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_auli_60;                   /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02121W Error %s%(ux)s%s %(ux)s authentication-library entry no value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_auli_60;                   /* get next list entry     */
   }
   if (awcl_node_hobwspat3_lib_na != NULL) {  /* library name already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02122W Error %s%(ux)s%s %(ux)s authentication-library library-file-name double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_auli_60;                   /* get next list entry     */
   }
   awcl_node_hobwspat3_lib_na = awcu4_value;  /* save library name     */
   goto p_buco_auli_60;                     /* get next sibling        */

   p_buco_auli_40:                          /* configuration-section found */
   if (adsl_node_hobwspat3_conf) {          /* entry found before      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02123W Error %s%(ux)s%s %(ux)s authentication-library configuration-section double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
   } else {
     adsl_node_hobwspat3_conf = adsl_node_02;  /* save this node       */
   }

   p_buco_auli_60:                          /* get next sibling        */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "p_buco_auli_60: adsl_node_02=%p", adsl_node_02 );
#endif
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_auli_20;
   if (awcl_node_hobwspat3_lib_na == NULL) {  /* library name          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02124W Error %s%(ux)s%s %(ux)s authentication-library no <library-file-name> found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }

   /* save this entry                                                  */
   adsp_cs->adsc_hobwspat3_def_1 = (struct dsd_wspat_def_1 *) malloc( sizeof(struct dsd_wspat_def_1) );
   memset( adsp_cs->adsc_hobwspat3_def_1, 0, sizeof(struct dsd_wspat_def_1) );
   adsp_cs->adsc_hobwspat3_def_1->adsc_node_def = adsl_node_01;  /* node definition */
   /* name of library                                                  */
   adsp_cs->adsc_hobwspat3_def_1->awcc_library_name = awcl_node_hobwspat3_lib_na;
   /* entry configuration-section                                      */
   adsp_cs->adsc_hobwspat3_def_1->adsc_node_conf = adsl_node_hobwspat3_conf;
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_hobwspat3_def_1=%p", adsp_cs->adsc_hobwspat3_def_1 );
#endif
   /* HOB-WSP-AT3 processed                                            */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_wspat_obj_00:                /* <authentication-library-object> */
   if (borl_conn[ DEF_XML_CONN_AUTHLIB_S ]) {  /* authentication-library already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s node <authentication-library-object> found but node <authentication-library> defined before - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   adsl_wspat_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_wspat_obj_1;  /* get chain authentication-library-object */
   while (adsl_wspat_obj_w1) {              /* loop over chain authentication-library-object */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         (char *) (adsl_wspat_obj_w1 + 1),
                         adsl_wspat_obj_w1->imc_len_name,
                         ied_chs_utf_8,
                         awcu3_value,
                         -1,
                         ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) break;   /* strings are equal       */
     adsl_wspat_obj_w1 = adsl_wspat_obj_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_wspat_obj_w1 == NULL) {         /* authentication-library-object not found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s node <authentication-library-object> \"%(ux)s\" found but not defined - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value, awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   adsp_cs->adsc_wspat_obj = adsl_wspat_obj_w1;  /* definition authentication-library-object */
// to-do 08.01.12 KB set in conf
// adsl_ext_lib1_w1->imc_usage_count++;     /* increment usage count   */
// imc_references
   goto p_buco_conn_76;                     /* mark element as set     */
#ifdef OLD_111205
   p_buco_conn_authradius:                  /* <authentication-radius> */
#ifdef OLD01
   if (borl_conn[ DEF_XML_CONN_AUTHLIB ]) {  /* authlib already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01240W Error %s%(ux)s%s %(ux)s node <authentication-radius> found but node <authentication-library> defined before - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
#endif
   if (D_COND_SELI) {                       /* is in server-list       */
     if (   (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_HPPPT1)  /* function HOB-PPP-T1 Tunnel */
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_SSTP)  /* function SSTP Tunnel */
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_L2TP)) {  /* function L2TP UDP connection */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0uuuuW Error %s%(ux)s%s %(ux)s authentication-radius in server-list but not function not HOB-PPP-T1, SSTP or L2TP - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_buco_conn_80;                 /* ignore this entry       */
     }
   }
   iel_pttd_conf1 = ied_pttdc_nothing;      /* pass thru to deskt conf */
   iel_rasc_conf1 = ied_rasc_nothing;       /* send certificate        */

   p_buco_aura_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_aura_80;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
#ifndef OLD01
   inl1 = sizeof(achrs_node_aura_kw) / sizeof(achrs_node_aura_kw[0]);
   while (TRUE) {                           /* loop over possible values */
     if (inl1 == 0) {                       /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01241W Error %s%(ux)s%s %(ux)s authentication-radius invalid node found \"%(ux)s\" - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_name );
       goto p_buco_aura_80;                 /* get next sibling        */
     }
     inl1--;                                /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &inl2, awcu4_name, (char *) achrs_node_aura_kw[ inl1 ] );
     if ((bol1) && (inl2 == 0)) {           /* strings are equal       */
       break;
     }
   }
#else
   inl1 = 0;                                /* no special value        */
   if (!wcscmp( awcu4_name, L"configuration-desktop" )) {  /* comp co  */
     inl1 = 1;
   } else if (!wcscmp( awcu4_name, L"send-certificate" )) {  /* comp c */
     inl1 = 2;
   } else if (wcscmp( awcu4_name, L"radius-name" )) {  /* compare co   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01241W Error %s%(ux)s%s %(ux)s authentication-radius invalid node found \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_aura_80;                   /* get next sibling        */
   }
#endif
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01242W Error %s%(ux)s%s %(ux)s authentication-radius - \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_aura_80;
   }

   p_buco_aura_28:                          /* search value            */
   if (adsl_node_03->getNodeType() != DOMNode::TEXT_NODE) goto p_buco_aura_36;
   awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
   switch (inl1) {                          /* check which parameter   */
     case 1:                                /* configuration-desktop   */
       goto p_buco_aura_40;                 /* process value           */
     case 2:                                /* send-certificate        */
       goto p_buco_aura_48;                 /* process value           */
   }

#ifdef OLD_1112
   /* search radius server definition                                  */
   adsl_raent_1 = adsp_cs->adsc_raent_anchor;  /* get chain of already defined */
   while (adsl_raent_1) {                   /* loop over total chain   */
     if (adsl_raent_1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_raent_1 + 1), awcu4_value )) {
         break;
       }
     }
     adsl_raent_1 = adsl_raent_1->adsc_next;  /* get next in chain     */
   }
   if (adsl_raent_1 == NULL) {              /* radius server not found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01243W Error %s%(ux)s%s %(ux)s authentication-radius - radius-server \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_aura_36;                   /* search value next step  */
   }
   /* search if defined double                                         */
   avpl_radius_ch_1 = adsp_cs->avpc_radius_chain;
   while (avpl_radius_ch_1) {
     if (adsl_raent_1 == *(avpl_radius_ch_1 + 1)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01244W Error %s%(ux)s%s %(ux)s authentication-radius - radius-server \"%(ux)s\" defined double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value );
       goto p_buco_aura_36;                   /* search value next step  */
     }
     avpl_radius_ch_1 = (void **) *avpl_radius_ch_1;
   }
   if (adsl_raent_1->iec_red == ied_red_invalid) {  /* entry invalid   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01245W Error %s%(ux)s%s %(ux)s authentication-radius - radius-server \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_aura_36;                   /* search value next step  */
   }
   avpl_radius_ch_1 = (void **) malloc( 2 * sizeof(void *) );
   *avpl_radius_ch_1 = adsp_cs->avpc_radius_chain;  /* get old chain   */
   *(avpl_radius_ch_1 + 1) = adsl_raent_1;  /* set element found       */
   adsp_cs->avpc_radius_chain = avpl_radius_ch_1;  /* set new chain    */
#endif

   p_buco_aura_36:                          /* search value next step  */
   adsl_node_03 = adsl_node_03->getNextSibling();
   if (adsl_node_03) goto p_buco_aura_28;
   goto p_buco_aura_80;                     /* search value next step  */

   p_buco_aura_40:                          /* configuration-desktop   */
   if (iel_pttd_conf1 != ied_pttdc_nothing) {  /* pass thru to deskt c */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01246W Error %s%(ux)s%s %(ux)s authentication-radius - configuration-desktop defined double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_aura_80;                   /* search value next step  */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_PTTD)
       && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_SS5H)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01247W Error %s%(ux)s%s %(ux)s authentication-radius - configuration-desktop defined but not function PASS-THRU-TO-DESKTOP - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_aura_80;                   /* search value next step  */
   }
#ifndef OLD01
   while (TRUE) {                           /* loop over possible values */
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_value, "attribute-vendor-specific-1" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       iel_pttd_conf1 = ied_pttdc_avendsp1;  /* set value              */
       break;
     }
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_value, "attribute-116" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       iel_pttd_conf1 = ied_pttdc_attr116;  /* set value               */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01248W Error %s%(ux)s%s %(ux)s configuration-desktop invalid value \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     break;
   }
#else
   if (!wcscmp( awcu4_value, L"attribute-vendor-specific-1" )) {
     iel_pttd_conf1 = ied_pttdc_avendsp1;   /* set value               */
   } else if (!wcscmp( awcu4_value, L"attribute-116" )) {
     iel_pttd_conf1 = ied_pttdc_attr116;    /* set value               */
   } else {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01248W Error %s%(ux)s%s %(ux)s configuration-desktop invalid value \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
   }
#endif
   goto p_buco_aura_80;                     /* search value next step  */

   p_buco_aura_48:                          /* send-certificate        */
   if (iel_rasc_conf1 != ied_rasc_nothing) {  /* certificate already set */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02130W Error %s%(ux)s%s %(ux)s authentication-radius - send-certificate defined double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_aura_80;                   /* search value next step  */
   }
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_value, "attribute-vendor-specific-hob-1" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     iel_rasc_conf1 = ied_rasc_avendsphob1;  /* set value              */
   } else {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02131W Error %s%(ux)s%s %(ux)s send-certificate invalid value \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
   }
#else
   if (!wcscmp( awcu4_value, L"attribute-vendor-specific-hob-1" )) {
     iel_rasc_conf1 = ied_rasc_avendsphob1;  /* set value              */
   } else {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01248-xxW Error %s%(ux)s%s %(ux)s send-certificate invalid value \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
   }
#endif

   p_buco_aura_80:                          /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_aura_20;
   if (adsp_cs->avpc_radius_chain == NULL) {  /* radius server found   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01249W Error %s%(ux)s%s %(ux)s no Radius Server defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (iel_pttd_conf1 != ied_pttdc_nothing) {  /* pass thru to deskt c */
     adsp_cs->dsc_radius_conf.iec_pttd_conf1 = iel_pttd_conf1;
   }
   if (iel_rasc_conf1 != ied_rasc_nothing) {  /* send-certificate conf */
     adsp_cs->dsc_radius_conf.iec_rasc_conf1 = iel_rasc_conf1;
   }
   goto p_buco_conn_76;                     /* mark element as set     */
#endif

   p_buco_conn_rad_gr_00:                   /* radius-group            */
#ifdef XYZ1
   if (adsp_cs->boc_dyn_radius) {           /* dynamic-radius          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s radius-group \"%(ux)s\" defined but dynamic-radius-KDC set - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
   /* search radius-group definition                                   */
   adsl_radius_group_w1 = adsp_cs->adsc_loconf_1_fill->adsc_radius_group;  /* chain Radius groups */
   while (adsl_radius_group_w1) {           /* loop over total chain   */
     bol1 = m_cmp_vx_vx( &inl1,
                         awcu3_value, -1, ied_chs_utf_16,
                         adsl_radius_group_w1 + 1, adsl_radius_group_w1->imc_len_name, ied_chs_utf_8 );
     if ((bol1) && (inl1 == 0)) break;      /* entry found             */
     adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_radius_group_w1 == NULL) {      /* radius-group not found  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s radius-group - radius-group \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   /* check if defined double                                          */
   inl1 = 0;                                /* clear index             */
   while (inl1 < adsp_cs->dsc_gate.imc_no_radius) {  /* number of radius server */
     if (adsl_radius_group_w1 == adsp_cs->aarc_radius_array[ inl1 ]) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s radius-group - radius-group \"%(ux)s\" configured double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     inl1++;                                /* increment index         */
   }
   while ((adsp_cs->dsc_gate.imc_no_radius % DEF_RADIUS_TEMP_ARRAY) == 0) {
     avpl_w1 = adsp_cs->aarc_radius_array;  /* save old storage        */
     adsp_cs->aarc_radius_array = (void **) malloc( (adsp_cs->dsc_gate.imc_no_radius + DEF_RADIUS_TEMP_ARRAY)
                                                    * sizeof(void *) );
     if (adsp_cs->dsc_gate.imc_no_radius == 0) break;
     memcpy( adsp_cs->aarc_radius_array, avpl_w1, adsp_cs->dsc_gate.imc_no_radius * sizeof(void *) );
     free( avpl_w1 );                       /* free old storage        */
     break;
   }
   adsp_cs->aarc_radius_array[ adsp_cs->dsc_gate.imc_no_radius ] = adsl_radius_group_w1;
   adsp_cs->dsc_gate.imc_no_radius++;
// to-do 16.05.09 KB array
// adsp_cs->dsc_gate.adsc_krb5_kdc_1 = adsl_krb5_kdc_1_w1;  /* definition Kerberos-5-KDC */
   goto p_buco_conn_76;                     /* mark element as set     */

#ifdef XYZ1
   p_buco_conn_dyn_rad_00:                  /* dynamic-radius          */
#endif

   p_buco_conn_userlist:                    /* <user-list>             */
#ifdef B06051
   if (borl_conn[ DEF_XML_CONN_AUTHLIB ]) {  /* authlib already defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01250W Error %s%(ux)s%s %(ux)s node <user-list> found but node <authentication-library> defined before - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;
   }
#endif

   p_buco_usli_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_usli_80;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "user-group-name" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02140W Error %s%(ux)s%s %(ux)s user-list invalid node found \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_usli_80;                   /* get next sibling        */
   }
#else
   if (wcscmp( awcu4_name, L"user-group-name" )) {  /* compare const   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01150-xxW Error %s%(ux)s%s %(ux)s user-list invalid node found \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_usli_80;                   /* get next sibling        */
   }
#endif
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01251W Error %s%(ux)s%s %(ux)s user-list - \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_usli_80;
   }

   p_buco_usli_28:                          /* search value            */
   if (adsl_node_03->getNodeType() != DOMNode::TEXT_NODE) goto p_buco_usli_72;
   awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();

   /* search user-group definition                                     */
   adsl_usgro_w1 = adsp_cs->adsc_usgro_anchor;        /* get chain of already de */
   while (adsl_usgro_w1) {                   /* loop over total chain   */
     if (adsl_usgro_w1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_usgro_w1 + 1), awcu4_value )) {
         break;
       }
     }
     adsl_usgro_w1 = adsl_usgro_w1->adsc_next;  /* get next in chain     */
   }
   if (adsl_usgro_w1 == NULL) {              /* user-group not found    */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01252W Error %s%(ux)s%s %(ux)s user-list - user-group \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_usli_72;                   /* search value next step  */
   }
   /* search if defined double                                         */
   avpl_usgro_ch_1 = adsp_cs->avpc_usgro_chain;
   while (avpl_usgro_ch_1) {
     if (adsl_usgro_w1 == *(avpl_usgro_ch_1 + 1)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01253W Error %s%(ux)s%s %(ux)s user-list - user-group \"%(ux)s\" defined double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value );
       goto p_buco_usli_72;                   /* search value next step  */
     }
     avpl_usgro_ch_1 = (void **) *avpl_usgro_ch_1;
   }
   if (adsl_usgro_w1->iec_ugd == ied_ugd_invalid) {  /* entry invalid   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01254W Error %s%(ux)s%s %(ux)s user-list - user-group \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_usli_72;                   /* search value next step  */
   }
   avpl_usgro_ch_1 = (void **) malloc( 2 * sizeof(void *) );
   *avpl_usgro_ch_1 = adsp_cs->avpc_usgro_chain;     /* get old chain           */
   *(avpl_usgro_ch_1 + 1) = adsl_usgro_w1;   /* set element found       */
   adsp_cs->avpc_usgro_chain = avpl_usgro_ch_1;      /* set new chain           */

   p_buco_usli_72:                          /* search value next step  */
   adsl_node_03 = adsl_node_03->getNextSibling();
   if (adsl_node_03) goto p_buco_usli_28;

   p_buco_usli_80:                          /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_usli_20;
   if (adsp_cs->avpc_usgro_chain == NULL) {  /* no user-group found    */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01255W Error %s%(ux)s%s %(ux)s user-list no valid user-group found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_language:                    /* <language>              */
   inl2 = 0;                                /* clear value language    */
   awcl1 = awcu3_value;                     /* start here              */
   do {
     while (*awcl1) {
       if (*awcl1 >= 0X80) break;
       inl2 <<= 8;
       inl2 |= *awcl1;
       awcl1++;
     }
     if (*awcl1) break;                     /* was not valid           */
     inl3 = sizeof(inrs_language) / sizeof(inrs_language[0]);
     do {
       inl3--;
       if (inl2 == inrs_language[inl3]) {
#ifdef OLD_1112
         adsp_cs->dsc_radius_conf.inc_language = inl2;
#else
         adsp_cs->dsc_gate.imc_language = inl2;
#endif
         goto p_buco_conn_76;               /* mark element as set     */
       }
     } while (inl3 > 0);
   } while (FALSE);
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01256W Error %s%(ux)s%s %(ux)s language \"%(ux)s\" not defined - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_selserv:                     /* <select-server>         */
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_SS5H) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02150W Error %s%(ux)s%s \"%(ux)s\" element \"%(ux)s\" only allowed in function SELECT-SOCKS5-HTTP - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;                   /* get next keyword        */
   }

   p_buco_selserv_20:                       /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_selserv_80;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "server-list-name" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02160W Error %s%(ux)s%s %(ux)s select-server invalid node found \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_selserv_80;                /* get next sibling        */
   }
#else
   if (wcscmp( awcu4_name, L"server-list-name" )) {  /* compare const  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01150-xxW Error %s%(ux)s%s %(ux)s select-server invalid node found \"%(ux)s\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_selserv_80;                /* get next sibling        */
   }
#endif
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02161W Error %s%(ux)s%s %(ux)s select-server - \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_selserv_80;                /* get next sibling        */
   }

   p_buco_selserv_28:                       /* search value            */
   if (adsl_node_03->getNodeType() != DOMNode::TEXT_NODE) goto p_buco_selserv_72;
   awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();

   /* search server-list definition                                    */
   adsl_seli_1_w1 = adsp_cs->adsc_server_list_1_anchor;  /* get chain of already def */
   while (adsl_seli_1_w1) {                   /* loop over total chain   */
     if (adsl_seli_1_w1->inc_len_name) {      /* length of name bytes    */
       if (!HL_WCSCMP( (HL_WCHAR *) (adsl_seli_1_w1 + 1), awcu4_value )) {
         break;
       }
     }
     adsl_seli_1_w1 = adsl_seli_1_w1->adsc_next;  /* get next in chain   */
   }
   if (adsl_seli_1_w1 == NULL) {             /* server-list not found   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02162W Error %s%(ux)s%s %(ux)s select-server - server-list \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_selserv_72;                /* search value next step  */
   }
   /* search if defined double                                         */
   avpl_selserv_ch_1 = adsp_cs->avpc_selserv_chain;
   while (avpl_selserv_ch_1) {              /* loop over total chain   */
     if (adsl_seli_1_w1 == *(avpl_selserv_ch_1 + 1)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02163W Error %s%(ux)s%s %(ux)s select-server - server-list \"%(ux)s\" defined double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value );
       goto p_buco_selserv_72;              /* search value next step  */
     }
     avpl_selserv_ch_1 = (void **) *avpl_selserv_ch_1;
   }
   if (adsl_seli_1_w1->iec_seli == ied_seli_invalid) {  /* entry invalid */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02164W Error %s%(ux)s%s %(ux)s select-server - server-list \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     goto p_buco_selserv_72;                /* search value next step  */
   }
   avpl_selserv_ch_1 = (void **) malloc( 2 * sizeof(void *) );
   *avpl_selserv_ch_1 = adsp_cs->avpc_selserv_chain;  /* get old chain */
   *(avpl_selserv_ch_1 + 1) = adsl_seli_1_w1;  /* set element found     */
   adsp_cs->avpc_selserv_chain = avpl_selserv_ch_1;  /* set new chain  */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "set new adsp_cs->avpc_selserv_chain=%p",
                   adsp_cs->avpc_selserv_chain );
#endif

   p_buco_selserv_72:                       /* search value next step  */
   adsl_node_03 = adsl_node_03->getNextSibling();
   if (adsl_node_03) goto p_buco_selserv_28;

   p_buco_selserv_80:                       /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_selserv_20;
   if (adsp_cs->avpc_selserv_chain == NULL) {  /* no server-list found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02165W Error %s%(ux)s%s %(ux)s select-server no valid server-list found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next keyword        */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_timeout:                     /* <timeout>               */
   inl1 = m_get_wc_number( awcu3_value );
   if (inl1 < 0) {                          /* timeout not numeric     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01127W Error %s%(ux)s%s %(ux)s timeout \"%(ux)s\" not numeric - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next keyword        */
   }
   adsp_cs->dsc_gate.itimeout = inl1;       /* set in gate             */
   adsp_cs->dsc_server_conf_1_c.inc_timeout = inl1;  /* set in server  */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_maxsess:                     /* <max-session>           */
   adsp_cs->dsc_gate.i_session_max = m_get_wc_number( awcu3_value );
   if (adsp_cs->dsc_gate.i_session_max < 0) {  /* max-session not numeric */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01128W Error %s%(ux)s%s %(ux)s max-session \"%(ux)s\" not numeric - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     adsp_cs->dsc_gate.i_session_max = 0;   /* set default value again */
     goto p_buco_conn_80;                   /* get next keyword        */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_sdh_00:                      /* <server-data-hook>      */
   adsl_node_02 = adsl_node_01->getFirstChild();
   if (adsl_node_02 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02170W Error %s%(ux)s%s %(ux)s <server-data-hook> \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_conn_80;
   }
   awcl_node_sdhlib = NULL;
   adsl_node_sdh_conf = NULL;               /* no entry configuration-section */

   p_buco_conn_sdh_20:                      /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_conn_sdh_60;

   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
#ifndef OLD01
   while (TRUE) {                           /* pseudo-loop             */
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "configuration-section" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       goto p_buco_conn_sdh_40;             /* process configuration   */
     }
     bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "library-file-name" );
     if ((bol1) && (inl1 == 0)) {           /* strings are equal       */
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01118W Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_sdh_60;               /* get next list entry     */
   }
#else
   if (!wcscmp( awcu4_name, L"configuration-section" )) {
     goto p_buco_conn_sdh_40;               /* process configuration   */
   }
   if (wcscmp( awcu4_name, L"library-file-name" )) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01118W Error %s%(ux)s%s %(ux)s element \"%(ux)s\" has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_sdh_60;               /* get next list entry     */
   }
#endif
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02171W Error %s%(ux)s%s %(ux)s server-data-hook entry has no child - ignored",
                 adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                 adsp_cs->awcc_name_value );
     goto p_buco_conn_sdh_60;               /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02172W Error %s%(ux)s%s %(ux)s server-data-hook entry no value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_sdh_60;               /* get next list entry     */
   }
   if (awcl_node_sdhlib != NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02173W Error %s%(ux)s%s %(ux)s server-data-hook library-file-name double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_sdh_60;               /* get next list entry     */
   }
   awcl_node_sdhlib = awcu4_value;          /* save value              */
   goto p_buco_conn_sdh_60;                 /* get next sibling        */

   p_buco_conn_sdh_40:                      /* configuration-section found */
   if (adsl_node_sdh_conf) {                /* entry found before      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02174W Error %s%(ux)s%s %(ux)s server-data-hook configuration-section double - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
   } else {
     adsl_node_sdh_conf = adsl_node_02;     /* save this node      */
   }

   p_buco_conn_sdh_60:                      /* get next sibling        */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "p_buco_conn_sdh_60: adsl_node_02=%p", adsl_node_02 );
#endif
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_conn_sdh_20;
   if (awcl_node_sdhlib == NULL) {          /* chain server list       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02175W Error %s%(ux)s%s %(ux)s server-data-hook no <library-file-name> found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }

#ifdef B111124
   /* check if library server-data-hook double                         */
   adsl_sdhlib_ch_1 = adsp_cs->adsc_sdhlib_chain;  /* get chain        */
   while (adsl_sdhlib_ch_1) {               /* loop over chain         */
     if (!HL_FN_WCSCMP( adsl_sdhlib_ch_1->awcc_library_name, awcl_node_sdhlib )) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02176W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" defined double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
// error 24.11.11 awcu3_value does not point on library-file-name
       goto p_buco_conn_80;                 /* get next name           */
     }
     adsl_sdhlib_ch_1 = adsl_sdhlib_ch_1->adsc_next;  /* next in chain */
   }
#endif

   /* save this entry                                                  */
   adsl_sdhlib_ch_1 = (struct dsd_sdh_def_1 *) malloc( sizeof(struct dsd_sdh_def_1) );
   adsl_sdhlib_ch_1->adsc_next = adsp_cs->adsc_sdhlib_chain;  /* get old chain  */
   /* name of library                                                  */
   adsl_sdhlib_ch_1->awcc_library_name = awcl_node_sdhlib;
   /* entry configuration-section                                      */
   adsl_sdhlib_ch_1->adsc_node_conf = adsl_node_sdh_conf;
#ifdef B080609
   adsl_sdhlib_ch_1->adsc_sdhl_1 = NULL;    /* server-data-hook libr   */
#endif
   adsl_sdhlib_ch_1->adsc_ext_lib1 = NULL;  /* server-data-hook external library */
   adsl_sdhlib_ch_1->adsc_sdh_obj = NULL;   /* server-data-hook-object */
   adsp_cs->adsc_sdhlib_chain = adsl_sdhlib_ch_1;  /* set new chain    */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_sdhlib_chain=%p", adsp_cs->adsc_sdhlib_chain );
#endif
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_sdh_obj_00:                  /* <server-data-hook-object> */
   adsl_node_02 = adsl_node_01->getFirstChild();
   if (adsl_node_02 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s element \"server-data-hook-object\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   do {
     if (adsl_node_02->getNodeType() == DOMNode::TEXT_NODE) {
       awcu3_value = (HL_WCHAR *) adsl_node_02->getNodeValue();
       break;
     }
     adsl_node_02 = adsl_node_02->getNextSibling();
   } while (adsl_node_02);
   if (adsl_node_02 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s element \"server-data-hook-object\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_01 ), MAC_XML_COL( adsl_node_01 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* end of this element     */
   }
   adsl_sdh_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_sdh_obj_1;  /* get chain server-data-hook-object */
   while (adsl_sdh_obj_w1) {                 /* loop over defined server-data-hook-object */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         adsl_sdh_obj_w1 + 1, adsl_sdh_obj_w1->imc_len_name, ied_chs_utf_8,
                         awcu3_value, -1, ied_chs_utf_16 );
     if ((bol1) && (iml_cmp == 0)) break;   /* strings are equal       */
     adsl_sdh_obj_w1 = adsl_sdh_obj_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_sdh_obj_w1 == NULL) {           /* server-data-hook-object not found */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s %(ux)s node <server-data-hook-object> \"%(ux)s\" found but not defined - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value, awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }

   /* save this entry                                                  */
   adsl_sdhlib_ch_1 = (struct dsd_sdh_def_1 *) malloc( sizeof(struct dsd_sdh_def_1) );
   adsl_sdhlib_ch_1->adsc_next = adsp_cs->adsc_sdhlib_chain;  /* get old chain  */
   /* name of library                                                  */
   adsl_sdhlib_ch_1->awcc_library_name = NULL;
   /* entry configuration-section                                      */
   adsl_sdhlib_ch_1->adsc_node_conf = NULL;
   adsl_sdhlib_ch_1->adsc_ext_lib1 = NULL;  /* server-data-hook external library */
   adsl_sdhlib_ch_1->adsc_sdh_obj = adsl_sdh_obj_w1;  /* server-data-hook-object */
   adsp_cs->adsc_sdhlib_chain = adsl_sdhlib_ch_1;  /* set new chain    */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "new adsp_cs->adsc_sdhlib_chain=%p", adsp_cs->adsc_sdhlib_chain );
#endif
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_conffi:                      /* <SSL-config-file>       */
   bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                        &adsp_cs->achc_fconfig,
                                        &adsp_cs->unc_len_fconfig,
                                        &dwl_error );
   if (bol_rc == FALSE) {                   /* no file loaded          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01129W Error %s%(ux)s%s %(ux)s SSL-config-file \"%(ux)s\" read Error %d - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value, dwl_error );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_cedbfi:                      /* <SSL-certdb-file>       */
   bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                        &adsp_cs->achc_fcertdb,
                                        &adsp_cs->unc_len_fcertdb,
                                        &dwl_error );
   if (bol_rc == FALSE) {                     /* no file loaded          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01130W Error %s%(ux)s%s %(ux)s SSL-certdb-file \"%(ux)s\" read Error %d - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value, dwl_error );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_pawofi:                      /* <SSL-password-file>     */
   bol_rc = dsl_file_read_1.m_readfile( awcu3_value,
                                        &adsp_cs->achc_password,
                                        &adsp_cs->unc_len_password,
                                        &dwl_error );
   if (bol_rc == FALSE) {                     /* no file loaded          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01131W Error %s%(ux)s%s %(ux)s SSL-password-file \"%(ux)s\" read Error %d - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value, dwl_error );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_thresh_sess:                 /* threshold-session       */
   inl1 = m_get_wc_number( awcu3_value );
   if (inl1 < 0) {                          /* timeout not numeric     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s threshold-session \"%(ux)s\" not numeric - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next keyword        */
   }
   adsp_cs->dsc_gate.imc_thresh_session = inl1;  /* set in gate        */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_krb5_kdc:                    /* Kerberos-5-KDC          */
#ifdef XYZ1
   if (adsp_cs->boc_dyn_krb5) {             /* dynamic-Kerberos-5-KDC  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s Kerberos-5-KDC \"%(ux)s\" defined but dynamic-Kerberos-5-KDC set - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
   /* search Kerberos definition                                       */
   adsl_krb5_kdc_1_w1 = adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1;  /* chain of Kerberos 5 KDC */
   while (adsl_krb5_kdc_1_w1) {             /* loop over total chain   */
     bol1 = m_cmp_vx_vx( &inl1,
                         awcu3_value, -1, ied_chs_utf_16,
                         adsl_krb5_kdc_1_w1 + 1, adsl_krb5_kdc_1_w1->imc_len_name, ied_chs_utf_8 );
     if ((bol1) && (inl1 == 0)) break;      /* entry found             */
     adsl_krb5_kdc_1_w1 = adsl_krb5_kdc_1_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_krb5_kdc_1_w1 == NULL) {        /* Kerberos-5-KDC not found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s Kerberos-5-KDC - Kerberos-5-KDC \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   /* check if defined double                                          */
   inl1 = 0;                                /* clear index             */
   while (inl1 < adsp_cs->dsc_gate.imc_no_krb5_kdc) {  /* number of Kerberos 5 KDCs */
     if (adsl_krb5_kdc_1_w1 == adsp_cs->aarc_krb5_array[ inl1 ]) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s Kerberos-5-KDC - Kerberos-5-KDC \"%(ux)s\" configured double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     inl1++;                                /* increment index         */
   }
   while ((adsp_cs->dsc_gate.imc_no_krb5_kdc % DEF_KRB5_TEMP_ARRAY) == 0) {
     avpl_w1 = adsp_cs->aarc_krb5_array;    /* save old storage        */
     adsp_cs->aarc_krb5_array = (void **) malloc( (adsp_cs->dsc_gate.imc_no_krb5_kdc + DEF_KRB5_TEMP_ARRAY)
                                                    * sizeof(void *) );
     if (adsp_cs->dsc_gate.imc_no_krb5_kdc == 0) break;
     memcpy( adsp_cs->aarc_krb5_array, avpl_w1, adsp_cs->dsc_gate.imc_no_krb5_kdc * sizeof(void *) );
     free( avpl_w1 );                       /* free old storage        */
     break;
   }
   adsp_cs->aarc_krb5_array[ adsp_cs->dsc_gate.imc_no_krb5_kdc ] = adsl_krb5_kdc_1_w1;
   adsp_cs->dsc_gate.imc_no_krb5_kdc++;
// to-do 16.05.09 KB array
// adsp_cs->dsc_gate.adsc_krb5_kdc_1 = adsl_krb5_kdc_1_w1;  /* definition Kerberos-5-KDC */
   goto p_buco_conn_76;                     /* mark element as set     */

#ifdef XYZ1
   p_buco_conn_dyn_krb5_kdc:                /* dynamic Kerberos-5-KDC  */
// to-do 16.05.09 KB
#endif

   p_buco_conn_ldap_serv:                   /* LDAP-service            */
   /* search LDAP-service definition                                   */
   adsl_ldap_group_w1 = adsp_cs->adsc_ldap_group;  /* chain of LDAP groups */
   while (adsl_ldap_group_w1) {             /* loop over total chain   */
     bol1 = m_cmp_vx_vx( &inl1,
                         awcu3_value, -1, ied_chs_utf_16,
                         adsl_ldap_group_w1 + 1, adsl_ldap_group_w1->imc_len_name, ied_chs_utf_8 );
     if ((bol1) && (inl1 == 0)) break;      /* entry found             */
     adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_ldap_group_w1 == NULL) {        /* LDAP service not found  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s LDAP-service - LDAP-service \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   /* check if defined double                                          */
   inl1 = 0;                                /* clear index             */
   while (inl1 < adsp_cs->dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
     if (adsl_ldap_group_w1 == adsp_cs->aarc_ldap_array[ inl1 ]) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s LDAP-service - LDAP-service \"%(ux)s\" configured double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     inl1++;                                /* increment index         */
   }
   while ((adsp_cs->dsc_gate.imc_no_ldap_group % DEF_LDAP_TEMP_ARRAY) == 0) {
     avpl_w1 = adsp_cs->aarc_ldap_array;    /* save old storage        */
     adsp_cs->aarc_ldap_array = (void **) malloc( (adsp_cs->dsc_gate.imc_no_ldap_group + DEF_LDAP_TEMP_ARRAY)
                                                    * sizeof(void *) );
     if (adsp_cs->dsc_gate.imc_no_ldap_group == 0) break;
     memcpy( adsp_cs->aarc_ldap_array, avpl_w1, adsp_cs->dsc_gate.imc_no_ldap_group * sizeof(void *) );
     free( avpl_w1 );                       /* free old storage        */
     break;
   }
   adsp_cs->aarc_ldap_array[ adsp_cs->dsc_gate.imc_no_ldap_group ] = adsl_ldap_group_w1;
   adsp_cs->dsc_gate.imc_no_ldap_group++;   /* number of LDAP groups   */
// to-do 16.05.09 KB array
// adsp_cs->dsc_gate.adsc_ldap_group = adsl_ldap_group_w1;  /* definition LDAP group */
// adsp_cs->dsc_server_conf_1_c.adsc_ldap_group = adsl_ldap_group_w1;  /* definition LDAP group */
   goto p_buco_conn_76;                     /* mark element as set     */

#ifdef XYZ1
   p_buco_conn_dyn_ldap:                    /* dynamic LDAP            */
// to-do 16.05.09 KB
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
//   adsp_cs->dsc_gate.boc_not_close_lbal = FALSE;  /* do-not-close-by-load-balancing */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   if (adsp_cs->adsc_loconf_1_fill->adsc_l2tp_conf == NULL) {  /* chain L2TP gateways */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s dynamic-LDAP \"YES\" configured but no entries <LDAP-service> - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif

   p_buco_conn_rpc_dc:                      /* RPC-DC                  */
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_l2tp_gw:                     /* L2TP-gateway            */
   if (adsp_cs->dsc_gate.ifunction != DEF_FUNC_L2TP) {  /* not function L2TP UDP connection */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s not function L2TP - L2TP-gateway \"%(ux)s\" configured - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   /* search configured L2TP gateway                                   */
   adsl_l2tp_conf_w1 = adsp_cs->adsc_loconf_1_fill->adsc_l2tp_conf;  /* get chain L2TP gateways */
   while (adsl_l2tp_conf_w1) {              /* loop over total chain   */
     bol1 = m_cmp_vx_vx( &inl1,
                         awcu3_value, -1, ied_chs_utf_16,
                         adsl_l2tp_conf_w1 + 1, adsl_l2tp_conf_w1->imc_len_name, ied_chs_utf_8 );
     if ((bol1) && (inl1 == 0)) break;      /* entry found             */
     adsl_l2tp_conf_w1 = adsl_l2tp_conf_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_l2tp_conf_w1 == NULL) {         /* L2TP gateway not found  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s L2TP-gateway - L2TP-gateway \"%(ux)s\" not defined - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsp_cs->dsc_server_conf_1_c.adsc_l2tp_conf = adsl_l2tp_conf_w1;  /* definition L2TP gateway */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_server_nw:                   /* server-network          */
   if (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_hpppt1) {  /* not protocol HOB-PPP-T1 */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" configured but protocol not \"HOB-PPP-T1\" - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       break;                               /* this is valid           */
     default:
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" configured but not required for this function - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   /* get SERVER-NETWORK                                               */
   iml1 = HL_WCSLEN( awcu3_value );         /* length of parameter     */
   while ((iml1 > 0) && (*(awcu3_value + iml1 - 1) != '/')) iml1--;
   if (iml1 == 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s could not find \"/\" for prefix in server-network \"%(ux)s\" - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if ((iml1 - 1) > LEN_INETA_PR_IPV4) {    /* INETA too long          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s in server-network \"%(ux)s\" INETA length %d too long - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     iml1 - 1 );
     goto p_buco_conn_80;                   /* get next name           */
   }
   awcl1 = awcu3_value + iml1;              /* here starts prefix      */
   iml2 = 0;                                /* clear result            */
   while (TRUE) {                           /* loop over digits        */
     if (*awcl1 == 0) break;                /* end of digits           */
     if ((*awcl1 < '0') || (*awcl1 > '9')) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s in server-network \"%(ux)s\" invalid digit \"%(ux)c\" found - server-network ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value,
                       *awcl1 );
       goto p_buco_conn_80;                 /* get next name           */
     }
     iml2 *= 10;                            /* shift old digits        */
     iml2 += *awcl1++ - '0';                /* add new digit           */
   }
   if ((iml2 <= 0) || (iml2 > 32)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s in server-network \"%(ux)s\" prefix %d out of range - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     iml2 );
     goto p_buco_conn_80;                   /* get next name           */
   }
   iml1--;                                  /* subtract separator      */
   if (iml1 <= 0) {                         /* too short for INETA     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s in server-network \"%(ux)s\" INETA length %d too short - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     iml1 );
     goto p_buco_conn_80;                   /* get next name           */
   }
   iml1 = m_cpy_vx_vx( chrl_buffer_01, sizeof(chrl_buffer_01), D_CHARSET_IP,
                       awcu3_value, iml1, ied_chs_utf_16 );  /* copy INETA */
   chrl_buffer_01[ iml1 ] = 0;              /* make zero-terminated    */
   memset( &dsl_addrinfo_w1, 0, sizeof(dsl_addrinfo_w1) );
   dsl_addrinfo_w1.ai_family = AF_UNSPEC;
   dsl_addrinfo_w1.ai_flags = AI_NUMERICHOST;
   adsl_addrinfo_w2 = NULL;
#ifndef HL_FREEBSD
#define USE_NO_PORT ""
#else
#define USE_NO_PORT NULL
#endif
   iml_rc = getaddrinfo( chrl_buffer_01, USE_NO_PORT, &dsl_addrinfo_w1, &adsl_addrinfo_w2 );
   if (iml_rc) {                            /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" getaddrinfo Error %d %d - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     iml_rc, D_TCP_ERROR );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (adsl_addrinfo_w2 == NULL) {          /* nothing returned        */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" getaddrinfo returned NULL - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#ifdef TRACEHL_090729
   {
     adsl_addrinfo_w3 = adsl_addrinfo_w2;
     while (adsl_addrinfo_w3) {
       m_hl1_printf( "xbipgw16-%05d-T getaddrinfo %p ai_family=%d sin_addr.s_addr=0X%08X.",
                     __LINE__, adsl_addrinfo_w3,
                     adsl_addrinfo_w2->ai_family,
                     ((struct sockaddr_in *) adsl_addrinfo_w2->ai_addr)->sin_addr.s_addr );
       adsl_addrinfo_w3 = adsl_addrinfo_w3->ai_next;
     }
   }
#endif
   if (adsl_addrinfo_w2->ai_family != AF_INET) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" INETA \"%s\" getaddrinfo ai_family %d not IPV4 - not supported - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     chrl_buffer_01, adsl_addrinfo_w2->ai_family );
     goto p_buco_conn_80;                   /* get next name           */
   }
   memcpy( &iml1, &((struct sockaddr_in *) adsl_addrinfo_w2->ai_addr)->sin_addr.s_addr, sizeof(int) );
   freeaddrinfo( adsl_addrinfo_w2 );        /* free addresses again    */
   iml3 = iml1;                             /* copy INETA              */
   iml4 = 0XFFFFFFFF;                       /* set mask all bits       */
   achl1 = (char *) &iml3 + sizeof(int);    /* end of INETA            */
   achl2 = (char *) &iml4 + sizeof(int);    /* end of mask             */
   iml5 = 32 - iml2;                        /* compute bits to clear   */
   iml2 = 0;                                /* clear count of bits in one byte */
   while (iml5 > 0) {
     if (iml2 == 0) {                       /* end of one byte         */
       achl1--;                             /* INETA one byte before   */
       achl2--;                             /* mask one byte before    */
       iml2 = 8;                            /* number of bits in one byte */
     }
     iml2--;                                /* decrement bit in byte   */
     *achl1 &= 0XFF ^ (1 << (7 - iml2));    /* clear bit in INETA      */
     *achl2 &= 0XFF ^ (1 << (7 - iml2));    /* clear bit in mask       */
     iml5--;                                /* decrement count of bits */
   }
   if (iml3 != iml1) {                      /* no more original INETA  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s server-network \"%(ux)s\" has digits after prefix applied - server-network ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsp_cs->dsc_server_conf_1_c.umc_s_nw_ineta = (UNSIG_MED) iml3;  /* server-network-ineta */
   adsp_cs->dsc_server_conf_1_c.umc_s_nw_mask = (UNSIG_MED) iml4;  /* server-network-mask */
   goto p_buco_conn_76;                     /* mark element as set     */

   p_buco_conn_authmeth:                    /* PPP-authentication-method */
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       break;                               /* this is valid           */
     default:
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" not required for this function - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
   }
   achl1 = NULL;
   if (adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth[ 0 ] == ((char) ied_pppa_pass_thru)) {
     achl1 = "pass-thru";
   }
   if (adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth[ 0 ] == ((char) ied_pppa_none)) {
     achl1 = "none";
   }
   if (achl1) {                             /* already final set       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" not possible because \"%s\" set before - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value,
                     achl1 );
     goto p_buco_conn_80;                   /* get next name           */
   }
   inl1 = 0;                                /* clear index             */
   while (   (inl1 < sizeof(adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth))
          && (adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth[ inl1 ])) {
     inl1++;
   }
   if (inl1 >= sizeof(adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" not possible, too many values - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   adsl_ppp_auth_w1 = (struct dsd_ppp_auth_e *) dsrs_ppp_auth_e;  /* start of table */
   while (TRUE) {
     bol1 = m_cmp_vx_vx( &inl2,
                         awcu3_value, -1, ied_chs_utf_16,
                         adsl_ppp_auth_w1->achc_param, -1, ied_chs_utf_8 );
     if ((bol1) && (inl2 == 0)) break;      /* value found             */
     adsl_ppp_auth_w1++;                    /* next element            */
     if (adsl_ppp_auth_w1 == (dsrs_ppp_auth_e + sizeof(dsrs_ppp_auth_e) / sizeof(dsrs_ppp_auth_e[0]))) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" not defined - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
   }
   if (   (inl1 > 0)                        /* not first element       */
       && (   (adsl_ppp_auth_w1->iec_ppp_auth == ied_pppa_pass_thru)
           || (adsl_ppp_auth_w1->iec_ppp_auth == ied_pppa_none))) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" not possible because element before - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   inl2 = 0;                                /* clear index             */
   while (inl2 < inl1) {
     if (adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth[ inl2 ]
           == ((char) adsl_ppp_auth_w1->iec_ppp_auth)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error %s%(ux)s%s %(ux)s PPP-authentication-method \"%(ux)s\" set double - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu3_value );
       goto p_buco_conn_80;                 /* get next name           */
     }
     inl2++;
   }
   adsp_cs->dsc_server_conf_1_c.chrc_ppp_auth[ inl1 ] = (char) adsl_ppp_auth_w1->iec_ppp_auth;
#ifdef B120505
   goto p_buco_conn_76;                     /* mark element as set     */
#else
   goto p_buco_conn_80;                     /* get next name           */
#endif

   p_buco_conn_check_cert:                  /* do-not-check-SSTP-channel-bindings */
#ifdef B150520
   if (adsp_cs->dsc_gate.ifunction != DEF_FUNC_SSTP) {  /* set function SSTP Tunnel */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s do-not-check-SSTP-channel-bindings can only be applied for function SSTP - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
#ifndef B150520
   if (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_sstp) {  /* not protocol SSTP */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s do-not-check-SSTP-channel-bindings can only be applied for protocol SSTP - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
#endif
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
#ifdef B150520
     adsp_cs->dsc_server_conf_1_c.boc_check_cert = TRUE;  /* do-not-check-SSTP-channel-bindings */
#endif
#ifndef B150520
     adsp_cs->dsc_server_conf_1_c.boc_sstc_not_check_channel_bindings = TRUE;  /* do not check channel binding for SSTP */
#endif
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
#ifdef B150520
     adsp_cs->dsc_server_conf_1_c.boc_check_cert = FALSE;  /* do-not-check-SSTP-channel-bindings */
#endif
#ifndef B150520
     adsp_cs->dsc_server_conf_1_c.boc_sstc_not_check_channel_bindings = FALSE;  /* do not check channel binding for SSTP */
#endif
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s do-not-check-SSTP-channel-bindings neither YES nor NO: \"%(ux)s\" - ignored",
                   MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_disa_ns_cl:                  /* disable-naegle-send-client */
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "automatic" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_cl = ied_naeg1_auto;  /* disable-naegle-send-client */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_cl = ied_naeg1_auto;  /* disable-naegle-send-client */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_cl = ied_naeg1_yes;  /* disable-naegle-send-client */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_cl = ied_naeg1_yes;  /* disable-naegle-send-client */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_cl = ied_naeg1_no;  /* disable-naegle-send-client */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_cl = ied_naeg1_no;  /* disable-naegle-send-client */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s disable-naegle-send-client not automatic / YES / NO: \"%(ux)s\" - ignored",
               adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
               adsp_cs->awcc_name_value,
               awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_disa_ns_se:                  /* disable-naegle-send-server */
   if (   (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_HPPPT1)  /* function HOB-PPP-T1 Tunnel */
       || (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_SSTP)  /* function SSTP Tunnel */
       || (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_L2TP)) {  /* function L2TP UDP connection */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0uuuuW Error %s%(ux)s%s %(ux)s disable-naegle-send-server \"%(ux)s\" cannot be used for this function (no TCP) - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_value );
     goto p_buco_conn_80;                   /* ignore this entry       */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "automatic" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_se = ied_naeg1_auto;  /* disable-naegle-send-client */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_se = ied_naeg1_auto;  /* disable-naegle-send-client */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_se = ied_naeg1_yes;  /* disable-naegle-send-server */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_se = ied_naeg1_yes;  /* disable-naegle-send-server */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_gate.iec_naeg1_se = ied_naeg1_no;  /* disable-naegle-send-server */
     adsp_cs->dsc_server_conf_1_c.iec_naeg1_se = ied_naeg1_no;  /* disable-naegle-send-server */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s disable-naegle-send-server not automatic / YES / NO: \"%(ux)s\" - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_co_other_se:                 /* option-connect-other-server */
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_conn_other_se = TRUE;  /* option-connect-other-server */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->dsc_server_conf_1_c.boc_conn_other_se = FALSE;  /* option-connect-other-server */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %s%(ux)s%s %(ux)s option-connect-other-server neither YES nor NO: \"%(ux)s\" - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_conn_dsdhhre1:                    /* disable-SDH-HOB-RDP-EXT1 */
   if (adsp_cs->dsc_gate.ifunction != DEF_FUNC_DIR) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s disable-SDH-HOB-RDP-EXT1 cannot be applied for this function - ignored",
                     MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "YES" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->boc_dsdhhre1 = TRUE;          /* disable-SDH-HOB-RDP-EXT1 */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   bol1 = m_cmp_u16z_u8z( &inl1, awcu3_value, "NO" );
   if ((bol1) && (inl1 == 0)) {             /* strings are equal       */
     adsp_cs->boc_dsdhhre1 = FALSE;         /* disable-SDH-HOB-RDP-EXT1 */
     goto p_buco_conn_76;                   /* mark element as set     */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error %s%(ux)s%s %(ux)s disable-SDH-HOB-RDP-EXT1 neither YES nor NO: \"%(ux)s\" - ignored",
                   MAC_XML_LINENO( adsl_node_02 ), MAC_XML_COL( adsl_node_02 ),
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_value );
   goto p_buco_conn_80;                     /* get next name           */

   p_buco_wtss_00:                          /* <wts-server-list>       */
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_WTS) {  /* compare if WTSGATE */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01132W Error %s%(ux)s%s %(ux)s function not WTSGATE - wts-server-list superfluous - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port) {  /* wts-br-port already def */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01133W Error %s%(ux)s%s %(ux)s wts-br-port already set - wts-server-list not allowed - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }

   p_buco_wtss_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_wtss_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "wts-server-url" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01134W Error %s%(ux)s%s %(ux)s wts-server-list entry \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01135W Error %s%(ux)s%s %(ux)s wts-server-list entry has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01136W Error %s%(ux)s%s %(ux)s wts-server-list entry \"%(ux)s\" no value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
#ifndef OLD_1112
   iml1 = 0;                                /* index of character      */
   iml2 = 0;                                /* count brackets          */
   iml3 = 0;                                /* clear indicator end     */
#ifndef B121120
   iml4 = 0;                                /* clear position output   */
#define AUCL_BUFFER_STA_L ((HL_WCHAR *) chrl_buffer_01)
#define AUCL_BUFFER_END_L ((HL_WCHAR *) chrl_buffer_01 + sizeof(chrl_buffer_01) - sizeof(HL_WCHAR))
#endif
   while (TRUE) {                           /* loop over characters    */
     switch (*(awcu4_value + iml1)) {       /* check character         */
       case 0:                              /* end if string           */
         if (iml1 == 0) {                   /* is first character      */
           iml3 = 2;                        /* set error               */
           break;
         }
         if (iml2 & 1) {                    /* bracket open            */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml3 = 1;                          /* set end                 */
         break;
       case '[':                            /* open bracket            */
         if (iml1 != 0) {                   /* not first character     */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml2 = 1;                          /* did open bracket        */
         break;
       case ']':                            /* close bracket           */
         if ((iml2 & 1) == 0) {             /* did not open bracket    */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml2++;                            /* did close bracket       */
         break;
       case ':':                            /* separator in INETA IPV6 or before port */
#ifdef B121120
         if (iml2 & 1) break;               /* bracket open            */
         iml3 = -1;                         /* set success             */
         break;
#else
         if (iml2 & 1) {                    /* bracket open            */
           if ((AUCL_BUFFER_STA_L + iml1) >= AUCL_BUFFER_END_L) {
             iml3 = 2;                      /* set error               */
             break;
           }
           *(AUCL_BUFFER_STA_L + iml4) = *(awcu4_value + iml1);
           iml4++;                          /* increment position output */
           break;                           /* all done                */
         }
         iml3 = -1;                         /* set success             */
         break;
#endif
       default:                             /* other character         */
#ifndef B121120
         if ((AUCL_BUFFER_STA_L + iml1) >= AUCL_BUFFER_END_L) {
           iml3 = 2;                        /* set error               */
           break;
         }
         *(AUCL_BUFFER_STA_L + iml4) = *(awcu4_value + iml1);
         iml4++;                            /* increment position output */
#endif
         if (iml2 < 2) break;               /* not after end bracket   */
         iml3 = 2;                          /* set error               */
         break;
     }
     if (iml3 != 0) break;                  /* stop scanning           */
     iml1++;                                /* next character          */
   }
   if (iml3 >= 2) {                         /* error in string         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01300W line=%d col=%d Error %s%(ux)s%s %(ux)s wts-server-list entry invalid URL found / %(ux)s / at character index %d. - ignored",
                     MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value, iml1 );
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
#ifdef B121120
   bol1 = m_get_single_ineta( &iml2, &dsl_ineta_single_ret,
                              awcu4_value, iml1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
#else
   bol1 = m_get_single_ineta( &iml2, &dsl_ineta_single_ret,
                              AUCL_BUFFER_STA_L, iml4, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
#endif
   if (bol1 == FALSE) {                     /* could not resolve INETA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01301W line=%d col=%d Error %s%(ux)s%s %(ux)s wts-server-list entry invalid INETA found / %.*(ux)s error %d - ignored",
                     MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     iml1, awcu4_value, iml2 );
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
   iml_wtsg_port = DEF_UDP_PORT;            /* WTSGATE port LB         */
   if (iml3 < 0) {                          /* with port               */
     iml_wtsg_port = m_get_port_no( awcu4_value + iml1 + 1, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
     if (iml_wtsg_port < 0) {               /* port number invalid     */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01302W line=%d col=%d Error %s%(ux)s%s %(ux)s wts-server-list entry invalid port after INETA found / %(ux)s - ignored",
                       MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value + iml1 + 1 );
       goto p_buco_wtss_60;                 /* get next list entry     */
     }
   }
   adsl_wtsg1_1 = (dsd_wtsg_1 *) malloc( sizeof(struct dsd_wtsg_1) );
#define ADSL_SOA_G (&adsl_wtsg1_1->dsc_soa)
   memset( ADSL_SOA_G, 0, sizeof(struct sockaddr_storage) );
   ADSL_SOA_G->ss_family = dsl_ineta_single_ret.usc_family;  /* family IPV4 / IPV6 */
   if (dsl_ineta_single_ret.usc_family == AF_INET) {  /* family IPV4   */
     memcpy( &((struct sockaddr_in *) ADSL_SOA_G)->sin_addr,
             dsl_ineta_single_ret.chrc_ineta,  /* INETA returned       */
             dsl_ineta_single_ret.usc_length );  /* length of following address */
     ((struct sockaddr_in *) ADSL_SOA_G)->sin_port = htons( iml_wtsg_port );  /* WTSGATE port LB */
   } else {                                 /* family IPV6             */
     memcpy( &((struct sockaddr_in6 *) ADSL_SOA_G)->sin6_addr,
             dsl_ineta_single_ret.chrc_ineta,  /* INETA returned       */
             dsl_ineta_single_ret.usc_length );  /* length of following address */
     ((struct sockaddr_in6 *) ADSL_SOA_G)->sin6_port = htons( iml_wtsg_port );  /* WTSGATE port LB */
   }
#undef ADSL_SOA_G
   /* check if already defined                                         */
   adsl_wtsg1_2 = adsp_cs->adsc_wtsg1_ch;   /* get chain               */
   while (adsl_wtsg1_2) {                   /* loop over already defined URLs */
     if (!memcmp( &adsl_wtsg1_2->dsc_soa,
                  &adsl_wtsg1_1->dsc_soa,
                  sizeof(struct sockaddr_storage) )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01303W line=%d col=%d Error %s%(ux)s%s %(ux)s wts-server-list entry INETA \"%(ux)s\" defined before - ignored",
                       MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value );
       free( adsl_wtsg1_1 );                /* free memory new entry   */
       goto p_buco_wtss_60;                 /* get next list entry     */
     }
     adsl_wtsg1_2 = adsl_wtsg1_2->adsc_next;  /* get next in chain     */
   }
   adsl_wtsg1_1->adsc_next = adsp_cs->adsc_wtsg1_ch;
   adsp_cs->adsc_wtsg1_ch = adsl_wtsg1_1;   /* set new chain           */
#endif
#ifdef OLD_1112
   achl1 = XMLString::transcode( (XMLCh *) awcu4_value );
   achl2 = achl1;                               /* start at beginning      */
   while ((*achl2 != 0) && (*achl2 != ':')) achl2++;
   if (achl2 == achl1) {                        /* still at beginning      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01137W Error %s%(ux)s%s %(ux)s wts-server-list entry invalid URL found / %(ux)s / - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     XMLString::release( &achl1 );            /* free URL again          */
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
   iml_wtsg_port = 0;                        /* WTSGATE port LB         */
   if (*achl2 != 0) iml_wtsg_port = atoi( achl2 + 1 );
   if (iml_wtsg_port == 0) iml_wtsg_port = DEF_UDP_PORT;
   *achl2 = 0;                                /* INETA zero-terminated   */
#ifndef OLD01
   uml_wtsg_ineta = m_get_ineta_single( achl1 );
   if (uml_wtsg_ineta == 0XFFFFFFFF) {      /* invalid IP-address      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01138W Error %s%(ux)s%s %(ux)s wts-server-list entry invalid INETA found / %s - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     achl1 );
     XMLString::release( &achl1 );          /* free URL again          */
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
#else
#ifdef B070917
   adsl_wtsg_ineta = m_get_ineta_multi( achl1 );
#endif
   if (adsl_wtsg_ineta == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01138W Error %s%(ux)s%s %(ux)s wts-server-list entry invalid INETA found / %s - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     achl1 );
     XMLString::release( &achl1 );          /* free URL again          */
     goto p_buco_wtss_60;                   /* get next list entry     */
   }
/* --- */
   uml_wtsg_ineta = IP_inet_addr( achl1 );
   if (uml_wtsg_ineta == 0XFFFFFFFF) {      /* invalid IP-address      */
     adsl_hostentry = IP_gethostbyname( achl1 );
     if (adsl_hostentry) {
       uml_wtsg_ineta = *((UNSIG_MED *) **(&(*adsl_hostentry).h_addr_list) );
     } else {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01138W Error %s%(ux)s%s %(ux)s wts-server-list entry invalid INETA found / %s - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       achl1 );
       XMLString::release( &achl1 );          /* free URL again          */
       goto p_buco_wtss_60;                 /* get next list entry     */
     }
   }
#endif
   XMLString::release( &achl1 );              /* free URL again          */
   adsl_wtsg1_1 = (dsd_wtsg_1 *) malloc( sizeof(struct dsd_wtsg_1) );
#ifdef OLD_1112
#ifdef OLD01
   adsl_wtsg1_1->adsc_ineta = adsl_wtsg_ineta;
// adsl_wtsg1_1->ulineta = uml_wtsg_ineta;
#else
   adsl_wtsg1_1->umc_ineta = uml_wtsg_ineta;
#endif
   adsl_wtsg1_1->imc_port = iml_wtsg_port;
#endif
   adsl_wtsg1_1->adsc_next = adsp_cs->adsc_wtsg1_ch;
   adsp_cs->adsc_wtsg1_ch = adsl_wtsg1_1;   /* set new chain           */
#endif

   p_buco_wtss_60:                          /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_wtss_20;
   if (adsp_cs->adsc_wtsg1_ch == NULL) {    /* chain server list       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01139W Error %s%(ux)s%s %(ux)s wts-server-list no URL found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */

#ifdef OLD_1112
   p_buco_blas_00:                          /* <blade-server-list>     */
   /* compare if VDI-WSP-GATE                                          */
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01166W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - blade-server-list superfluous - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port) {  /* blade-br-port already d */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01167W Error %s%(ux)s%s %(ux)s blade-br-port already set - blade-server-list not allowed - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }

   p_buco_blas_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_blas_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
#ifndef OLD01
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "blade-server-url" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01168W Error %s%(ux)s%s %(ux)s blade-server-list entry \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_blas_60;                   /* get next list entry     */
   }
#else
   if (wcscmp( awcu4_name, L"blade-server-url" )) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01168W Error %s%(ux)s%s %(ux)s blade-server-list entry \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_blas_60;                   /* get next list entry     */
   }
#endif
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01169W Error %s%(ux)s%s %(ux)s blade-server-list entry has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_blas_60;                   /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01170W Error %s%(ux)s%s %(ux)s blade-server-list entry no value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_blas_60;                   /* get next list entry     */
   }
   achl1 = XMLString::transcode( (XMLCh *) awcu4_value );
   achl2 = achl1;                           /* start at beginning      */
   while ((*achl2 != 0) && (*achl2 != ':')) achl2++;
   if (achl2 == achl1) {                        /* still at beginning      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01171W Error %s%(ux)s%s %(ux)s blade-server-list entry invalid URL found / %(ux)s / - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value );
     XMLString::release( &achl1 );          /* free URL again          */
     goto p_buco_blas_60;                   /* get next list entry     */
   }
   iml_wtsg_port = 0;                        /* BLADEGATE port LB       */
   if (*achl2 != 0) iml_wtsg_port = atoi( achl2 + 1 );
   if (iml_wtsg_port == 0) iml_wtsg_port = DEF_UDP_PORT;
   *achl2 = 0;                              /* INETA zero-terminated   */
#ifndef OLD01
   uml_wtsg_ineta = m_get_ineta_single( achl1 );
   if (uml_wtsg_ineta == 0XFFFFFFFF) {      /* invalid IP-address      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01172W Error %s%(ux)s%s %(ux)s blade-server-list entry invalid INETA found / %s / - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     achl1 );
     XMLString::release( &achl1 );          /* free URL again          */
     goto p_buco_blas_60;                   /* get next list entry     */
   }
#else
   adsl_wtsg_ineta = m_get_ineta_multi( achl1 );
   if (adsl_wtsg_ineta == NULL) {
   }
/* --- */
   uml_wtsg_ineta = IP_inet_addr( achl1 );
   if (uml_wtsg_ineta == 0XFFFFFFFF) {      /* invalid IP-address      */
     adsl_hostentry = IP_gethostbyname( achl1 );
     if (adsl_hostentry) {
       uml_wtsg_ineta = *((UNSIG_MED *) **(&(*adsl_hostentry).h_addr_list) );
     } else {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01172W Error %s%(ux)s%s %(ux)s blade-server-list entry invalid INETA found / %s / - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       achl1 );
       XMLString::release( &achl1 );        /* free URL again          */
       goto p_buco_blas_60;                 /* get next list entry     */
     }
   }
#endif
   XMLString::release( &achl1 );            /* free URL again          */
   adsl_wtsg1_1 = (struct dsd_wtsg_1 *) malloc( sizeof(struct dsd_wtsg_1) );
#ifdef OLD_1112
#ifdef OLD01
   adsl_wtsg1_1->adsc_ineta = adsl_wtsg_ineta;
#else
   adsl_wtsg1_1->umc_ineta = uml_wtsg_ineta;
#endif
   adsl_wtsg1_1->imc_port = iml_wtsg_port;
#endif
   adsl_wtsg1_1->adsc_next = adsp_cs->adsc_wtsg1_ch;
   adsp_cs->adsc_wtsg1_ch = adsl_wtsg1_1;   /* set new chain           */

   p_buco_blas_60:                          /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_blas_20;
   if (adsp_cs->adsc_wtsg1_ch == NULL) {    /* chain server list       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01173W Error %s%(ux)s%s %(ux)s blade-server-list no URL found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */
#endif
#ifndef OLD_1112
   p_buco_vdis_00:                          /* <VDI-suos-list>         */
   /* compare if VDI-WSP-GATE                                          */
   if (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_VDI_WSP) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01166W Error %s%(ux)s%s %(ux)s function not VDI-WSP-GATE - VDI-suos-list superfluous - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port) {  /* blade-br-port already d */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01167W Error %s%(ux)s%s %(ux)s blade-br-port already set - VDI-suos-list not allowed - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }

   p_buco_vdis_20:                          /* check child of list     */
   if (adsl_node_02->getNodeType() != DOMNode::ELEMENT_NODE) goto p_buco_vdis_60;
   awcu4_name = (HL_WCHAR *) adsl_node_02->getNodeName();
   bol1 = m_cmp_u16z_u8z( &inl1, awcu4_name, "VDI-suos-url" );
   if ((bol1 == FALSE) || (inl1)) {         /* strings not equal */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01168W Error %s%(ux)s%s %(ux)s VDI-suos-list entry \"%(ux)s\" invalid - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_name );
     goto p_buco_vdis_60;                   /* get next list entry     */
   }
   adsl_node_03 = adsl_node_02->getFirstChild();
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01169W Error %s%(ux)s%s %(ux)s VDI-suos-list entry has no child - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_vdis_60;                   /* get next list entry     */
   }
   do {
     if (adsl_node_03->getNodeType() == DOMNode::TEXT_NODE) {
       awcu4_value = (HL_WCHAR *) adsl_node_03->getNodeValue();
       break;
     }
     adsl_node_03 = adsl_node_03->getNextSibling();
   } while (adsl_node_03);
   if (adsl_node_03 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01170W Error %s%(ux)s%s %(ux)s VDI-suos-list entry \"%(ux)s\" no value found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu3_name );
     goto p_buco_vdis_60;                   /* get next list entry     */
   }
   iml1 = 0;                                /* index of character      */
   iml2 = 0;                                /* count brackets          */
   iml3 = 0;                                /* clear indicator end     */
   while (TRUE) {                           /* loop over characters    */
     switch (*(awcu4_value + iml1)) {       /* check character         */
       case 0:                              /* end if string           */
         if (iml1 == 0) {                   /* is first character      */
           iml3 = 2;                        /* set error               */
           break;
         }
         if (iml2 & 1) {                    /* bracket open            */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml3 = 1;                          /* set end                 */
         break;
       case '[':                            /* open bracket            */
         if (iml1 != 0) {                   /* not first character     */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml2 = 1;                          /* did open bracket        */
         break;
       case ']':                            /* close bracket           */
         if ((iml2 & 1) == 0) {             /* did not open bracket    */
           iml3 = 2;                        /* set error               */
           break;
         }
         iml2++;                            /* did close bracket       */
         break;
       case ':':                            /* separator in INETA IPV6 or before port */
         if (iml2 & 1) break;               /* bracket open            */
         iml3 = -1;                         /* set success             */
         break;
       default:                             /* other character         */
         if (iml2 < 2) break;               /* not after end bracket   */
         iml3 = 2;                          /* set error               */
         break;
     }
     if (iml3 != 0) break;                  /* stop scanning           */
     iml1++;                                /* next character          */
   }
   if (iml3 >= 2) {                         /* error in string         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01171W line=%d col=%d Error %s%(ux)s%s %(ux)s VDI-suos-list entry invalid URL found / %(ux)s / at character index %d. - ignored",
                     MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     awcu4_value, iml1 );
     goto p_buco_vdis_60;                   /* get next list entry     */
   }
   bol1 = m_get_single_ineta( &iml2, &dsl_ineta_single_ret,
                              awcu4_value, iml1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   if (bol1 == FALSE) {                     /* could not resolve INETA */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01172W line=%d col=%d Error %s%(ux)s%s %(ux)s VDI-suos-list entry invalid INETA found / %.*(ux)s error %d - ignored",
                     MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     iml1, awcu4_value, iml2 );
     goto p_buco_vdis_60;                   /* get next list entry     */
   }
   iml_wtsg_port = DEF_UDP_PORT;            /* WTSGATE port LB         */
   if (iml3 < 0) {                          /* with port               */
     iml_wtsg_port = m_get_port_no( awcu4_value + iml1 + 1, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
     if (iml_wtsg_port < 0) {               /* port number invalid     */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01173W line=%d col=%d Error %s%(ux)s%s %(ux)s VDI-suos-list entry invalid port after INETA found / %(ux)s - ignored",
                       MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value + iml1 + 1 );
       goto p_buco_vdis_60;                 /* get next list entry     */
     }
   }
   adsl_wtsg1_1 = (dsd_wtsg_1 *) malloc( sizeof(struct dsd_wtsg_1) );
#define ADSL_SOA_G (&adsl_wtsg1_1->dsc_soa)
   memset( ADSL_SOA_G, 0, sizeof(struct sockaddr_storage) );
   ADSL_SOA_G->ss_family = dsl_ineta_single_ret.usc_family;  /* family IPV4 / IPV6 */
   if (dsl_ineta_single_ret.usc_family == AF_INET) {  /* family IPV4   */
     memcpy( &((struct sockaddr_in *) ADSL_SOA_G)->sin_addr,
             dsl_ineta_single_ret.chrc_ineta,  /* INETA returned       */
             dsl_ineta_single_ret.usc_length );  /* length of following address */
     ((struct sockaddr_in *) ADSL_SOA_G)->sin_port = htons( iml_wtsg_port );  /* WTSGATE port LB */
   } else {                                 /* family IPV6             */
     memcpy( &((struct sockaddr_in6 *) ADSL_SOA_G)->sin6_addr,
             dsl_ineta_single_ret.chrc_ineta,  /* INETA returned       */
             dsl_ineta_single_ret.usc_length );  /* length of following address */
     ((struct sockaddr_in6 *) ADSL_SOA_G)->sin6_port = htons( iml_wtsg_port );  /* WTSGATE port LB */
   }
#undef ADSL_SOA_G
   /* check if already defined                                         */
   adsl_wtsg1_2 = adsp_cs->adsc_wtsg1_ch;   /* get chain               */
   while (adsl_wtsg1_2) {                   /* loop over already defined URLs */
     if (!memcmp( &adsl_wtsg1_2->dsc_soa,
                  &adsl_wtsg1_1->dsc_soa,
                  sizeof(struct sockaddr_storage) )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01174W line=%d col=%d Error %s%(ux)s%s %(ux)s VDI-suos-list entry INETA \"%(ux)s\" defined before - ignored",
                       MAC_XML_LINENO( adsl_node_03 ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsl_node_03 ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcu4_value );
       free( adsl_wtsg1_1 );                /* free memory new entry   */
       goto p_buco_vdis_60;                 /* get next list entry     */
     }
     adsl_wtsg1_2 = adsl_wtsg1_2->adsc_next;  /* get next in chain     */
   }
   adsl_wtsg1_1->adsc_next = adsp_cs->adsc_wtsg1_ch;
   adsp_cs->adsc_wtsg1_ch = adsl_wtsg1_1;   /* set new chain           */

   p_buco_vdis_60:                          /* get next sibling        */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_vdis_20;
   if (adsp_cs->adsc_wtsg1_ch == NULL) {    /* chain server list       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01175W Error %s%(ux)s%s %(ux)s VDI-suos-list no URL found - ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_buco_conn_80;                   /* get next name           */
   }
   goto p_buco_conn_76;                     /* mark element as set     */
#endif

   p_buco_conn_72:                          /* search value next step  */
   adsl_node_02 = adsl_node_02->getNextSibling();
   if (adsl_node_02) goto p_buco_conn_28;
   m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01140W Error %s%(ux)s%s %(ux)s element \"%(ux)s\" no value found - ignored",
                   adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                   adsp_cs->awcc_name_value,
                   awcu3_name );
   goto p_buco_conn_80;

   p_buco_conn_76:                          /* mark element as set     */
   borl_conn[ iml_keyw_01 ] = TRUE;         /* element set             */

   p_buco_conn_80:                          /* connection next child   */
   adsl_node_01 = adsl_node_01->getNextSibling();
   if (adsl_node_01) goto p_buco_conn_20;

   /* end of this connection - server                                  */
   if (adsp_cs->dsc_gate.ifunction == DEF_FUNC_SS5H) {  /* without server */
     if (adsp_cs->avpc_selserv_chain == NULL) {  /* chain of server-lists */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02180W Error %s%(ux)s%s %(ux)s function SELECT-SOCKS5-HTTP but <select-server> not defined - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
     goto pmtinf60;                         /* all parameters defined  */
   }
   while (awcl_node_serverineta) {          /* check value serverineta */
     adsp_cs->awcc_node_serverineta = awcl_node_serverineta;  /* value serverineta */
     if (adsp_cs->dsc_server_conf_1_c.boc_dns_lookup_before_connect) break;  /* needs to solve INETA before connect */
     adsp_cs->dsc_server_conf_1_c.adsc_server_ineta
       = m_get_target_ineta( awcl_node_serverineta, -1, ied_chs_utf_16,
                             &adsp_cs->dsc_server_conf_1_c.dsc_bind_out );
     if (adsp_cs->dsc_server_conf_1_c.adsc_server_ineta == NULL) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01112W Error %s%(ux)s%s %(ux)s serverineta \"%(ux)s\" invalid - ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       awcl_node_serverineta );
     }
     break;
   }
   /* prepare for WTS UDP load-balancing                               */
   if (adsp_cs->dsc_server_conf_1_c.dsc_bind_out.boc_bind_needed == FALSE) {  /* flag bind() is not needed */
     adsp_cs->dsc_server_conf_1_c.dsc_bind_out.boc_ipv4 = TRUE;  /* IPV4 is supported */
     adsp_cs->dsc_server_conf_1_c.dsc_bind_out.dsc_soai4.sin_family = AF_INET;  /* address information IPV4 */
     adsp_cs->dsc_server_conf_1_c.dsc_bind_out.boc_ipv6 = TRUE;  /* IPV6 is supported */
     adsp_cs->dsc_server_conf_1_c.dsc_bind_out.dsc_soai6.sin6_family = AF_INET6;  /* address information IPV6 */
   }
   if (!D_COND_SELI) {                      /* not in server-list      */
#ifndef B080407
     if (   (adsp_cs->dsc_gate.imc_gateport < 0)
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_RDP)
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_ICA)) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01141W Error %s%(ux)s%s %(ux)s gateport missing - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
#endif
#ifdef B080407
     if (   (adsp_cs->dsc_gate.igateport < 0) && (adsp_cs->awcc_gateport == NULL)
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_RDP)
         && (adsp_cs->dsc_server_conf_1_c.inc_function != DEF_FUNC_ICA)) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01141W Error %s%(ux)s%s %(ux)s gateport missing - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
// 19.08.10 KB - cleanup
       return FALSE;                        /* not successfull         */
     }
#endif
#ifdef B111222
     if (   (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_PTTD)
         && (adsp_cs->avpc_radius_chain == NULL)
         && (adsp_cs->avpc_usgro_chain == NULL)) {  /* chain of user groups */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01260W Error %s%(ux)s%s %(ux)s function PASS-THRU-TO-DESKTOP but no authentication possible - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
#else
     if (   (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_PTTD)
         && (adsp_cs->avpc_usgro_chain == NULL)  /* chain of user groups */
         && (adsp_cs->boc_dyn_radius == FALSE)  /* dynamic-radius      */
         && (adsp_cs->dsc_server_conf_1_c.imc_no_radius == 0)  /* number of radius server */
         && (adsp_cs->boc_dyn_krb5 == FALSE)  /* dynamic-Kerberos-5-KDC */
         && (adsp_cs->dsc_gate.imc_no_krb5_kdc == 0)  /* number of Kerberos 5 KDCs */
         && (adsp_cs->boc_dyn_ldap == FALSE)  /* dynamic-LDAP          */
         && (adsp_cs->dsc_server_conf_1_c.imc_no_ldap_group == 0)) {  /* number of LDAP groups */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC01260W Error %s%(ux)s%s %(ux)s function PASS-THRU-TO-DESKTOP but no authentication possible - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
#endif
#ifndef B080407
     if (adsp_cs->dsc_gate.imc_backlog <= 0) adsp_cs->dsc_gate.imc_backlog = DEF_TCP_BACKLOG;
#endif
#ifdef B080407
     if (adsp_cs->dsc_gate.ibacklog <= 0) adsp_cs->dsc_gate.ibacklog = DEF_TCP_BACKLOG;
#endif
   }
   if (adsp_cs->dsc_server_conf_1_c.inc_wts_br_port == 0) {
     adsp_cs->dsc_server_conf_1_c.inc_wts_br_port = DEF_UDP_PORT;
   }
   if (adsp_cs->dsc_gate.ifunction == DEF_FUNC_VDI_WSP) {  /* compare if VDI-WSP-GATE */
     adsp_cs->dsc_server_conf_1_c.boc_is_blade_server = TRUE;  /* function VDI-WSP-GATE */
   }

   if (adsp_cs->dsc_gate.ifunction == 0) {  /* direct connection       */
#ifdef B141209
     if (   (adsp_cs->dsc_server_conf_1_c.adsc_server_ineta)
         && borl_conn[ DEF_XML_CONN_SERVERPORT ]) {
       goto pmtinf60;                       /* all parameters defined  */
     }
#endif
     if (   (   (adsp_cs->dsc_server_conf_1_c.adsc_server_ineta)
             || (   (adsp_cs->awcc_node_serverineta)  /* value serverineta */
                 && (adsp_cs->dsc_server_conf_1_c.boc_dns_lookup_before_connect)))  /* needs to solve INETA before connect */
         && borl_conn[ DEF_XML_CONN_SERVERPORT ]) {
       goto pmtinf60;                       /* all parameters defined  */
     }
     if (   (adsp_cs->dsc_server_conf_1_c.adsc_server_ineta)
         || borl_conn[ DEF_XML_CONN_SERVERPORT ]) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02190W Error %s%(ux)s%s %(ux)s one parameter for server missing (serverineta / serverport) - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
     /* no server defined                                              */
#ifdef B130421_XXX
     if (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d) {  /* protocol MS RDG_OUT_DATA */
       goto pmtinf60;
     }
#endif
     adsp_cs->dsc_server_conf_1_c.boc_sdh_reflect = TRUE;  /* only Server-Data-Hook */
     if (adsp_cs->adsc_sdhlib_chain) goto pmtinf60;  /* only Server-Data-Hook */
#ifndef B130421_XXX
     if (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_out_d) {  /* protocol MS RDG_OUT_DATA */
       goto pmtinf60;
     }
#endif
     if (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_rdg_in_d) {  /* protocol MS RDG_IN_DATA */
       goto pmtinf60;
     }
     if (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_hrdpe1)  /* protocol HOB MS RDP Extension 1 */
         && (adsp_cs->boc_dsdhhre1 == FALSE)) {  /* disable-SDH-HOB-RDP-EXT1 */
       goto pmtinf60;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02191W Error %s%(ux)s%s %(ux)s no parameters for server (serverineta / serverport) - connection ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_ret_err_00;                     /* return with error       */
   }
   if (adsp_cs->dsc_gate.ifunction == DEF_FUNC_L2TP) {  /* set function L2TP UDP connection */
     if (adsp_cs->dsc_server_conf_1_c.adsc_l2tp_conf == NULL) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCnnnnnW Error %s%(ux)s%s %(ux)s function L2TP and no parameter for L2TP-gateway - connection ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value );
       goto p_ret_err_00;                   /* return with error       */
     }
     adsp_cs->dsc_server_conf_1_c.adsc_l2tp_conf->boc_referenced = TRUE;  /* entry is referenced */
   }
   do {                                     /* pseudo-loop             */
     if ((adsp_cs->dsc_gate.imc_permmov_from_port < 0) && (adsp_cs->awcc_node_tm_url == NULL)) break;
     if ((adsp_cs->dsc_gate.imc_permmov_from_port >= 0) && (adsp_cs->awcc_node_tm_url)) break;
     if (adsp_cs->dsc_gate.imc_permmov_from_port >= 0) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s permanently-moved-from-port %d defined but no permanently-moved-URL - permanently-moved-from-port ignored",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       adsp_cs->dsc_gate.imc_permmov_from_port );
       adsp_cs->dsc_gate.imc_permmov_from_port = -1;
       adsp_cs->dsc_gate.imc_permmov_to_port = -1;
       break;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s permanently-moved-URL %(ux)s defined but no permanently-moved-from-port - permanently-moved-URL ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value,
                     adsp_cs->awcc_node_tm_url );
     adsp_cs->awcc_node_tm_url = NULL;
   } while (FALSE);
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       switch (adsp_cs->dsc_server_conf_1_c.iec_scp_def) {
         case ied_scp_hpppt1:               /* protocol HOB-PPP-T1     */
         case ied_scp_sstp:                 /* protocol SSTP           */
           break;
         default:
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s protocol not valid for this function - connection ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value );
           goto p_ret_err_00;               /* entry not valid         */
       }
       break;                               /* this is valid           */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def == ied_scp_hpppt1)  /* protocol HOB-PPP-T1 */
       && (   (adsp_cs->dsc_gate.ifunction == DEF_FUNC_HPPPT1)  /* function HOB-PPP-T1 Tunnel */
           || (adsp_cs->dsc_gate.ifunction == DEF_FUNC_L2TP))  /* function L2TP UDP connection */
       && (borl_conn[ DEF_XML_CONN_SERVER_NW ] == FALSE)) {  /* element server-network not set */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s server-network missing for this protocol and this function - connection ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     goto p_ret_err_00;                     /* entry not valid         */
   }
   if (   (adsp_cs->boc_dsdhhre1)           /* disable-SDH-HOB-RDP-EXT1 */
       && (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_hrdpe1)  /* protocol HOB MS RDP Extension 1 */
           || (adsp_cs->dsc_gate.ifunction != DEF_FUNC_DIR))) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s disable-SDH-HOB-RDP-EXT1 YES but not protocol HOB-RDP-EXT1 or function DIRECT - disable-SDH-HOB-RDP-EXT1 ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     adsp_cs->boc_dsdhhre1 = FALSE;         /* disable-SDH-HOB-RDP-EXT1 */
   }
   if (   (adsp_cs->dsc_server_conf_1_c.boc_conn_other_se)  /* option-connect-other-server */
       && (   (   (adsp_cs->adsc_sdhlib_chain == NULL)
               && (   (adsp_cs->dsc_server_conf_1_c.iec_scp_def != ied_scp_hrdpe1)  /* protocol HOB MS RDP Extension 1 */
                   || (adsp_cs->boc_dsdhhre1)))  /* disable-SDH-HOB-RDP-EXT1 */
           || (   (adsp_cs->dsc_gate.ifunction == DEF_FUNC_HPPPT1)  /* function HOB-PPP-T1 Tunnel */
               || (adsp_cs->dsc_gate.ifunction == DEF_FUNC_L2TP)))) {  /* function L2TP UDP connection */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnn1W Error %s%(ux)s%s %(ux)s option-connect-other-server YES but no Server-Data-Hook or not applyable - option-connect-other-server ignored",
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                     adsp_cs->awcc_name_value );
     adsp_cs->dsc_server_conf_1_c.boc_conn_other_se = FALSE;  /* option-connect-other-server */
   }
#ifdef HL_UNIX

   pmtinf60:                                /* all values set          */
// adsp_cs->boc_return = TRUE;              /* return success          */
#else
   if (adsp_cs->dsc_gate.ifunction < 0) {   /* WTS or BLADE            */
     goto pmtinf60;                         /* all parameters defined  */
   }
   switch (adsp_cs->dsc_gate.ifunction) {   /* function to process     */
     case DEF_FUNC_PTTD:                    /* PASS-THRU-TO-DESKTOP    */
     case DEF_FUNC_HPPPT1:                  /* set function HOB-PPP-T1 Tunnel */
     case DEF_FUNC_SSTP:                    /* set function SSTP Tunnel */
     case DEF_FUNC_L2TP:                    /* set function L2TP UDP connection */
       goto pmtinf60;                       /* is not this host        */
   }

   memset( &dsl_ineta_1, 0, sizeof(struct dsd_ineta_1) );
   dsl_ineta_1.iec_ineta = ied_ineta_any;   /* take any INETA          */
#ifdef B080407
   if (adsp_cs->dsc_gate.ul_in_ineta != INADDR_ANY) {  /* not any INETA */
     dsl_ineta_1.iec_ineta = ied_ineta_ipv4;  /* take IPV4             */
     dsl_ineta_1.dsc_un_ineta_1.umc_ineta_v4 = adsp_cs->dsc_gate.ul_in_ineta;
   }
#endif
   inl1 = DEF_WTSPO1_RDP | DEF_WTSPO1_SSL_RDP;  /* get RDP Port        */
   if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_ICA) {
     inl1 = DEF_WTSPO1_ICA | DEF_WTSPO1_SSL_ICA;  /* get ICA Port      */
   }
   m_get_wtspo1_ineta( &dsl_wtspo_1,        /* output area             */
                       &dsl_ineta_1,        /* INETA we search for     */
                       inl1 );              /* get Port type           */
   adsp_cs->dsc_server_conf_1_c.inc_server_port = dsl_wtspo_1.imc_port_rdp;  /* port RDP */
#ifndef B080407
   adsp_cs->dsc_gate.imc_gateport = dsl_wtspo_1.imc_port_ssl_rdp;  /* port SSL RDP */
#endif
#ifdef B080407
   adsp_cs->dsc_gate.igateport = dsl_wtspo_1.imc_port_ssl_rdp;  /* port SSL RDP */
#endif
   if (adsp_cs->dsc_server_conf_1_c.inc_function == DEF_FUNC_ICA) {
     adsp_cs->dsc_server_conf_1_c.inc_server_port = dsl_wtspo_1.imc_port_ica;  /* port ICA */
#ifndef B080407
     adsp_cs->dsc_gate.imc_gateport = dsl_wtspo_1.imc_port_ssl_ica;  /* port SSL ICA */
#endif
#ifdef B080407
     adsp_cs->dsc_gate.igateport = dsl_wtspo_1.imc_port_ssl_ica;  /* port SSL ICA */
#endif
   }

   pmtinf60:                                /* all values set          */
// adsp_cs->boc_return = TRUE;              /* return success          */
#endif /* HL_UNIX */
   return TRUE;

   p_ret_err_00:                            /* return with error       */
   while (adsp_cs->adsc_sdhlib_chain) {     /* loop over chain         */
     adsl_sdhlib_ch_1 = adsp_cs->adsc_sdhlib_chain;  /* get first in chain */
     adsp_cs->adsc_sdhlib_chain = adsl_sdhlib_ch_1->adsc_next;  /* remove from chain */
     free( adsl_sdhlib_ch_1 );              /* free memory             */
   }
   while (adsp_cs->adsc_domain_info_def_1_ch) {  /* loop over chain of domain-information definition */
     adsl_domain_info_def_1_w1 = adsp_cs->adsc_domain_info_def_1_ch;  /* get old chain of domain-information definition */
     adsp_cs->adsc_domain_info_def_1_ch = adsl_domain_info_def_1_w1->adsc_next;  /* remove from chain */
     free( adsl_domain_info_def_1_w1->adsc_domain_info );
     free( adsl_domain_info_def_1_w1 );
   }
   return FALSE;                            /* return error set        */
} /* end m_conf_conn()                                                 */

/** process the HTTP-redirect-library entry                            */
static BOOL m_conf_hrl_ele( struct dsd_conf_serv *adsp_cs, int imp_flags_1 ) {
// int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#else
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_hl_clib_dom_conf dsl_sdh_domc_1;  /* structure sdh DOM c */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "xsipgw08-conf l%05d m_conf_hrl_ele( %p ) called",
                   __LINE__, adsp_cs );
#endif
   adsl_ext_lib1_w1 = m_conf_ext_lib_load( adsp_cs->adsc_hrl_def->awcc_library_name,
                                           adsp_cs->adsc_loconf_1_fill );
   if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02500W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, adsl_ext_lib1_w1->umc_load_err );
#else
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02510W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, adsl_ext_lib1_w1->achc_load_err );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   bol1 = FALSE;                            /* did not retrieve error  */
   while (adsl_ext_lib1_w1->boc_hrl_checked == FALSE) {  /* HTTP-redirect not yet checked */
     adsl_ext_lib1_w1->boc_hrl_checked = TRUE;  /* HTTP-redirect was checked */
#ifndef HL_UNIX
     adsl_ext_lib1_w1->amc_hrl_entry = (amd_call_hrl_1) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_hrl_call_1" );
     if (adsl_ext_lib1_w1->amc_hrl_entry == NULL) {  /* could not be loaded */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_hrl_conf = (amd_hlclib_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_hrl_conf_1" );
     if (adsl_ext_lib1_w1->amc_hrl_conf == NULL) {  /* returned error  */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#else
     adsl_ext_lib1_w1->amc_hrl_entry = (amd_call_hrl_1) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_hrl_call_1" );
     if (adsl_ext_lib1_w1->amc_hrl_entry == NULL) {
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_hrl_conf = (amd_hlclib_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_hrl_conf_1" );
     if (adsl_ext_lib1_w1->amc_hrl_conf == NULL) {  /* returned error  */
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#endif
     break;
   }
   if (adsl_ext_lib1_w1->amc_hrl_entry == NULL) {  /* entry for HTTP-redirect-library */
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02501W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hrl_call_1\" - %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02511W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hrl_call_1\" - %s%s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, achl_err_1, achl1 );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   if (adsl_ext_lib1_w1->amc_hrl_conf == NULL) {
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02502W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hrl_conf_1\" - %s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02512W Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hrl_conf_1\" - %s%s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name, achl_err_1, achl1 );
#endif
     if (adsp_cs->adsc_hrl_def->adsc_node_conf) {  /* entry configuration-section */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02520W Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_hrl_conf_1 in DLL - entry m_hrl_conf_1 not called",
                       MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                       adsp_cs->adsc_hrl_def->awcc_library_name );
       return FALSE;                        /* load did not succeed    */
     }
     adsl_ext_lib1_w1->imc_usage_count++;   /* increment usage count   */
     adsp_cs->adsc_hrl_def->adsc_ext_lib1 = adsl_ext_lib1_w1;
     return TRUE;                           /* succeeded               */
   }
   memset( &dsl_sdh_domc_1, 0, sizeof(dsl_sdh_domc_1) );  /* structure sdh DOM c */
   adsp_cs->adsc_hrl_def->ac_conf = NULL;   /* no storage for conf     */
   dsl_sdh_domc_1.adsc_node_conf = adsp_cs->adsc_hrl_def->adsc_node_conf;
   dsg_cdaux_control.adsc_node_conf = adsp_cs->adsc_hrl_def->adsc_node_conf;
   dsl_sdh_domc_1.amc_aux = &m_cdaux;
   dsl_sdh_domc_1.imc_flags_1 = imp_flags_1;  /* set flags             */
   dsl_sdh_domc_1.aac_conf = &adsp_cs->adsc_hrl_def->ac_conf;
   dsl_sdh_domc_1.amc_call_dom = &m_call_dom;
   bol1 = adsl_ext_lib1_w1->amc_hrl_conf( &dsl_sdh_domc_1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "after amc_hrl_conf() bol1=%d adsp_cs->adsc_hrl_def->ac_conf=%p",
                   bol1, adsp_cs->adsc_hrl_def->ac_conf );
#endif
   if (bol1 == FALSE) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02521W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" entry m_hrl_conf_1 returned FALSE - HTTP-redirect-library removed",
                     MAC_XML_LINENO( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hrl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name );
     return FALSE;                          /* load did not succeed    */
   }
   adsl_ext_lib1_w1->imc_usage_count++;     /* increment usage count   */
   adsp_cs->adsc_hrl_def->adsc_ext_lib1 = adsl_ext_lib1_w1;
   return TRUE;                             /* succeeded               */
} /* end m_conf_hrl_ele()                                              */

/** process the plain-HTTP-library entry                               */
static BOOL m_conf_phl_ele( struct dsd_conf_serv *adsp_cs, int imp_flags_1 ) {
// int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#else
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_hl_clib_dom_conf dsl_phl_domc_1;  /* structure component DOM configuration */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "xsipgw08-conf l%05d m_conf_phl_ele( %p ) called",
                   __LINE__, adsp_cs );
#endif
   adsl_ext_lib1_w1 = m_conf_ext_lib_load( adsp_cs->adsc_phl_def->awcc_library_name,
                                           adsp_cs->adsc_loconf_1_fill );
   if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, adsl_ext_lib1_w1->umc_load_err );
#else
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, adsl_ext_lib1_w1->achc_load_err );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   bol1 = FALSE;                            /* did not retrieve error  */
   while (adsl_ext_lib1_w1->boc_phl_checked == FALSE) {  /* plain-HTTP-library not yet checked */
     adsl_ext_lib1_w1->boc_phl_checked = TRUE;  /* plain-HTTP-library was checked */
#ifndef HL_UNIX
     adsl_ext_lib1_w1->amc_phl_entry = (amd_call_phl_1) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_call_1" );
     if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {  /* could not be loaded */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_phl_conf = (amd_hlclib_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_conf_1" );
     if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {  /* returned error  */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#else
     adsl_ext_lib1_w1->amc_phl_entry = (amd_call_phl_1) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_call_1" );
     if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_phl_conf = (amd_hlclib_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_conf_1" );
     if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {  /* returned error  */
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#endif
     break;
   }
   if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {  /* entry for plain-HTTP-library */
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_call_1\" - %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02511W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_call_1\" - %s%s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, achl_err_1, achl1 );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_conf_1\" - %s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_conf_1\" - %s%s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_phl_def->awcc_library_name, achl_err_1, achl1 );
#endif
     if (adsp_cs->adsc_phl_def->adsc_node_conf) {  /* entry configuration-section */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_phl_conf_1 in DLL - entry m_phl_conf_1 not called",
                       MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                       adsp_cs->adsc_phl_def->awcc_library_name );
       return FALSE;                        /* load did not succeed    */
     }
     adsl_ext_lib1_w1->imc_usage_count++;   /* increment usage count   */
     adsp_cs->adsc_phl_def->adsc_ext_lib1 = adsl_ext_lib1_w1;
     return TRUE;                           /* succeeded               */
   }
   memset( &dsl_phl_domc_1, 0, sizeof(struct dsd_hl_clib_dom_conf) );  /* structure component DOM configuration */
   adsp_cs->adsc_phl_def->ac_conf = NULL;   /* no storage for conf     */
   dsl_phl_domc_1.adsc_node_conf = adsp_cs->adsc_phl_def->adsc_node_conf;
   dsg_cdaux_control.adsc_node_conf = adsp_cs->adsc_phl_def->adsc_node_conf;
   dsl_phl_domc_1.amc_aux = &m_cdaux;
   dsl_phl_domc_1.imc_flags_1 = imp_flags_1;  /* set flags             */
   dsl_phl_domc_1.aac_conf = &adsp_cs->adsc_phl_def->ac_conf;
   dsl_phl_domc_1.amc_call_dom = &m_call_dom;
   bol1 = adsl_ext_lib1_w1->amc_phl_conf( &dsl_phl_domc_1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "after amc_phl_conf() bol1=%d adsp_cs->adsc_phl_def->ac_conf=%p",
                   bol1, adsp_cs->adsc_phl_def->ac_conf );
#endif
   if (bol1 == FALSE) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0nnnnW line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" entry m_phl_conf_1 returned FALSE - plain-HTTP-library removed",
                     MAC_XML_LINENO( adsp_cs->adsc_phl_def->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_phl_def->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hrl_def->awcc_library_name );
     return FALSE;                          /* load did not succeed    */
   }
   adsl_ext_lib1_w1->imc_usage_count++;     /* increment usage count   */
   adsp_cs->adsc_phl_def->adsc_ext_lib1 = adsl_ext_lib1_w1;
   return TRUE;                             /* succeeded               */
} /* end m_conf_phl_ele()                                              */

/** process the plain-HTTP-library entries                             */
static int m_conf_phl_load( struct dsd_conf_serv *adsp_cs, int imp_flags_1 ) {
// int        inl1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#endif
#ifdef HL_UNIX
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_hl_clib_dom_conf dsl_sdh_domc_1;  /* structure sdh DOM c */
   int        iml_no_phl;                   /* count entries plain-HTTP-library */
   struct dsd_phl_def_1 *adsl_phl_ch_1;     /* working variable        */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

   iml_no_phl = 0;                          /* count entries plain-HTTP-library */
   adsl_phl_ch_1 = adsp_cs->adsc_phl_chain;  /* get chain of plain-HTTP-libraries */
   while (adsl_phl_ch_1) {                  /* loop over chain         */
     if (adsl_phl_ch_1->adsc_phl_obj == NULL) {  /* no plain-HTTP-library-object */
       adsl_ext_lib1_w1 = m_conf_ext_lib_load( adsl_phl_ch_1->awcc_library_name, adsp_cs->adsc_loconf_1_fill );
       do {                                 /* pseudo-loop             */
         if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02330W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, adsl_ext_lib1_w1->umc_load_err );
#else
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02340W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, adsl_ext_lib1_w1->achc_load_err );
#endif
           break;
         }
         bol1 = FALSE;                      /* did not retrieve error  */
         while (adsl_ext_lib1_w1->boc_phl_checked == FALSE) {  /* plain-HTTP-library was not checked */
           adsl_ext_lib1_w1->boc_phl_checked = TRUE;  /* plain-HTTP-library was checked */
#ifndef HL_UNIX
           adsl_ext_lib1_w1->amc_phl_entry = (amd_call_phl_1) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_call_1" );
           if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {  /* could not be loaded */
             dwl1 = GetLastError();         /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
             break;
           }
           adsl_ext_lib1_w1->amc_phl_conf = (amd_phl_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_conf_1" );
           if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {
             dwl1 = GetLastError();         /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
           }
#else
           adsl_ext_lib1_w1->amc_phl_entry = (amd_call_phl_1) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_call_1" );
           if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {
             achl1 = dlerror();             /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
             break;
           }
           adsl_ext_lib1_w1->amc_phl_conf = (amd_phl_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_phl_conf_1" );
           if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {
             achl1 = dlerror();             /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
           }
#endif
           break;
         }
         if (adsl_ext_lib1_w1->amc_phl_entry == NULL) {
#ifndef HL_UNIX
           achl_err_1 = "see last try in log";
           if (bol1) {
             sprintf( chrl_work1, "error %d", dwl1 );
             achl_err_1 = chrl_work1;
           }
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02331W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_call_1\" - %s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, achl_err_1 );
 #else
           achl_err_1 = "see last try in log";
           if (bol1) {
             achl_err_1 = "error ";
           } else {
             achl1 = "";
           }
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02341W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_call_1\" - %s%s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, achl_err_1, achl1 );
#endif
           break;
         }
         if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {
#ifndef HL_UNIX
           achl_err_1 = "see last try in log";
           if (bol1) {
             sprintf( chrl_work1, "error %d", dwl1 );
             achl_err_1 = chrl_work1;
           }
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02332W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_conf_1\" - %s - entry ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, achl_err_1 );
#else
           achl_err_1 = "see last try in log";
           if (bol1) {
             achl_err_1 = "error ";
           } else {
             achl1 = "";
           }
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02342W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_phl_conf_1\" - %s%s - entry ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_phl_ch_1->awcc_library_name, achl_err_1, achl1 );
#endif
         }
         adsl_phl_ch_1->ac_conf = NULL;     /* no storage for configuration */
         if (adsl_ext_lib1_w1->amc_phl_conf == NULL) {
           if (adsl_phl_ch_1->adsc_node_conf) {  /* entry configuration-section */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02350W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_phl_conf_1 in DLL - entry m_phl_conf_1 not called",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_phl_ch_1->awcc_library_name );
           }
         } else {
           memset( &dsl_sdh_domc_1, 0, sizeof(dsl_sdh_domc_1) );  /* structure sdh DOM c */
           dsl_sdh_domc_1.adsc_node_conf = adsl_phl_ch_1->adsc_node_conf;
           dsg_cdaux_control.adsc_node_conf = adsl_phl_ch_1->adsc_node_conf;
           dsl_sdh_domc_1.amc_aux = &m_cdaux;
           dsl_sdh_domc_1.imc_flags_1 = imp_flags_1;  /* set flags     */
           dsl_sdh_domc_1.aac_conf = &adsl_phl_ch_1->ac_conf;
           dsl_sdh_domc_1.amc_call_dom = &m_call_dom;
           bol1 = adsl_ext_lib1_w1->amc_phl_conf( &dsl_sdh_domc_1 );
#ifdef TRACEHL1
           m_hlnew_printf( HLOG_TRACE1, "after amc_hlclib_conf() bol1=%d adsl_phl_ch_1->ac_conf=%p",
                           bol1, adsl_phl_ch_1->ac_conf );
#endif
           if (bol1 == FALSE) {
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02351W Error %s%(ux)s%s %(ux)s <plain-HTTP-library> <library-file-name> \"%(ux)s\" entry m_phl_conf_1 returned FALSE - plain-HTTP-library removed",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                             adsp_cs->awcc_name_value,
                             adsl_phl_ch_1->awcc_library_name );
             break;
           }
         }
         adsl_phl_ch_1->boc_valid = TRUE;   /* entry is valid now      */
         iml_no_phl++;                      /* count entries plain-HTTP-library */
         adsl_phl_ch_1->adsc_ext_lib1 = adsl_ext_lib1_w1;  /* save plain-HTTP-library library */
         adsl_ext_lib1_w1->imc_usage_count++;  /* increment usage count  */
       } while (FALSE);
     } else {                               /* plain-HTTP-library-object */
       adsl_phl_ch_1->adsc_ext_lib1 = adsl_phl_ch_1->adsc_phl_obj->adsc_ext_lib1;  /* external library loaded */
       adsl_phl_ch_1->ac_conf = adsl_phl_ch_1->adsc_phl_obj->ac_conf;  /* return data from conf */
       adsl_phl_ch_1->boc_valid = TRUE;     /* entry is valid now      */
       iml_no_phl++;                        /* count entries plain-HTTP-library */
     }
     adsl_phl_ch_1 = adsl_phl_ch_1->adsc_next;  /* next in chain       */
   }
   return iml_no_phl;                       /* return count            */
} /* end m_conf_phl_load()                                             */

/** process the Authentication Library entry                           */
static BOOL m_conf_hobwspat3( struct dsd_conf_serv *adsp_cs, int imp_flags_1 ) {
// int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#else
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_hl_clib_dom_conf dsl_sdh_domc_1;  /* structure sdh DOM c */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "xsipgw08-conf l%05d m_conf_hobwspat3( %p ) called",
                   __LINE__, adsp_cs );
#endif
   adsl_ext_lib1_w1 = m_conf_ext_lib_load( adsp_cs->adsc_hobwspat3_def_1->awcc_library_name,
                                           adsp_cs->adsc_loconf_1_fill );
   if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02200W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, adsl_ext_lib1_w1->umc_load_err );
#else
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02200W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, adsl_ext_lib1_w1->achc_load_err );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   bol1 = FALSE;                            /* did not retrieve error  */
   while (adsl_ext_lib1_w1->boc_at3_checked == FALSE) {  /* HOB-WSP-AT3 was not checked */
     adsl_ext_lib1_w1->boc_at3_checked = TRUE;  /* HOB-WSP-AT3 was checked */
#ifndef HL_UNIX
     adsl_ext_lib1_w1->amc_at3_entry = (amd_call_wspat3_1) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_wspat3_proc" );
     if (adsl_ext_lib1_w1->amc_at3_entry == NULL) {  /* could not be loaded */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_at3_conf = (amd_hlclib_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_wspat3_config" );
     if (adsl_ext_lib1_w1->amc_at3_conf == NULL) {  /* returned error  */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#else
     adsl_ext_lib1_w1->amc_at3_entry = (amd_call_wspat3_1) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_wspat3_proc" );
     if (adsl_ext_lib1_w1->amc_at3_entry == NULL) {
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_at3_conf = (amd_hlclib_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_wspat3_config" );
     if (adsl_ext_lib1_w1->amc_at3_conf == NULL) {  /* returned error  */
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#endif
     break;
   }
   if (adsl_ext_lib1_w1->amc_at3_entry == NULL) {  /* entry for HOB-WSP-AT3 call */
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02201W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_wspat3_proc\" - %s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02211W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_wspat3_proc\" - %s%s - ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, achl_err_1, achl1 );
#endif
     return FALSE;                          /* load did not succeed    */
   }
   if (adsl_ext_lib1_w1->amc_at3_conf == NULL) {
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02203W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_wspat3_config\" - %s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02212W Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" cannot find entry-point \"m_wspat3_config\" - %s%s - entry ignored",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name, achl_err_1, achl1 );
#endif
     if (adsp_cs->adsc_hobwspat3_def_1->adsc_node_conf) {  /* entry configuration-section */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02220W Error line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_wspat3_config in DLL - entry m_wspat3_config not called",
                       MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                       adsp_cs->adsc_hobwspat3_def_1->awcc_library_name );
       return FALSE;                        /* load did not succeed    */
     }
     adsl_ext_lib1_w1->imc_usage_count++;   /* increment usage count   */
     adsp_cs->adsc_hobwspat3_def_1->adsc_ext_lib1 = adsl_ext_lib1_w1;
     return TRUE;                           /* succeeded               */
   }
   memset( &dsl_sdh_domc_1, 0, sizeof(dsl_sdh_domc_1) );  /* structure sdh DOM c */
   adsp_cs->adsc_hobwspat3_def_1->ac_conf = NULL;  /* no storage for conf */
   dsl_sdh_domc_1.adsc_node_conf = adsp_cs->adsc_hobwspat3_def_1->adsc_node_conf;
   dsg_cdaux_control.adsc_node_conf = adsp_cs->adsc_hobwspat3_def_1->adsc_node_conf;
   dsl_sdh_domc_1.amc_aux = &m_cdaux;
   dsl_sdh_domc_1.imc_flags_1 = imp_flags_1;  /* set flags             */
   dsl_sdh_domc_1.aac_conf = &adsp_cs->adsc_hobwspat3_def_1->ac_conf;
   dsl_sdh_domc_1.amc_call_dom = &m_call_dom;
   bol1 = adsl_ext_lib1_w1->amc_at3_conf( &dsl_sdh_domc_1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "after amc_at3_conf() bol1=%d adsp_cs->adsc_hobwspat3_def_1->ac_conf=%p",
                   bol1, adsp_cs->adsc_hobwspat3_def_1->ac_conf );
#endif
   if (bol1 == FALSE) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02221W line=%d col=%d Error %s%(ux)s%s%s <library-file-name> \"%(ux)s\" entry m_wspat3_config returned FALSE - Authentication Library removed",
                     MAC_XML_LINENO( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_cs->adsc_hobwspat3_def_1->adsc_node_def ),  /* column in XML configuration file */
                     adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2, adsp_cs->achc_msgtext_3,
                     adsp_cs->adsc_hobwspat3_def_1->awcc_library_name );
     return FALSE;                          /* load did not succeed    */
   }
   adsl_ext_lib1_w1->imc_usage_count++;     /* increment usage count   */
   adsp_cs->adsc_hobwspat3_def_1->adsc_ext_lib1 = adsl_ext_lib1_w1;
   return TRUE;                             /* succeeded               */
} /* end m_conf_hobwspat3()                                             */

/** process the Server-Data-Hook entries                               */
static int m_conf_sdh_load( struct dsd_conf_serv *adsp_cs, int imp_flags_1 ) {
// int        inl1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#endif
#ifdef HL_UNIX
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
#ifdef B080609
   struct dsd_sdh_lib1 *adsl_sdhl_w1;       /* server-data-hook libr   */
#endif
   struct dsd_hl_clib_dom_conf dsl_sdh_domc_1;  /* structure sdh DOM c */
   int        iml_no_sdh;                   /* count entries serv da h */
   struct dsd_sdh_def_1 *adsl_sdhlib_ch_1;  /* working variable        */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

   iml_no_sdh = 0;                          /* count entries server data hook */
   adsl_sdhlib_ch_1 = adsp_cs->adsc_sdhlib_chain;  /* get chain        */
   while (adsl_sdhlib_ch_1) {               /* loop over chain         */
     if (adsl_sdhlib_ch_1->adsc_sdh_obj == NULL) {  /* no server-data-hook-object */
       adsl_ext_lib1_w1 = m_conf_ext_lib_load( adsl_sdhlib_ch_1->awcc_library_name, adsp_cs->adsc_loconf_1_fill );
       do {                                 /* pseudo-loop             */
         if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02300W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, adsl_ext_lib1_w1->umc_load_err );
#else
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02310W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, adsl_ext_lib1_w1->achc_load_err );
#endif
           break;
         }
         bol1 = FALSE;                      /* did not retrieve error  */
         while (adsl_ext_lib1_w1->boc_sdh_checked == FALSE) {  /* server-data-hook was not checked */
           adsl_ext_lib1_w1->boc_sdh_checked = TRUE;  /* server-data-hook was checked */
#ifndef HL_UNIX
           adsl_ext_lib1_w1->amc_hlclib01 = (amd_hlclib01) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_hlclib01" );
           if (adsl_ext_lib1_w1->amc_hlclib01 == NULL) {  /* could not be loaded */
             dwl1 = GetLastError();         /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
             break;
           }
           adsl_ext_lib1_w1->amc_hlclib_conf = (amd_hlclib_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_hlclib_conf" );
           if (adsl_ext_lib1_w1->amc_hlclib_conf == NULL) {
             dwl1 = GetLastError();         /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
           }
#else
           adsl_ext_lib1_w1->amc_hlclib01 = (amd_hlclib01) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_hlclib01" );
           if (adsl_ext_lib1_w1->amc_hlclib01 == NULL) {
             achl1 = dlerror();             /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
             break;
           }
           adsl_ext_lib1_w1->amc_hlclib_conf = (amd_hlclib_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_hlclib_conf" );
           if (adsl_ext_lib1_w1->amc_hlclib_conf == NULL) {
             achl1 = dlerror();             /* retrieve last error     */
             bol1 = TRUE;                   /* did retrieve error      */
           }
#endif
           break;
         }
         if (adsl_ext_lib1_w1->amc_hlclib01 == NULL) {
#ifndef HL_UNIX
           achl_err_1 = "see last try in log";
           if (bol1) {
             sprintf( chrl_work1, "error %d", dwl1 );
             achl_err_1 = chrl_work1;
           }
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02301W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib01\" - %s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, achl_err_1 );
 #else
           achl_err_1 = "see last try in log";
           if (bol1) {
             achl_err_1 = "error ";
           } else {
             achl1 = "";
           }
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02311W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib01\" - %s%s - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, achl_err_1, achl1 );
#endif
           break;
         }
         if (adsl_ext_lib1_w1->amc_hlclib_conf == NULL) {
#ifndef HL_UNIX
           achl_err_1 = "see last try in log";
           if (bol1) {
             sprintf( chrl_work1, "error %d", dwl1 );
             achl_err_1 = chrl_work1;
           }
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02303W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib_conf\" - %s - entry ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, achl_err_1 );
#else
           achl_err_1 = "see last try in log";
           if (bol1) {
             achl_err_1 = "error ";
           } else {
             achl1 = "";
           }
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02312W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib_conf\" - %s%s - entry ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, achl_err_1, achl1 );
#endif
         }
         if (adsl_ext_lib1_w1->amc_hlclib_conf == NULL) {
           if (adsl_sdhlib_ch_1->adsc_node_conf) {  /* entry configuration-section */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02320W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_hlclib_conf in DLL - entry m_hlclib_conf not called",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name );
           }
#ifndef B150408
           adsl_sdhlib_ch_1->ac_conf = NULL;  /* no configuration      */
#endif
         } else {
           memset( &dsl_sdh_domc_1, 0, sizeof(dsl_sdh_domc_1) );  /* structure sdh DOM c */
           adsl_sdhlib_ch_1->ac_conf = NULL;  /* no storage for conf   */
           dsl_sdh_domc_1.adsc_node_conf = adsl_sdhlib_ch_1->adsc_node_conf;
           dsg_cdaux_control.adsc_node_conf = adsl_sdhlib_ch_1->adsc_node_conf;
           dsl_sdh_domc_1.amc_aux = &m_cdaux;
           dsl_sdh_domc_1.imc_flags_1 = imp_flags_1;  /* set flags     */
           dsl_sdh_domc_1.aac_conf = &adsl_sdhlib_ch_1->ac_conf;
           dsl_sdh_domc_1.amc_call_dom = &m_call_dom;
           bol1 = adsl_ext_lib1_w1->amc_hlclib_conf( &dsl_sdh_domc_1 );
#ifdef TRACEHL1
           m_hlnew_printf( HLOG_TRACE1, "after amc_hlclib_conf() bol1=%d adsl_sdhlib_ch_1->ac_conf=%p",
                           bol1, adsl_sdhlib_ch_1->ac_conf );
#endif
           if (bol1 == FALSE) {
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02321W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" entry m_hlclib_conf returned FALSE - Server-Data-Hook removed",
                             adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                             adsp_cs->awcc_name_value,
                             adsl_sdhlib_ch_1->awcc_library_name );
             break;
//           adsl_sdhl_w1 = NULL;           /* entry not used          */
           }
         }
         iml_no_sdh++;                      /* count entries server-data-hook */
//       adsl_sdhlib_ch_1->adsc_sdhl_1 = adsl_ext_lib1_w1;  /* save server-data-hook library */
         adsl_sdhlib_ch_1->adsc_ext_lib1 = adsl_ext_lib1_w1;  /* save server-data-hook library */
         adsl_ext_lib1_w1->imc_usage_count++;  /* increment usage count  */
       } while (FALSE);
#ifdef OLD_1112
#ifdef B080609
/* 07.06.08 KB - remove part from here */
     adsl_sdhl_w1 = adsg_sdhl_anchor;       /* server-data-hook libr   */
     while (adsl_sdhl_w1) {                 /* loop over existing entries */
       if (!HL_FN_WCSCMP( adsl_sdhlib_ch_1->awcc_library_name, (HL_WCHAR *) (adsl_sdhl_w1 + 1) )) {
         break;
       }
       adsl_sdhl_w1 = adsl_sdhl_w1->adsc_next;  /* get next in chain   */
     }
     while (adsl_sdhl_w1 == NULL) {         /* entry not defined before */
       inl1 = (HL_WCSLEN( adsl_sdhlib_ch_1->awcc_library_name ) + 1) * sizeof(HL_WCHAR);
       adsl_sdhl_w1 = (struct dsd_sdh_lib1 *) malloc( sizeof(struct dsd_sdh_lib1) + inl1 );
       memcpy( adsl_sdhl_w1 + 1, adsl_sdhlib_ch_1->awcc_library_name, inl1 );
#ifndef HL_UNIX
       adsl_sdhl_w1->dsc_hlibmod = LoadLibraryW( (WCHAR *) adsl_sdhlib_ch_1->awcc_library_name );
       if (adsl_sdhl_w1->dsc_hlibmod == NULL) {  /* library not loaded  */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02300W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, GetLastError() );
         free( adsl_sdhl_w1 );
         adsl_sdhl_w1 = NULL;                /* do not process          */
         break;
       }
       adsl_sdhl_w1->amc_hlclib01 = (amd_hlclib01) GetProcAddress( adsl_sdhl_w1->dsc_hlibmod, "m_hlclib01" );
       if (adsl_sdhl_w1->amc_hlclib01 == NULL) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02301W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib01\" - error %d - ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, GetLastError() );
         bol1 = FreeLibrary( adsl_sdhl_w1->dsc_hlibmod );
         if (bol1 == FALSE) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02302W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" FreeLibrary failed - error %d - ignored",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name, GetLastError() );
         }
         free( adsl_sdhl_w1 );
         adsl_sdhl_w1 = NULL;                /* do not process          */
         break;
       }
       adsl_sdhl_w1->amc_hlclib_conf = (amd_hlclib_conf) GetProcAddress( adsl_sdhl_w1->dsc_hlibmod, "m_hlclib_conf" );
       if (adsl_sdhl_w1->amc_hlclib_conf == NULL) {
         dwl1 = GetLastError();             /* retrieve error          */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02303W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib_conf\" - error %d - entry ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, dwl1 );
       }
       adsl_sdhlib_ch_1->adsc_sdhl_1 = adsl_sdhl_w1;  /* save server-data-hook libr */
#else
       achl1 = XMLString::transcode( (XMLCh *) adsl_sdhlib_ch_1->awcc_library_name );
       adsl_sdhl_w1->dsc_hlibmod = dlopen( achl1, RTLD_LAZY );
       XMLString::release( &achl1 );        /* free library name again */
       if (adsl_sdhl_w1->dsc_hlibmod == NULL) {  /* library not loaded  */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02310W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, dlerror() );
         free( adsl_sdhl_w1 );
         adsl_sdhl_w1 = NULL;                /* do not process          */
         break;
       }
       adsl_sdhl_w1->amc_hlclib01 = (amd_hlclib01) dlsym( adsl_sdhl_w1->dsc_hlibmod, "m_hlclib01" );
       if (adsl_sdhl_w1->amc_hlclib01 == NULL) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02311W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib01\" - error %s - ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, dlerror() );
         dlclose( adsl_sdhl_w1->dsc_hlibmod );
         free( adsl_sdhl_w1 );
         adsl_sdhl_w1 = NULL;                /* do not process          */
         break;
       }
       adsl_sdhl_w1->amc_hlclib_conf = (amd_hlclib_conf) dlsym( adsl_sdhl_w1->dsc_hlibmod, "m_hlclib_conf" );
       if (adsl_sdhl_w1->amc_hlclib_conf == NULL) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02312W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" cannot find entry-point \"m_hlclib_conf\" - error %s - entry ignored",
                         adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                         adsp_cs->awcc_name_value,
                         adsl_sdhlib_ch_1->awcc_library_name, dlerror() );
       }
       adsl_sdhlib_ch_1->adsc_sdhl_1 = adsl_sdhl_w1;  /* save server-data-hook libr */
#endif
#ifdef TRACEHL1
       m_hlnew_printf( HLOG_TRACE1, "after GetProcAddress adsl_sdhl_w1=%p, adsl_sdhl_w1->amc_hlclib01=%p, adsl_sdhl_w1->amc_hlclib_conf=%p "
                       "adsl_sdhlib_ch_1=%p adsl_sdhlib_ch_1->adsc_sdhl_1=%p",
                       adsl_sdhl_w1,
                       adsl_sdhl_w1->amc_hlclib01, adsl_sdhl_w1->amc_hlclib_conf,
                       adsl_sdhlib_ch_1, adsl_sdhlib_ch_1->adsc_sdhl_1 );
#endif
       adsl_sdhl_w1->adsc_next = adsg_sdhl_anchor;  /* set new chain    */
       adsg_sdhl_anchor = adsl_sdhl_w1;      /* set new anchor          */
       break;
     }
     if (adsl_sdhl_w1) {                     /* sdh in use              */
       if (adsl_sdhl_w1->amc_hlclib_conf == NULL) {
         if (adsl_sdhlib_ch_1->adsc_node_conf) {  /* entry configuration-section */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02320W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_hlclib_conf in DLL - entry m_hlclib_conf not called",
                       adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                       adsp_cs->awcc_name_value,
                       adsl_sdhlib_ch_1->awcc_library_name );
         }
       } else {
         memset( &dsl_sdh_domc_1, 0, sizeof(dsl_sdh_domc_1) );  /* structure sdh DOM c */
         adsl_sdhlib_ch_1->ac_conf = NULL;  /* no storage for conf     */
         dsl_sdh_domc_1.adsc_node_conf = adsl_sdhlib_ch_1->adsc_node_conf;
         dsg_cdaux_control.adsc_node_conf = adsl_sdhlib_ch_1->adsc_node_conf;
         dsl_sdh_domc_1.amc_aux = &m_cdaux;
         dsl_sdh_domc_1.imc_flags_1 = imp_flags_1;  /* set flags       */
         dsl_sdh_domc_1.aac_conf = &adsl_sdhlib_ch_1->ac_conf;
         dsl_sdh_domc_1.amc_call_dom = &m_call_dom;
         bol1 = adsl_sdhl_w1->amc_hlclib_conf( &dsl_sdh_domc_1 );
#ifdef TRACEHL1
         m_hlnew_printf( HLOG_TRACE1, "after amc_hlclib_conf() bol1=%d adsl_sdhlib_ch_1->ac_conf=%p",
                         bol1, adsl_sdhlib_ch_1->ac_conf );
#endif
         if (bol1 == FALSE) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02321W Error %s%(ux)s%s %(ux)s <server-data-hook> <library-file-name> \"%(ux)s\" entry m_hlclib_conf returned FALSE - Server-Data-Hook removed",
                           adsp_cs->achc_msgtext_1, adsp_cs->awcc_msgtext_1, adsp_cs->achc_msgtext_2,
                           adsp_cs->awcc_name_value,
                           adsl_sdhlib_ch_1->awcc_library_name );
           adsl_sdhl_w1 = NULL;             /* entry not used          */
         }
       }
     }
     if (adsl_sdhl_w1) {                    /* sdh in use              */
       iml_no_sdh++;                        /* count entries serv da h */
       adsl_sdhlib_ch_1->adsc_sdhl_1 = adsl_sdhl_w1;  /* save server-data-hook libr */
     }
#endif
#endif
     } else {                               /* server-data-hook-object */
       adsl_sdhlib_ch_1->adsc_ext_lib1 = adsl_sdhlib_ch_1->adsc_sdh_obj->adsc_ext_lib1;  /* external library loaded */
       adsl_sdhlib_ch_1->ac_conf = adsl_sdhlib_ch_1->adsc_sdh_obj->ac_conf;  /* return data from conf */
       iml_no_sdh++;                        /* count entries server-data-hook */
     }
     adsl_sdhlib_ch_1 = adsl_sdhlib_ch_1->adsc_next;  /* next in chain */
   }
   return iml_no_sdh;                       /* return count            */
} /* end m_conf_sdh_load()                                             */
#undef D_COND_SELI

/** process configuration of a Backgroud Task                          */
static void m_conf_bgt_1( DOMNode *adsp_node,
                          struct dsd_conf_serv *adsp_cs ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_bgt_name;          /* name of background-task */
   DOMNode    *adsl_node_lib_fn;            /* library-file-name       */
   DOMNode    *adsl_node_conf_sect;         /* configuration-section   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_bgt_name;                /* background-task name    */
   HL_WCHAR * awcl_lib_fn;                  /* library-file-name       */
   void *     al_conf;                      /* configuration made      */
   struct dsd_bgt_contr_1 *adsl_bgt_contr_1_w1;  /* background-task control */
// struct dsd_bgt_contr_1 dsl_bgt_contr_1_l;  /* background-task control */
// old:
// struct dsd_sdh_obj_1 *adsl_sdh_obj_w1;   /* working variable        */
   struct dsd_sdh_def_1 dsl_sdh_def_1;      /* for loading of server-data-hook */
// struct dsd_sdh_obj_1 dsl_sdh_obj_1;      /* definition server-data-hook-object entry */
#ifndef HL_UNIX
   DWORD      dwl1;                         /* working variable        */
#else
   char       *achl1;                       /* working variable        */
#endif
   char       *achl_err_1;                  /* for error message       */
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */
   struct dsd_bgt_dom_conf dsl_bgt_domc_1;  /* structure background-task DOM configuration */
#ifndef HL_UNIX
   char       chrl_work1[32];               /* working area            */
#endif

#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "xsipgw08-conf l%05d m_conf_bgt_1( %p , %p ) called",
                   __LINE__, adsp_node, adsp_cs );
#endif

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02400W line=%d col=%d Error background-task has no child - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ) );  /* column in XML configuration file */
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_bgt_name = NULL;               /* clear name of background-task */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_bgt_name) {          /* name already defined    */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02401W line=%d col=%d Error element background-task name double - ignored",
                           MAC_XML_LINENO( adsl_node_04 ),  /* line number in XML configuration file */
                           MAC_XML_COL( adsl_node_04 ) );  /* column in XML configuration file */
         } else {
           adsl_node_bgt_name = adsl_node_04;  /* save name            */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_bgt_name == NULL) {        /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02402W Error line=%d col=%d background-task has no name - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ) );  /* column in XML configuration file */
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_bgt_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02403W line=%d col=%d Error element background-task name \"name\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_bgt_name ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_bgt_name ) );  /* column in XML configuration file */
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_bgt_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02404W line=%d col=%d Error element background-task name \"name\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_bgt_name ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_bgt_name ) );  /* column in XML configuration file */
     return;                                /* do not process this entry */
   }
   adsl_bgt_contr_1_w1 = adsp_cs->adsc_loconf_1_fill->adsc_bgt_contr_1;  /* get chain background-task */
   while (adsl_bgt_contr_1_w1) {            /* loop over already defined background-tasks */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_bgt_name, -1, ied_chs_utf_16,
                         adsl_bgt_contr_1_w1 + 1, adsl_bgt_contr_1_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02405W line=%d col=%d Error element background-task %(ux)s already defined - ignored",
                       MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                       awcl_bgt_name );
       return;                              /* do not process this entry */
     }
     adsl_bgt_contr_1_w1 = adsl_bgt_contr_1_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_bgt_1() l%05d-T background-task name %(ux)s",
                   __LINE__, awcl_bgt_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_lib_fn = NULL;                 /* clear library-file-name */
   adsl_node_conf_sect = NULL;              /* clear configuration-section */
   do {
     if (   (adsl_node_04 != adsl_node_bgt_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       do {                                 /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "library-file-name" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_lib_fn) {          /* library-file-name already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02406W line=%d col=%d Error element background-task %(ux)s library-file-name double - ignored",
                             MAC_XML_LINENO( adsl_node_04 ),  /* line number in XML configuration file */
                             MAC_XML_COL( adsl_node_04 ),  /* column in XML configuration file */
                             awcl_bgt_name );
           } else {
             adsl_node_lib_fn = adsl_node_04;  /* save library-file-name */
           }
           break;                           /* all done                */
         }
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "configuration-section" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_conf_sect) {       /* configuration-section already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02407W line=%d col=%d Error element background-task %(ux)s configuration-section double - ignored",
                             MAC_XML_LINENO( adsl_node_04 ),  /* line number in XML configuration file */
                             MAC_XML_COL( adsl_node_04 ),  /* column in XML configuration file */
                             awcl_bgt_name );
           } else {
             adsl_node_conf_sect = adsl_node_04;  /* save configuration-section */
           }
           break;                           /* all done                */
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02408W line=%d col=%d Error element background-task %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         MAC_XML_LINENO( adsl_node_04 ),  /* line number in XML configuration file */
                         MAC_XML_COL( adsl_node_04 ),  /* column in XML configuration file */
                         awcl_bgt_name, awcl_05_name );
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_lib_fn == NULL) {          /* no library-file-name found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02409W line=%d col=%d Error background-task %(ux)s has no library-file-name - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name );
     return;                                /* do not process this entry */
   }
   /* retrieve library-file-name                                       */
   adsl_node_05 = adsl_node_lib_fn->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02410W line=%d col=%d Error element background-task %(ux)s name \"library-file-name\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_lib_fn ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_lib_fn ),  /* column in XML configuration file */
                     awcl_bgt_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_lib_fn = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02411W line=%d col=%d Error element background-task %(ux)s name \"library-file-name\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_lib_fn ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsl_node_lib_fn ),  /* column in XML configuration file */
                     awcl_bgt_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_bgt_1() l%05d-T background-task name %(ux)s library-file-name %(ux)s",
                   __LINE__, awcl_bgt_name, awcl_lib_fn );
#endif
   adsl_ext_lib1_w1 = m_conf_ext_lib_load( awcl_lib_fn, adsp_cs->adsc_loconf_1_fill );
   if (adsl_ext_lib1_w1->boc_loaded == FALSE) {  /* library not loaded */
#ifndef HL_UNIX
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02412W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot be loaded - error %d - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, adsl_ext_lib1_w1->umc_load_err );
#else
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02412W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot be loaded - error %s - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, adsl_ext_lib1_w1->achc_load_err );
#endif
     return;                                /* load did not succeed    */
   }
   bol1 = FALSE;                            /* did not retrieve error  */
   while (adsl_ext_lib1_w1->boc_bgt_checked == FALSE) {  /* background-task was not checked */
     adsl_ext_lib1_w1->boc_bgt_checked = TRUE;  /* background-task was checked */
#ifndef HL_UNIX
     adsl_ext_lib1_w1->amc_bgt_entry = (amd_call_bgt_1) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_bgt_call_1" );
     if (adsl_ext_lib1_w1->amc_bgt_entry == NULL) {  /* could not be loaded */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_bgt_conf = (amd_bgt_conf) GetProcAddress( adsl_ext_lib1_w1->dsc_hlibmod, "m_bgt_conf_1" );
     if (adsl_ext_lib1_w1->amc_bgt_conf == NULL) {  /* could not be loaded */
       dwl1 = GetLastError();               /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#else
     adsl_ext_lib1_w1->amc_bgt_entry = (amd_call_bgt_1) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_bgt_call_1" );
     if (adsl_ext_lib1_w1->amc_bgt_entry == NULL) {
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
       break;
     }
     adsl_ext_lib1_w1->amc_bgt_conf = (amd_bgt_conf) dlsym( adsl_ext_lib1_w1->dsc_hlibmod, "m_bgt_conf_1" );
     if (adsl_ext_lib1_w1->amc_bgt_conf == NULL) {  /* could not be loaded */
       achl1 = dlerror();                   /* retrieve last error     */
       bol1 = TRUE;                         /* did retrieve error      */
     }
#endif
     break;
   }
   if (adsl_ext_lib1_w1->amc_bgt_entry == NULL) {  /* entry for background-task call */
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02413W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot find entry-point \"m_bgt_call_1\" - %s - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02413W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot find entry-point \"m_bgt_call_1\" - %s%s - ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, achl_err_1, achl1 );
#endif
     return;                                /* load did not succeed    */
   }
   al_conf = NULL;                          /* no storage for configuration */
   if (adsl_ext_lib1_w1->amc_bgt_conf == NULL) {  /* no entry for background-task configuration */
#ifndef HL_UNIX
     achl_err_1 = "see last try in log";
     if (bol1) {
       sprintf( chrl_work1, "error %d", dwl1 );
       achl_err_1 = chrl_work1;
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02414W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot find entry-point \"m_bgt_conf_1\" - %s - entry ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, achl_err_1 );
#else
     achl_err_1 = "see last try in log";
     if (bol1) {
       achl_err_1 = "error ";
     } else {
       achl1 = "";
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02414W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" cannot find entry-point \"m_bgt_conf_1\" - %s%s - entry ignored",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn, achl_err_1, achl1 );
#endif
     if (adsl_node_conf_sect) {  /* entry configuration-section */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02415W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_bgt_conf_1 in DLL - entry m_bgt_conf_1 not called",
                       MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                       MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                       awcl_bgt_name, awcl_lib_fn );
       return;                              /* load did not succeed    */
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02416W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" <configuration-section> defined but no entry m_bgt_conf_1 in DLL - background-task without entry m_bgt_conf_1 not allowed - background-task removed",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn );
     return;                                /* load did not succeed    */
   }
   memset( &dsl_bgt_domc_1, 0, sizeof(struct dsd_bgt_dom_conf) );  /* structure background-task DOM configuration */
   dsl_bgt_domc_1.adsc_node_conf = adsl_node_conf_sect;
   dsg_cdaux_control.adsc_node_conf = adsl_node_conf_sect;
   dsl_bgt_domc_1.amc_aux = &m_cdaux;
// dsl_bgt_domc_1.imc_flags_1 = imp_flags_1;  /* set flags             */
   dsl_bgt_domc_1.aac_conf = &al_conf;
   dsl_bgt_domc_1.amc_call_dom = &m_call_dom;
   bol1 = adsl_ext_lib1_w1->amc_bgt_conf( &dsl_bgt_domc_1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "after amc_bgt_conf() bol1=%d al_conf=%p",
                   bol1, al_conf );
#endif
   if (bol1 == FALSE) {                     /* returned error          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02417W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" entry m_bgt_conf_1 returned FALSE - background-task removed",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn );
     return;                                /* load did not succeed    */
   }
   if (dsl_bgt_domc_1.adsc_bgt_function_1 == NULL) {  /* no chain background-task functions */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02418W line=%d col=%d Error background-task \"%(ux)s\" <library-file-name> \"%(ux)s\" entry m_bgt_conf_1 returned no adsc_bgt_function_1 - background-task removed",
                     MAC_XML_LINENO( adsp_node ),  /* line number in XML configuration file */
                     MAC_XML_COL( adsp_node ),  /* column in XML configuration file */
                     awcl_bgt_name, awcl_lib_fn );
     return;                                /* load did not succeed    */
   }
   adsl_ext_lib1_w1->imc_usage_count++;     /* increment usage count   */
// 09.06.08 KB - make entry
   iml1 = m_len_vx_vx( ied_chs_utf_8,       /* Unicode UTF-8           */
                       awcl_bgt_name, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   adsl_bgt_contr_1_w1 = (struct dsd_bgt_contr_1 *) malloc( sizeof(struct dsd_bgt_contr_1) + iml1 );  /* background-task control */
   memset( adsl_bgt_contr_1_w1, 0, sizeof(struct dsd_bgt_contr_1) );  /* clear background-task control */
   m_cpy_vx_vx( adsl_bgt_contr_1_w1 + 1, iml1, ied_chs_utf_8,  /* Unicode UTF-8 */
                       awcl_bgt_name, -1, ied_chs_utf_16 );  /* Unicode UTF-16 = WCHAR */
   adsl_bgt_contr_1_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_bgt_contr_1;  /* get chain background-task */
   adsl_bgt_contr_1_w1->imc_len_name = iml1;  /* length of name bytes  */
   adsl_bgt_contr_1_w1->adsc_ext_lib1 = adsl_ext_lib1_w1;  /* external library loaded */
   adsl_bgt_contr_1_w1->ac_conf = al_conf;  /* return data from conf   */
   adsl_bgt_contr_1_w1->adsc_bgt_function_1 = dsl_bgt_domc_1.adsc_bgt_function_1;  /* chain background-task functions */
   adsp_cs->adsc_loconf_1_fill->adsc_bgt_contr_1 = adsl_bgt_contr_1_w1;  /* set new chain background-task */
// return TRUE;                             /* succeeded               */
} /* end m_conf_bgt_1()                                                */

/** load a external library                                            */
static struct dsd_ext_lib1 * m_conf_ext_lib_load( HL_WCHAR *awcp_name,
                                                  struct dsd_loconf_1 *adsp_loconf_1_fill ) {
   int        iml1;                         /* working variable        */
#ifdef HL_UNIX
   char       *achl1;                       /* working variable        */
#endif
   struct dsd_ext_lib1 *adsl_ext_lib1_w1;   /* external loaded library */

   adsl_ext_lib1_w1 = adsp_loconf_1_fill->adsc_ext_lib1;  /* get existing external libraries */
   while (adsl_ext_lib1_w1) {               /* loop over existing entries */
     if (!HL_FN_WCSCMP( awcp_name, (HL_WCHAR *) (adsl_ext_lib1_w1 + 1) )) {
       return adsl_ext_lib1_w1;             /* return library found    */
     }
     adsl_ext_lib1_w1 = adsl_ext_lib1_w1->adsc_next;  /* get next in chain */
   }
   adsl_ext_lib1_w1 = NULL;
   iml1 = (HL_WCSLEN( awcp_name ) + 1) * sizeof(HL_WCHAR);
   adsl_ext_lib1_w1 = (struct dsd_ext_lib1 *) malloc( sizeof(struct dsd_ext_lib1) + iml1 );
   memset( adsl_ext_lib1_w1, 0, sizeof(struct dsd_ext_lib1) );
   memcpy( adsl_ext_lib1_w1 + 1, awcp_name, iml1 );
#ifndef HL_UNIX
   adsl_ext_lib1_w1->dsc_hlibmod = LoadLibraryW( (WCHAR *) awcp_name );
   if (adsl_ext_lib1_w1->dsc_hlibmod) {     /* library loaded          */
     adsl_ext_lib1_w1->boc_loaded = TRUE;   /* library has been loaded */
   } else {                                 /* library could not be loaded */
     adsl_ext_lib1_w1->umc_load_err = GetLastError();
   }
#else
   achl1 = XMLString::transcode( (XMLCh *) awcp_name );
   adsl_ext_lib1_w1->dsc_hlibmod = dlopen( achl1, RTLD_LAZY );
   XMLString::release( &achl1 );            /* free library name again */
   if (adsl_ext_lib1_w1->dsc_hlibmod) {     /* library loaded          */
     adsl_ext_lib1_w1->boc_loaded = TRUE;   /* library has been loaded */
   } else {                                 /* library could not be loaded */
     adsl_ext_lib1_w1->achc_load_err = dlerror();
   }
#endif
   adsl_ext_lib1_w1->adsc_next = adsp_loconf_1_fill->adsc_ext_lib1;  /* get existing chain */
   adsp_loconf_1_fill->adsc_ext_lib1 = adsl_ext_lib1_w1;  /* set new chain */
   return adsl_ext_lib1_w1;
} /* end m_conf_ext_lib_load()                                         */

/** process configuration cluster                                      */
static void m_conf_cluster( DOMNode *adsp_node_cluster, struct dsd_loconf_1 *adsp_loconf_1_fill ) {
   int        iml1;                         /* working variable        */
#ifdef HL_UNIX
   int        iml_port;                     /* for alternate-TCP-port  */
#endif
   int        iml_cmp;                      /* compare values          */
   BOOL       bol1;                         /* working variable        */
   char       *achl1;                       /* working variable        */
   int        *aiml_val;                    /* address of value        */
   BOOL       bol_remote;                   /* cluster-entry is remote */
   BOOL       bol_deny_not_conf;            /* <deny-not-configured> set */
   BOOL       bol_display_load;             /* <display-load> set      */
   int        iml_e_04;                     /* entry on stage 4        */
   int        iml_e_se;                     /* entry server-entry, stage 5 */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_servent;
   DOMNode    *adsl_node_se_name;
   DOMNode    *adsl_node_se_type;
   HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_05_value;
   HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_se_name;                 /* server entry name       */
   HL_WCHAR * awcl_se_n_local;              /* server entry name local */
   HL_WCHAR * awcl_lbal_formula;            /* save value formula      */
   HL_WCHAR * awcl_remote_ineta;            /* remote INETA            */
   HL_WCHAR * awcl_local_group;             /* local group             */
   HL_WCHAR * awcl_local_location;          /* local location          */
   HL_WCHAR * awcl_local_url;               /* local URL               */
   struct dsd_cluster_remote *adsl_clre_w1;  /* remote WSPs            */
   struct dsd_cluster_remote *adsl_clre_w2;  /* remote WSPs            */
   struct dsd_chain_listen_ineta_1 *adsl_cli1_ch;  /* chain INETA listen */
   struct dsd_chain_listen_ineta_1 *adsl_cli1_w1;  /* chain INETA listen */
   struct dsd_cluster_main dsl_cluster_main;  /* main cluster structure */
   struct dsd_cluster_remote dsl_cluster_remote;  /* cluster remote structure */
#ifdef HL_UNIX
   int        imrl_alternate_tcp_port[ DEF_CLUSTER_MAX_AUP ];  /* cluster alternate-TCP-port */
#endif

   adsl_node_04 = adsp_node_cluster->getFirstChild();
   if (adsl_node_04 == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03000W Error cluster has no child - ignored" );
     return;                                /* all done                */
   }
   memset( &dsl_cluster_main, 0, sizeof(struct dsd_cluster_main) );
#ifdef B070917
   dsl_cluster_main.umc_multih_ineta = 0XFFFFFFFF;  /* make INETA invalid */
#endif
   adsl_cli1_ch = NULL;                     /* chain INETA listen      */
   awcl_se_n_local = NULL;                  /* clear server entry name local */
   bol_deny_not_conf = FALSE;               /* <deny-not-configured> set */
   bol_display_load = FALSE;                /* <display-load> set      */

   p_cluster_20:                            /* node found - check what it contains */
   if (adsl_node_04->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   awcl_04_name = (HL_WCHAR *) adsl_node_04->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_cluster() l%05d-T node found %(ux)s", __LINE__, awcl_04_name );
#endif
   iml_e_04 = sizeof(achrs_node_cluster_04) / sizeof(achrs_node_cluster_04[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_04 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03001W Error cluster invalid node found \"%(ux)s\" - ignored",
                       awcl_04_name );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
     iml_e_04--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_04_name, (char *) achrs_node_cluster_04[ iml_e_04 ] );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   if (iml_e_04 != (DEF_XML_CL04_CLUSTER_ENTRY - 1)) goto p_cl_other_00;  /* process other entry */
   adsl_node_servent = adsl_node_04->getFirstChild();
   if (adsl_node_servent == NULL) {         /* child not found         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03002W Error element cluster cluster-entry has no child - ignored" );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }

   /* search name and type first                                       */
   adsl_node_se_name = adsl_node_se_type = NULL;  /* nothing found yet */
   adsl_node_05 = adsl_node_servent;        /* get first node          */
   do {
     if (adsl_node_05->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_05->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_se_name) {           /* name already defined    */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03003W Error element cluster cluster-entry name double - ignored" );
         } else {
           adsl_node_se_name = adsl_node_05;  /* save name             */
         }
       } else {
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "type" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_se_type) {         /* type already defined    */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03004W Error element cluster cluster-entry type double - ignored" );
           } else {
             adsl_node_se_type = adsl_node_05;  /* save type           */
           }
         }
       }
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);
   if (adsl_node_se_name == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03005W Error element cluster cluster-entry has no name - ignored" );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_06 = adsl_node_se_name->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03006W Error element cluster cluster-entry name \"name\" has no child - ignored" );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_name = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03007W Error element cluster cluster-entry name \"name\" no TEXT_NODE found - ignored" );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   if (   (awcl_se_n_local)                 /* server entry name local */
       && (!HL_FN_WCSCMP( awcl_se_n_local, awcl_se_name ))) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03008W Error element cluster cluster-entry %(ux)s same name as LOCAL - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   adsl_clre_w1 = dsl_cluster_main.adsc_clre;  /* get chain already defined */
   while (adsl_clre_w1) {                   /* loop over all remote WSPs */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_se_name, -1, ied_chs_utf_16,
                         adsl_clre_w1 + 1, adsl_clre_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03009W Error element cluster cluster-entry %(ux)s same name as REMOTE before - ignored",
                       awcl_se_name );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
     adsl_clre_w1 = adsl_clre_w1->adsc_next;  /* get next in chain     */
   }
   /* process type                                                     */
   if (adsl_node_se_type == NULL) {         /* no type found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03010W Error cluster cluster-entry %(ux)s no type found - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   adsl_node_06 = adsl_node_se_type->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03011W Error element cluster cluster-entry %(ux)s name \"type\" has no child - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03012W Error element cluster cluster-entry %(ux)s name \"type\" no TEXT_NODE found - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_value, "LOCAL" );
   if ((bol1) && (iml1 == 0)) {             /* strings are equal       */
     if (dsl_cluster_main.imc_port) {       /* LOCAL already defined   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03013W Error element cluster cluster-entry %(ux)s type LOCAL defined double - ignored",
                       awcl_se_name );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
     bol_remote = FALSE;                    /* is not remote           */
   } else {
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_value, "REMOTE" );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       bol_remote = TRUE;                   /* is remote               */
       memset( &dsl_cluster_remote, 0, sizeof(struct dsd_cluster_remote) );  /* clear cluster remote structure */
#ifdef B070917
       dsl_cluster_remote.umc_multih_ineta = 0XFFFFFFFF;  /* make INETA invalid */
#endif
     } else {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03014W Error element cluster cluster-entry %(ux)s name type \"%(ux)s\" neither LOCAL nor REMOTE - ignored",
                       awcl_se_name, awcl_06_value );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
   }
   adsl_node_05 = adsl_node_servent;        /* get first node          */
   awcl_remote_ineta = NULL;                /* clear remote INETA      */

   p_cluster_40:                            /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_cluster_60;                     /* get next node on stage 5 */
   }
   if (adsl_node_05 == adsl_node_se_name) {  /* name already processed */
     goto p_cluster_60;                     /* get next node on stage 5 */
   }
   if (adsl_node_05 == adsl_node_se_type) {  /* type already processed */
     goto p_cluster_60;                     /* get next node on stage 5 */
   }
   awcl_05_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_se = sizeof(achrs_node_cluster_entry) / sizeof(achrs_node_cluster_entry[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_se == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03015W Error cluster cluster-entry %(ux)s invalid node found \"%(ux)s\" - ignored",
                       awcl_se_name, awcl_05_name );
       goto p_cluster_60;                   /* get next node on stage 5 */
     }
     iml_e_se--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, (char *) achrs_node_cluster_entry[ iml_e_se ] );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03016W Error element cluster cluster-entry %(ux)s name \"%(ux)s\" has no child - ignored",
                     awcl_se_name, awcl_05_name );
     goto p_cluster_60;                     /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03017W Error element cluster cluster-entry %(ux)s name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_se_name, awcl_05_name );
     goto p_cluster_60;                     /* get next node on stage 5 */
   }
   switch (iml_e_se) {                      /* type of entry found     */
     case (DEF_XML_CL_ENT_TCP_PORT - 1):
       if (bol_remote == FALSE) {           /* not remote              */
         aiml_val = &dsl_cluster_main.imc_port;
       } else {                             /* is remote               */
         aiml_val = &dsl_cluster_remote.imc_port;
       }
       if (*aiml_val) {                     /* port already defined    */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03020W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" double - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       *aiml_val = m_get_cluster_entry_number( awcl_se_name, awcl_05_name, awcl_06_value );
       if (*aiml_val == 0) break;           /* invalid value           */
       if (*aiml_val >= 0X010000) {         /* out of range            */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03021W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" / \"%d\" out of range - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, *aiml_val );
         *aiml_val = 0;                     /* make entry invalid      */
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
#ifdef HL_UNIX
       iml1 = 0;                            /* clear index             */
       while (iml1 < dsl_cluster_main.imc_no_alternate_ports) {  /* number of alternate ports */
         if (*aiml_val == imrl_alternate_tcp_port[ iml1 ]) break;  /* double */
         iml1++;                            /* increment index         */
       }
       if (iml1 < dsl_cluster_main.imc_no_alternate_ports) {  /* number of alternate ports */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03022W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" equal to alternate-TCP-port index %d - alternate-TCP-port ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, iml1 );
         dsl_cluster_main.imc_no_alternate_ports--;  /* number of alternate ports */
         if (iml1 < dsl_cluster_main.imc_no_alternate_ports) {  /* number of alternate ports */
           memmove( &imrl_alternate_tcp_port[ iml1 ],
                    &imrl_alternate_tcp_port[ iml1 + 1 ],
                    (dsl_cluster_main.imc_no_alternate_ports - iml1) * sizeof(int) );
         }
       }
#endif
       break;
     case (DEF_XML_CL_ENT_ALT_TCP_PORT - 1):
#ifndef HL_UNIX
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03023W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" only allowed in Unix environment - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_se_name, awcl_05_name, awcl_06_value );
       goto p_cluster_60;                   /* get next node on stage 5 */
#endif
#ifdef HL_UNIX
       if (adsp_loconf_1_fill->boc_listen_gw == FALSE) {  /* use listen-gateway */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03024W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" only possible with Listen-Gateway - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (dsl_cluster_main.imc_no_alternate_ports >= DEF_CLUSTER_MAX_AUP) {  /* number of alternate ports */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03025W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" already maximum number of alternate-TCP-ports configured - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       iml_port = m_get_cluster_entry_number( awcl_se_name, awcl_05_name, awcl_06_value );
       if (iml_port == 0) break;            /* invalid value           */
       if (iml_port >= 0X010000) {          /* out of range            */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03026W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" / \"%d\" out of range - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, iml_port );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       iml1 = 0;                            /* clear index             */
       while (iml1 < dsl_cluster_main.imc_no_alternate_ports) {  /* number of alternate ports */
         if (iml_port == imrl_alternate_tcp_port[ iml1 ]) break;  /* double */
         iml1++;                            /* increment index         */
       }
       if (iml1 < dsl_cluster_main.imc_no_alternate_ports) {  /* number of alternate ports */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03027W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" equal to alternate-TCP-port index %d - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, iml1 );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (iml_port == dsl_cluster_main.imc_port) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03028W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" / \"%d\" equal to main TCP-port - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, iml_port );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       imrl_alternate_tcp_port[ dsl_cluster_main.imc_no_alternate_ports++ ] = iml_port;  /* set port */
       break;                               /* all done                */
#endif
     case (DEF_XML_CL_ENT_GATE_INETA - 1):
#ifdef B070917
       if (bol_remote == FALSE) {           /* not remote              */
         auml_ineta = &dsl_cluster_main.umc_multih_ineta;
       } else {                             /* is remote               */
         auml_ineta = &dsl_cluster_remote.umc_multih_ineta;
       }
       if (*auml_ineta != 0XFFFFFFFF) {     /* already defined         */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" double - ignored",
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       achl1 = XMLString::transcode( (XMLCh *) awcl_06_value );
       *auml_ineta = m_get_ineta_single( achl1 );
       XMLString::release( &achl1 );        /* free ineta again        */
       if (*auml_ineta == 0XFFFFFFFF) {     /* invalid IP-address      */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                         awcl_se_name, awcl_05_name, awcl_06_value );
       }
#endif
       if (bol_remote == FALSE) {           /* not remote              */
#ifdef B141227
         if (dsl_cluster_main.adsc_listen_ineta) {  /* listen INETA already defined */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" double - ignored",
                           awcl_se_name, awcl_05_name );
           goto p_cluster_60;               /* get next node on stage 5 */
         }
         dsl_cluster_main.adsc_listen_ineta
           = m_get_listen_ineta( awcl_06_value, -1, ied_chs_utf_16 );
         if (dsl_cluster_main.adsc_listen_ineta == NULL) {  /* invalid IP-address */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                           awcl_se_name, awcl_05_name, awcl_06_value );
         }
         break;
#endif
         adsl_cli1_w1 = adsl_cli1_ch;       /* get chain INETA listen  */
         while (adsl_cli1_w1) {             /* loop over elements configured before */
           bol1 = m_cmp_vx_vx( &iml_cmp,
                               adsl_cli1_w1->vpc_work_1, -1, ied_chs_utf_16,
                               awcl_06_value, -1, ied_chs_utf_16 );
           if ((bol1) && (iml_cmp == 0)) {  /* strings are equal       */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03029W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" configured before, double - ignored",
                             MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                             awcl_se_name, awcl_05_name, awcl_06_value );
             goto p_cluster_60;             /* get next node on stage 5 */
           }
           adsl_cli1_w1 = adsl_cli1_w1->adsc_next;  /* get next in chain */
         }
         adsl_cli1_w1 = m_get_chain_listen_ineta( awcl_06_value, -1, ied_chs_utf_16 );
         if (adsl_cli1_w1 == NULL) {        /* failed to build listen-INETA */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03030W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" not valid - ignored",
                           MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                           awcl_se_name, awcl_05_name, awcl_06_value );
           goto p_cluster_60;               /* get next node on stage 5 */
         }
         adsl_cli1_w1->vpc_work_1 = awcl_06_value;  /* save this value */
         adsl_cli1_w1->adsc_next = adsl_cli1_ch;  /* get old chain INETA listen */
         adsl_cli1_ch = adsl_cli1_w1;       /* set new chain INETA listen */
         break;
       }
       /* is remote entry - multihomed for connect                     */
       if (dsl_cluster_remote.dsc_bind_multih.boc_bind_needed) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03031W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" double - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       iml1 = m_build_bind_ineta( &dsl_cluster_remote.dsc_bind_multih, awcl_06_value, -1, ied_chs_utf_16 );
       if (iml1) {                          /* error occured           */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03032W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid INETA error %d - ignored",
                         awcl_se_name, awcl_05_name, awcl_06_value, iml1 );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       break;
     case (DEF_XML_CL_ENT_BACKLOG - 1):
       if (bol_remote) {                    /* is remote               */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03033W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" not allowed when type REMOTE - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (dsl_cluster_main.imc_backlog) {  /* backlog already defined */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03034W Error cluster cluster-entry %(ux)s node \"%(ux)s\" double - ignored",
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                   /* get next node on stage 5 */
       }
       dsl_cluster_main.imc_backlog = m_get_cluster_entry_number( awcl_se_name, awcl_05_name, awcl_06_value );
       break;
     case (DEF_XML_CL_ENT_REMOTE_INETA - 1):
       if (bol_remote == FALSE) {           /* not remote              */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03035W Error cluster cluster-entry %(ux)s node found \"%(ux)s\" not allowed when type LOCAL - ignored",
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (awcl_remote_ineta) {             /* INETA already defined   */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03036W Error cluster cluster-entry %(ux)s node \"%(ux)s\" double - ignored",
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       awcl_remote_ineta = awcl_06_value;   /* set remote INETA        */
#ifdef B070917
       if (dsl_cluster_remote.adsc_remote_ineta) {  /* INETA already defined */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" double - ignored",
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                   /* get next node on stage 5 */
       }
       achl1 = XMLString::transcode( (XMLCh *) awcl_06_value );
       dsl_cluster_remote.adsc_remote_ineta = m_get_ineta_multi( achl1 );
       XMLString::release( &achl1 );        /* free INETA again        */
       if (dsl_cluster_remote.adsc_remote_ineta == NULL) {  /* INETA not valid */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                         awcl_se_name, awcl_05_name, awcl_06_value );
       }
#endif
       break;
     case (DEF_XML_CL_ENT_TIMEOUT_MSEC - 1):
       if (bol_remote == FALSE) {           /* not remote              */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03037W line=%d col=%d Error cluster cluster-entry %(ux)s node found \"%(ux)s\" not allowed when type LOCAL - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       iml1 = m_get_cluster_entry_number( awcl_se_name, awcl_05_name, awcl_06_value );
       if (iml1 <= 0) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03038W line=%d col=%d Error cluster cluster-entry %(ux)s node found \"%(ux)s\" value \"%(ux)s\" numeric %d not allowed - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value, iml1 );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       dsl_cluster_remote.imc_timeout_msec = iml1;
       break;
     case (DEF_XML_CL_ENT_TO_RECV_MSEC - 1):
       if (bol_remote == FALSE) {           /* not remote              */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03039W line=%d col=%d Error cluster cluster-entry %(ux)s node found \"%(ux)s\" not allowed when type LOCAL - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       dsl_cluster_remote.imc_recv_timeout = m_get_cluster_entry_number( awcl_se_name, awcl_05_name, awcl_06_value );
       break;
     case (DEF_XML_CL_ENT_GROUP - 1):
       if (bol_remote) {                    /* is remote               */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03040W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" not allowed when type REMOTE - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (dsl_cluster_main.imc_this_len_group) {  /* already defined  */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03041W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       awcl_local_group = awcl_06_value;   /* save value for later    */
       dsl_cluster_main.imc_this_len_group = m_count_wchar_z_to_utf8( awcl_local_group );  /* length UTF-8 */
       break;
     case (DEF_XML_CL_ENT_LOCATION - 1):
       if (bol_remote) {                    /* is remote               */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03042W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" not allowed when type REMOTE - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (dsl_cluster_main.imc_this_len_location) {  /* already defined */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03043W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       awcl_local_location = awcl_06_value;  /* save value for later   */
       dsl_cluster_main.imc_this_len_location = m_count_wchar_z_to_utf8( awcl_local_location );  /* length UTF-8 */
       break;
     case (DEF_XML_CL_ENT_URL - 1):
       if (bol_remote) {                    /* is remote               */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03044W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" not allowed when type REMOTE - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name );
         goto p_cluster_60;                 /* get next node on stage 5 */
       }
       if (dsl_cluster_main.imc_this_len_url) {  /* already defined    */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03045W line=%d col=%d Error cluster cluster-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_se_name, awcl_05_name, awcl_06_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       awcl_local_url = awcl_06_value;      /* save value for later    */
       dsl_cluster_main.imc_this_len_url = m_count_wchar_z_to_utf8( awcl_local_url );  /* length UTF-8 */
       break;
   }

   p_cluster_60:                            /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_cluster_40;     /* node found - check what it contains */
   if (bol_remote == FALSE) {               /* not remote              */
     if (dsl_cluster_main.imc_port == 0) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03060W Error cluster cluster-entry %(ux)s type LOCAL no \"TCP-port\" defined - ignored",
                       awcl_se_name );
#ifdef B070917
       dsl_cluster_main.umc_multih_ineta = 0XFFFFFFFF;  /* make INETA invalid */
#endif
#ifdef B141227
       if (dsl_cluster_main.adsc_listen_ineta) {  /* listen INETA      */
         free( dsl_cluster_main.adsc_listen_ineta );  /* free memory again */
         dsl_cluster_main.adsc_listen_ineta = NULL;  /* clear listen INETA */
       }
#endif
       while (adsl_cli1_ch) {               /* loop over chain INETA listen */
         adsl_cli1_w1 = adsl_cli1_ch;       /* get chain INETA listen  */
         adsl_cli1_ch = adsl_cli1_w1->adsc_next;  /* remove from chain */
         free( adsl_cli1_w1 );              /* free memory occupied    */
       }
       dsl_cluster_main.imc_backlog = 0;
       dsl_cluster_remote.imc_timeout_msec = 0;
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
     awcl_se_n_local = awcl_se_name;        /* server entry name local */
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   /* is remote                                                        */
#ifdef B070917
   if (dsl_cluster_remote.adsc_remote_ineta == NULL) {  /* INETA not valid */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry %(ux)s type REMOTE no \"remote-ineta\" defined - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
#endif
   if (awcl_remote_ineta == NULL) {         /* INETA not defined       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03061W Error cluster cluster-entry %(ux)s type REMOTE no \"remote-ineta\" defined - ignored",
                     awcl_se_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   if (dsl_cluster_remote.imc_port == 0) {  /* no port defined         */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03062W Error cluster cluster-entry %(ux)s type REMOTE no \"TCP-port\" defined - ignored",
                     awcl_se_name );
#ifdef B070917
     free( dsl_cluster_remote.adsc_remote_ineta );  /* free INETA      */
#endif
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   dsl_cluster_remote.adsc_remote_ineta
     = m_get_target_ineta( awcl_remote_ineta, -1, ied_chs_utf_16, &dsl_cluster_remote.dsc_bind_multih );
   if (dsl_cluster_remote.adsc_remote_ineta == NULL) {  /* entry is not valid */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03063W Error cluster cluster-entry %(ux)s type REMOTE remote-ineta \"%(ux)s\" invalid - ignored",
                     awcl_remote_ineta, awcl_remote_ineta );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   iml1 = m_count_wchar_z_to_utf8( awcl_se_name );
   dsl_cluster_remote.imc_len_name = iml1;  /* length of name in bytes */
   adsl_clre_w1 = (struct dsd_cluster_remote *) malloc( sizeof(struct dsd_cluster_remote) + iml1 );
   memcpy( adsl_clre_w1, &dsl_cluster_remote, sizeof(struct dsd_cluster_remote) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_clre_w1 + 1), awcl_se_name );
   adsl_clre_w1->adsc_next = dsl_cluster_main.adsc_clre;  /* get old chain */
   dsl_cluster_main.adsc_clre = adsl_clre_w1;  /* append new element to chain */
   goto p_cluster_80;                       /* get next node on stage 4 */

   p_cl_other_00:                           /* process other entry     */
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03070W Error element cluster name \"%(ux)s\" has no child - ignored",
                     awcl_04_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_05_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03071W Error element cluster name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_04_name );
     goto p_cluster_80;                     /* get next node on stage 4 */
   }
   if (   (iml_e_04 != (DEF_XML_CL04_LBAL_FORMULA - 1))
       && (iml_e_04 != (DEF_XML_CL04_DENY_NOT_CONF - 1))
       && (iml_e_04 != (DEF_XML_CL04_DISPLAY_LOAD - 1))) {  /* numeric value needed */
     iml1 = m_get_wc_number( awcl_05_value );
     if (iml1 < 0) {                        /* value is not numeric    */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03072W Error element cluster name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       awcl_04_name, awcl_05_value );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
     if (iml1 == 0) {                       /* value zero not allowed  */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03073W Error element cluster name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       awcl_04_name, awcl_05_value );
       goto p_cluster_80;                   /* get next node on stage 4 */
     }
   }

   switch (iml_e_04) {                      /* process entry           */
     case (DEF_XML_CL04_LBAL_DIFF - 1):
       if (dsl_cluster_main.imc_lbal_diff) {  /* already defined       */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03074W Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       dsl_cluster_main.imc_lbal_diff = iml1;
       break;
     case (DEF_XML_CL04_LBAL_FORMULA - 1):
       if (dsl_cluster_main.imc_lbal_len_formula) {  /* already defined */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03075W Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       awcl_lbal_formula = awcl_05_value;   /* save value for later    */
       dsl_cluster_main.imc_lbal_len_formula = m_count_wchar_z_to_utf8( awcl_lbal_formula );  /* length UTF-8 */
       break;
     case (DEF_XML_CL04_LBAL_INTV - 1):     /* <interval-load-balancing-probe> */
       if (dsl_cluster_main.imc_lbal_intv) {  /* already defined       */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03076W Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       dsl_cluster_main.imc_lbal_intv = iml1;
       break;
     case (DEF_XML_CL04_TIME_RETRY_C - 1):
       if (dsl_cluster_main.imc_time_retry_conn) {  /* already defined */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03077W Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       dsl_cluster_main.imc_time_retry_conn = iml1;
       break;
     case (DEF_XML_CL04_TIMEOUT_RECV - 1):  /* <timeout-receive-millisec-all> */
       if (dsl_cluster_main.imc_recv_timeout) {  /* already defined    */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03078W Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       dsl_cluster_main.imc_recv_timeout = iml1;  /* receive timeout   */
       break;
     case (DEF_XML_CL04_DENY_NOT_CONF - 1):  /* <deny-not-configured>  */
     case (DEF_XML_CL04_DISPLAY_LOAD - 1):  /* <display-load>          */
       if (   (   (iml_e_04 == DEF_XML_CL04_DENY_NOT_CONF - 1)
               && (bol_deny_not_conf))      /* already defined         */
           || (   (iml_e_04 == DEF_XML_CL04_DISPLAY_LOAD - 1)
               && (bol_display_load))) {    /* already defined         */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03079W line=%d col=%d Error element cluster name \"%(ux)s\" value \"%(ux)s\" already defined - ignored",
                         MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                         awcl_04_name, awcl_05_value );
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_value, "YES" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (iml_e_04 == DEF_XML_CL04_DENY_NOT_CONF - 1) {
           dsl_cluster_main.boc_deny_not_configured = TRUE;  /* deny connect in from not configured WSP */
           bol_deny_not_conf = TRUE;        /* parameter defined       */
         } else if (iml_e_04 == DEF_XML_CL04_DISPLAY_LOAD - 1) {
           dsl_cluster_main.boc_display_load = TRUE;  /* display load every time calculated */
           bol_display_load = TRUE;         /* parameter defined       */
         }
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_value, "NO" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (iml_e_04 == DEF_XML_CL04_DENY_NOT_CONF - 1) {
           dsl_cluster_main.boc_deny_not_configured = FALSE;  /* deny connect in from not configured WSP */
           bol_deny_not_conf = TRUE;        /* parameter defined       */
         }
         if (iml_e_04 == DEF_XML_CL04_DISPLAY_LOAD - 1) {
           dsl_cluster_main.boc_display_load = FALSE;  /* display load every time calculated */
           bol_display_load = TRUE;         /* parameter defined       */
         }
         goto p_cluster_80;                 /* get next node on stage 4 */
       }
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03080W line=%d col=%d Error element cluster name \"%(ux)s\" value \"%(ux)s\" neither \"YES\" nor \"NO\" - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_04_name, awcl_05_value );
       goto p_cluster_80;                   /* get next node on stage 4 */
   }

   p_cluster_80:                            /* get next node on stage 4 */
   adsl_node_04 = adsl_node_04->getNextSibling();
   if (adsl_node_04) goto p_cluster_20;     /* node found - check what it contains */
   if (dsl_cluster_main.imc_port == 0) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03090W Error cluster no cluster-entry type LOCAL found - ignored" );
     goto p_cluster_88;                     /* free all what was defined before */
   }
#ifdef B110926
   if (dsl_cluster_main.adsc_clre == NULL) {  /* no chain of remote entries */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster no cluster-entry type REMOTE found - ignored" );
     goto p_cluster_88;                     /* free all what was defined before */
   }
#else
   if (   (dsl_cluster_main.boc_deny_not_configured)
       && (dsl_cluster_main.adsc_clre == NULL)) {  /* no chain of remote entries */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03091W Error cluster <deny-not-configured> YES and no cluster-entry type REMOTE found - ignored" );
     goto p_cluster_88;                     /* free all what was defined before */
   }
#endif
#ifdef B141227
   if (dsl_cluster_main.adsc_listen_ineta == NULL) {  /* listen INETA not defined */
     dsl_cluster_main.adsc_listen_ineta
       = m_get_listen_ineta( NULL, -1, ied_chs_utf_16 );
     if (dsl_cluster_main.adsc_listen_ineta == NULL) {  /* invalid IP-address */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error cluster cluster-entry type LOCAL could not resolve INETA - ignored" );
       goto p_cluster_88;                   /* free all what was defined before */
     }
   }
#endif
   if (adsl_cli1_ch == NULL) {              /* chain INETA listen not defined */
     dsl_cluster_main.adsc_listen_ineta
       = m_get_listen_ineta( NULL, -1, ied_chs_utf_16 );
   } else {
     dsl_cluster_main.adsc_listen_ineta = m_get_sum_chain_listen_ineta( adsl_cli1_ch );
   }
   if (dsl_cluster_main.adsc_listen_ineta == NULL) {  /* invalid IP-address */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03092W Error cluster cluster-entry type LOCAL could not resolve INETA - ignored" );
     goto p_cluster_88;                     /* free all what was defined before */
   }
   /* make one big piece of memory, remote target INETA is extra       */
#ifdef B070917
   if (dsl_cluster_main.umc_multih_ineta == 0XFFFFFFFF) {  /* INETA is invalid */
     dsl_cluster_main.umc_multih_ineta = 0;  /* set default            */
   }
#endif
#ifndef HL_UNIX
   iml1 = sizeof(struct dsd_cluster_main)
          + dsl_cluster_main.adsc_listen_ineta->imc_no_ineta * sizeof(struct dsd_cluster_listen)
          + dsl_cluster_main.adsc_listen_ineta->imc_len_mem
          + dsl_cluster_main.imc_lbal_len_formula
          + dsl_cluster_main.imc_this_len_group
          + dsl_cluster_main.imc_this_len_location
          + dsl_cluster_main.imc_this_len_url
          + m_count_wchar_z_to_utf8( awcl_se_n_local );
#else
   iml1 = (sizeof(struct dsd_cluster_main)
           + dsl_cluster_main.adsc_listen_ineta->imc_no_ineta * sizeof(struct dsd_cluster_listen)
           + dsl_cluster_main.adsc_listen_ineta->imc_len_mem
           + dsl_cluster_main.imc_lbal_len_formula
           + dsl_cluster_main.imc_this_len_group
           + dsl_cluster_main.imc_this_len_location
           + dsl_cluster_main.imc_this_len_url
           + m_count_wchar_z_to_utf8( awcl_se_n_local )
           + dsl_cluster_main.imc_no_alternate_ports * sizeof(int)
           + sizeof(void *) - 1)
            & (0 - sizeof(void *));
#endif
   adsl_clre_w1 = dsl_cluster_main.adsc_clre;  /* get chain already defined */
   while (adsl_clre_w1) {                   /* loop over all remote WSPs */
     iml1 += sizeof(struct dsd_cluster_remote) + adsl_clre_w1->imc_len_name;
     adsl_clre_w1 = adsl_clre_w1->adsc_next;  /* get next in chain     */
   }
   adsp_loconf_1_fill->adsc_cluster = (struct dsd_cluster_main *) malloc( iml1 );
   achl1 = (char *) adsp_loconf_1_fill->adsc_cluster + iml1;  /* end of memory */
   memcpy( adsp_loconf_1_fill->adsc_cluster, &dsl_cluster_main, sizeof(struct dsd_cluster_main) );
#ifdef HL_UNIX
   if (dsl_cluster_main.imc_no_alternate_ports > 0) {  /* alternate ports */
     achl1 -= dsl_cluster_main.imc_no_alternate_ports * sizeof(int);  /* make space */
     memcpy( achl1, imrl_alternate_tcp_port, dsl_cluster_main.imc_no_alternate_ports * sizeof(int) );
     adsp_loconf_1_fill->adsc_cluster->aimc_alternate_ports = (int *) achl1;  /* alternate ports */
   }
#endif
   if (dsl_cluster_main.imc_this_len_url > 0) {  /* length of URL in bytes */
     achl1 -= dsl_cluster_main.imc_this_len_url;  /* length of URL in bytes */
     m_trans_wchar_z_to_utf8( achl1, awcl_local_url );
     adsp_loconf_1_fill->adsc_cluster->achc_this_url = achl1;  /* URL of this WSP, UTF-8 */
   }
   if (dsl_cluster_main.imc_this_len_location > 0) {  /* length of location in bytes */
     achl1 -= dsl_cluster_main.imc_this_len_location;  /* length of location in bytes */
     m_trans_wchar_z_to_utf8( achl1, awcl_local_location );
     adsp_loconf_1_fill->adsc_cluster->achc_this_location = achl1;  /* location of this WSP, UTF-8 */
   }
   if (dsl_cluster_main.imc_this_len_group > 0) {  /* length of group in bytes */
     achl1 -= dsl_cluster_main.imc_this_len_group;  /* length of group in bytes */
     m_trans_wchar_z_to_utf8( achl1, awcl_local_group );
     adsp_loconf_1_fill->adsc_cluster->achc_this_group = achl1;  /* group of this WSP, UTF-8 */
   }
   iml1 = m_count_wchar_z_to_utf8( awcl_se_n_local );
   achl1 -= iml1;                           /* space for name          */
   adsp_loconf_1_fill->adsc_cluster->achc_this_name = achl1;  /* name of this WSP, UTF-8 */
   adsp_loconf_1_fill->adsc_cluster->imc_this_len_name = iml1;  /* length of name in bytes */
   m_trans_wchar_z_to_utf8( achl1, awcl_se_n_local );
   adsp_loconf_1_fill->adsc_cluster->adsc_clre = NULL;  /* clear chain */
   adsp_loconf_1_fill->adsc_cluster->adsc_clli
     = (struct dsd_cluster_listen *) (adsp_loconf_1_fill->adsc_cluster + 1);
/* to-do alignment 64-bit systems 19.09.07 KB */
   adsp_loconf_1_fill->adsc_cluster->adsc_listen_ineta
     = (struct dsd_listen_ineta_1 *)
         ((char *) (adsp_loconf_1_fill->adsc_cluster + 1)
                      + dsl_cluster_main.adsc_listen_ineta->imc_no_ineta * sizeof(struct dsd_cluster_listen));
   memcpy( adsp_loconf_1_fill->adsc_cluster->adsc_listen_ineta,
           dsl_cluster_main.adsc_listen_ineta,
           dsl_cluster_main.adsc_listen_ineta->imc_len_mem );
   free( dsl_cluster_main.adsc_listen_ineta );
   adsl_clre_w2 = (struct dsd_cluster_remote *)
                    ((char *) (adsp_loconf_1_fill->adsc_cluster + 1)
                      + adsp_loconf_1_fill->adsc_cluster->adsc_listen_ineta->imc_no_ineta * sizeof(struct dsd_cluster_listen)
                      + adsp_loconf_1_fill->adsc_cluster->adsc_listen_ineta->imc_len_mem);
   while (dsl_cluster_main.adsc_clre) {     /* loop over chain of remote entries */
     adsl_clre_w1 = dsl_cluster_main.adsc_clre;  /* get chain          */
     dsl_cluster_main.adsc_clre = dsl_cluster_main.adsc_clre->adsc_next;  /* remove this entry */
#ifdef B070917
     if (adsl_clre_w1->umc_multih_ineta == 0XFFFFFFFF) {  /* INETA is invalid */
       adsl_clre_w1->umc_multih_ineta = dsl_cluster_main.umc_multih_ineta;  /* set default */
     }
#endif
     memcpy( adsl_clre_w2, adsl_clre_w1, sizeof(struct dsd_cluster_remote) );
     achl1 -= adsl_clre_w1->imc_len_name;   /* space for name          */
     memcpy( achl1, adsl_clre_w1 + 1, adsl_clre_w1->imc_len_name );
     adsl_clre_w2->achc_name = achl1;       /* set address of name     */
     free( adsl_clre_w1 );                  /* free remote entry       */
     adsl_clre_w2->adsc_next = adsp_loconf_1_fill->adsc_cluster->adsc_clre;  /* get old chain */
     adsp_loconf_1_fill->adsc_cluster->adsc_clre = adsl_clre_w2;  /* set new chain */
     adsl_clre_w2++;                        /* next entry output       */
   }
   if (dsl_cluster_main.imc_lbal_len_formula) {  /* formula defined    */
     achl1 -= dsl_cluster_main.imc_lbal_len_formula;  /* space for formula */
     adsp_loconf_1_fill->adsc_cluster->achc_lbal_formula = achl1;  /* load-balancing-formula UTF-8 */
     m_trans_wchar_z_to_utf8( achl1, awcl_lbal_formula );
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_cluster() l%05d-T end define - adsl_clre_w2=%p achl1=%p",
                   __LINE__, adsl_clre_w2, achl1 );
#endif
   return;                                  /* cluster is defined      */

   p_cluster_88:                            /* free all what was defined before */
   while (dsl_cluster_main.adsc_clre) {     /* loop over chain of remote entries */
     adsl_clre_w1 = dsl_cluster_main.adsc_clre;  /* get chain          */
     dsl_cluster_main.adsc_clre = dsl_cluster_main.adsc_clre->adsc_next;  /* remove this entry */
     free( adsl_clre_w1->adsc_remote_ineta );  /* free INETA           */
     free( adsl_clre_w1 );                  /* free remote entry       */
   }
   return;                                  /* cluster is ignored      */
} /* end m_conf_cluster()                                              */

/** retrieve a numeric value of cluster                                */
static int m_get_cluster_entry_number( HL_WCHAR *awcp_se_name, HL_WCHAR *awcp_name, HL_WCHAR *awcp_value ) {
   int        iml_ret;                      /* return value            */

   iml_ret = m_get_wc_number( awcp_value );
   if (iml_ret < 0) {                       /* value is not numeric    */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03100W Error element cluster cluster-entry %(ux)s name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                     awcp_se_name, awcp_name, awcp_value );
     return 0;                              /* ignore value            */
   }
   if (iml_ret == 0) {                      /* value zero not allowed  */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC03101W Error element cluster cluster-entry %(ux)s name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                     awcp_se_name, awcp_name, awcp_value );
     return 0;                              /* ignore value            */
   }
   return iml_ret;                          /* return value found      */
} /* end m_get_cluster_entry_number()                                  */

/** process configuration LDAP-template                                */
static void m_conf_ldap_t( struct dsd_ldap_t_dummy *adsp_ldap_t_dummy_this,
                           struct dsd_ldap_t_dummy *adsp_ldap_t_dummy_anchor ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   int        iml_cmp;                      /* compare values          */
   char       *achl1;                       /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_te_name;           /* name of LDAP template   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
// HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_te_name;                 /* LDAP template name      */
   struct dsd_ldap_t_dummy *adsl_ldap_t_dummy_w1;  /* working-variable LDAP template */
   HL_WCHAR * awcrl_value[ DEF_XML_LDAP_TEMPL_MAX ];  /* values retrieved */
   struct dsd_ldap_template dsl_ldap_template;  /* storage LDAP template */

   adsl_node_fichi = adsp_ldap_t_dummy_this->adsc_node_ldap_t_d->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error LDAP-template has no child - ignored" );
     return;                                /* all done                */
   }
   /* search name first                                                */
   adsl_node_te_name = NULL;                /* clear name of LDAP template */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_name, "name" );
       if ((bol1) && (iml_cmp == 0)) {      /* strings are equal       */
         if (adsl_node_te_name) {           /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element LDAP-template name double - ignored" );
         } else {
           adsl_node_te_name = adsl_node_04;  /* save name             */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_te_name == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error LDAP-template has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_te_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-template name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_te_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-template name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   /* search of name double                                            */
   adsl_ldap_t_dummy_w1 = adsp_ldap_t_dummy_anchor;  /* get chain of LDAP-template entries */
   do {                                     /* loop over all LDAP-template entries */
     if (adsl_ldap_t_dummy_w1->awcc_te_name) {  /* LDAP template name set */
       bol1 = m_cmp_vx_vx( &iml_cmp,
                           awcl_te_name, -1, ied_chs_utf_16,
                           adsl_ldap_t_dummy_w1->awcc_te_name, -1, ied_chs_utf_16 );
       if ((bol1) && (iml_cmp == 0)) {      /* strings are equal       */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-template name \"%(ux)s\" already defined - double - ignored",
                         awcl_te_name );
         return;                            /* do not process this entry */
       }
     }
     adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
   } while (adsl_ldap_t_dummy_w1);
   memset( awcrl_value, 0, sizeof(awcrl_value) );  /* clear values retrieved */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (   (adsl_node_04 != adsl_node_te_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       iml1 = sizeof(achrs_node_ldap_template) / sizeof(achrs_node_ldap_template[0]);  /* number of elements */
       do {                                 /* loop over all keywords  */
         bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_name, (char *) achrs_node_ldap_template[ iml1 - 1 ] );
         if ((bol1) && (iml_cmp == 0)) {    /* strings are equal       */
           break;
         }
         iml1--;                            /* decrement index of keywords */
       } while (iml1);
       do {                                 /* pseudo-loop             */
         if (iml1 <= 0) {                   /* keyword not defined     */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-template name \"%(ux)s\" element \"%(ux)s\" not defined - ignored",
                           awcl_te_name, awcl_05_name );
           break;
         }
         if (awcrl_value[ iml1 - 1 ]) {     /* element already defined */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-template name \"%(ux)s\" element \"%(ux)s\" double - ignored",
                           awcl_te_name, awcl_05_name );
           break;
         }
         adsl_node_05 = adsl_node_04->getFirstChild();
         if (adsl_node_05 == NULL) {        /* no child found          */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-template name \"%(ux)s\" element \"%(ux)s\" has no child - ignored",
                           awcl_te_name, awcl_05_name );
           break;
         }
         do {
           if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
             awcrl_value[ iml1 - 1 ] = (HL_WCHAR *) adsl_node_05->getNodeValue();
             break;
           }
           adsl_node_05 = adsl_node_05->getNextSibling();
         } while (adsl_node_05);            /* for all siblings        */
         if (adsl_node_05 == NULL) {        /* no text found           */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-template name \"%(ux)s\" element \"%(ux)s\" no TEXT_NODE found - ignored",
                           awcl_te_name, awcl_05_name );
         }
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   memset( &dsl_ldap_template, 0, sizeof(struct dsd_ldap_template) );  /* clear storage LDAP template */
   dsl_ldap_template.imc_len_name = m_len_vx_vx( ied_chs_utf_8, awcl_te_name, -1, ied_chs_utf_16 );  /* length of name bytes */
   iml1 = sizeof(struct dsd_ldap_template) + dsl_ldap_template.imc_len_name + 1;
#ifdef B100907
   if (awcrl_value[ 0 ]) {                  /* user-attribute configured */
     dsl_ldap_template.imc_len_user_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ 0 ], -1, ied_chs_utf_16 );  /* length user-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_user_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ 1 ]) {                  /* group-attribute configured */
     dsl_ldap_template.imc_len_group_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ 1 ], -1, ied_chs_utf_16 );  /* length group-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_group_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ 2 ]) {                  /* member-attribute configured */
     dsl_ldap_template.imc_len_member_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ 2 ], -1, ied_chs_utf_16 );  /* length member-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_member_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ 3 ]) {                  /* membership-attribute configured */
     dsl_ldap_template.imc_len_mship_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ 3 ], -1, ied_chs_utf_16 );  /* length membership-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_mship_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ 4 ]) {                  /* user-prefix configured  */
     dsl_ldap_template.imc_len_upref = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ 4 ], -1, ied_chs_utf_16 );  /* length user-prefix UTF-8 */
     iml1 += dsl_ldap_template.imc_len_upref + 1;  /* add to storage needed */
   }
#endif
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_USER_ATTR - 1 ]) {  /* user-attribute configured */
     dsl_ldap_template.imc_len_user_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_USER_ATTR - 1 ], -1, ied_chs_utf_16 );  /* length user-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_user_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_GROUP_ATTR - 1 ]) {  /* group-attribute configured */
     dsl_ldap_template.imc_len_group_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_GROUP_ATTR - 1 ], -1, ied_chs_utf_16 );  /* length group-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_group_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_MEMBER_ATTR - 1 ]) {  /* member-attribute configured */
     dsl_ldap_template.imc_len_member_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_MEMBER_ATTR - 1 ], -1, ied_chs_utf_16 );  /* length member-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_member_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_MSHIP_ATTR - 1 ]) {  /* membership-attribute configured */
     dsl_ldap_template.imc_len_mship_attr = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_MSHIP_ATTR - 1 ], -1, ied_chs_utf_16 );  /* length membership-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_mship_attr + 1;  /* add to storage needed */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_SEARCH_D_A - 1 ]) {  /* search-default-attribute configured */
     dsl_ldap_template.imc_len_search_d_a = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_SEARCH_D_A - 1 ], -1, ied_chs_utf_16 );  /* length search-default-attribute UTF-8 */
     iml1 += dsl_ldap_template.imc_len_search_d_a + 1;  /* add to storage needed */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_UPREF_ATTR - 1 ]) {  /* user-prefix configured */
     dsl_ldap_template.imc_len_upref = m_len_vx_vx( ied_chs_utf_8, awcrl_value[ DEF_XML_LDAP_TEMPL_UPREF_ATTR - 1 ], -1, ied_chs_utf_16 );  /* length user-prefix UTF-8 */
     iml1 += dsl_ldap_template.imc_len_upref + 1;  /* add to storage needed */
   }
   adsp_ldap_t_dummy_this->adsc_ldap_template = (struct dsd_ldap_template *) malloc( iml1 );
   achl1 = (char *) (adsp_ldap_t_dummy_this->adsc_ldap_template + 1);
   m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_name, ied_chs_utf_8,
                awcl_te_name, -1, ied_chs_utf_16 );
   *(achl1 + dsl_ldap_template.imc_len_name) = 0;  /* make zero-terminated */
   achl1 += dsl_ldap_template.imc_len_name + 1;  /* after this entry   */
#ifdef B100907
   if (awcrl_value[ 0 ]) {                  /* user-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_user_attr, ied_chs_utf_8,
                  awcrl_value[ 0 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_user_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_user_attr = achl1;  /* address user-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_user_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ 1 ]) {                  /* group-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_group_attr, ied_chs_utf_8,
                  awcrl_value[ 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_group_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_group_attr = achl1;  /* address group-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_group_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ 2 ]) {                  /* member-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_member_attr, ied_chs_utf_8,
                  awcrl_value[ 2 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_member_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_member_attr = achl1;  /* address member-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_member_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ 3 ]) {                  /* membership-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_mship_attr, ied_chs_utf_8,
                  awcrl_value[ 3 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_mship_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_mship_attr = achl1;  /* address membership-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_mship_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ 4 ]) {                  /* user-prefix configured  */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_upref, ied_chs_utf_8,
                  awcrl_value[ 4 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_upref) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_upref = achl1;  /* address user-prefix UTF-8 */
   }
#endif
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_USER_ATTR - 1 ]) {  /* user-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_user_attr, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_USER_ATTR - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_user_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_user_attr = achl1;  /* address user-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_user_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_GROUP_ATTR - 1 ]) {  /* group-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_group_attr, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_GROUP_ATTR - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_group_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_group_attr = achl1;  /* address group-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_group_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_MEMBER_ATTR - 1 ]) {  /* member-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_member_attr, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_MEMBER_ATTR - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_member_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_member_attr = achl1;  /* address member-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_member_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_MSHIP_ATTR - 1 ]) {  /* membership-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_mship_attr, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_MSHIP_ATTR - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_mship_attr) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_mship_attr = achl1;  /* address membership-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_mship_attr + 1;  /* after this entry */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_SEARCH_D_A - 1 ]) {  /* search-default-attribute configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_search_d_a, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_SEARCH_D_A - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_search_d_a) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_search_d_a = achl1;  /* address search-default-attribute UTF-8 */
     achl1 += dsl_ldap_template.imc_len_search_d_a + 1;  /* after this entry */
   }
   if (awcrl_value[ DEF_XML_LDAP_TEMPL_UPREF_ATTR - 1 ]) {  /* user-prefix configured */
     m_cpy_vx_vx( achl1, dsl_ldap_template.imc_len_upref, ied_chs_utf_8,
                  awcrl_value[ DEF_XML_LDAP_TEMPL_UPREF_ATTR - 1 ], -1, ied_chs_utf_16 );
     *(achl1 + dsl_ldap_template.imc_len_upref) = 0;  /* make zero-terminated */
     dsl_ldap_template.achc_upref = achl1;  /* address user-prefix UTF-8 */
   }
   memcpy( adsp_ldap_t_dummy_this->adsc_ldap_template, &dsl_ldap_template, sizeof(struct dsd_ldap_template) );
   adsp_ldap_t_dummy_this->awcc_te_name = awcl_te_name;  /* set name - is valid now */
} /* end m_conf_ldap_t()                                               */

/** process configuration LDAP-service                                 */
static void m_conf_ldap_s( DOMNode *adsp_node_ldap_s,
                           struct dsd_loconf_1 *adsp_loconf_1_fill,
                           struct dsd_ldap_t_dummy *adsp_ldap_t_dummy_anchor ) {
   int        iml1, iml2;                   /* working variables       */
   BOOL       bol1, bol2;                   /* working variables       */
   DWORD      dwl_error;                    /* return errors           */
   char       *achl1;                       /* working variable        */
   int        *aiml_val;                    /* address of value        */
   HL_WCHAR ** aawcl_val;                   /* address of value        */
   int        iml_e_05;                     /* entry on stage 5        */
   int        iml_trace_level;              /* LDAP service trace-level */
   BOOL       bol_def_global_directory;     /* parameter global directory is defined */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_ldapent;           /* node LDAP-entry         */
   DOMNode    *adsl_node_ldape_n;           /* node LDAP-entry name    */
   DOMNode    *adsl_node_se_name;           /* name of LDAP service    */
   HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
// HL_WCHAR * awcl_05_value;
   HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_se_name;                 /* LDAP service name       */
   HL_WCHAR * awcl_se_comment;              /* LDAP service comment    */
   HL_WCHAR * awcl_ldape_name;              /* LDAP entry name         */
   HL_WCHAR * awcl_ldape_comm;              /* LDAP entry comment      */
   HL_WCHAR * awcl_ldape_dn;                /* LDAP entry dn           */
   HL_WCHAR * awcl_ldape_pwd;               /* LDAP entry password     */
   HL_WCHAR * awcl_ldape_base_dn;           /* LDAP entry base-dn      */
#ifdef B100907
   HL_WCHAR * awcl_ldape_search_d_a;        /* LDAP entry search-default-attribute */
#endif
   HL_WCHAR * awcl_ldape_server_ineta;      /* LDAP entry server INETA */
   HL_WCHAR * awcl_ldape_template;          /* LDAP entry template     */
   HL_WCHAR * awcl_ldape_ssl_fconfig;       /* <SSL-config-file>       */
   HL_WCHAR * awcl_ldape_ssl_fcertdb;       /* <SSL-certdb-file>       */
   HL_WCHAR * awcl_ldape_ssl_password;      /* <SSL-password-file>     */
   struct dsd_ldap_group *adsl_ldap_gr_w1;  /* working variable LDAP group */
   struct dsd_ldap_entry *adsl_ldap_e_anchor;  /* anchor of chain LDAP entries */
   struct dsd_ldap_entry *adsl_ldap_e_w1;   /* working variable LDAP entry */
   struct dsd_ldap_entry *adsl_ldap_e_w2;   /* working variable LDAP entry */
   struct dsd_ldap_entry *adsl_ldap_e_w3;   /* working variable LDAP entry */
   struct dsd_ldap_entry dsl_ldap_entry;    /* definition LDAP entry   */
   struct dsd_ldap_t_dummy *adsl_ldap_t_dummy_w1;  /* working variable LDAP template dummy */
   char       *achl_ssl_fconfig;            /* SSL-config-file         */
   unsigned int uml_len_ssl_fconfig;        /* len name SSL-config-file */
   char       *achl_ssl_fcertdb;            /* SSL-certdb-file         */
   unsigned int uml_len_ssl_fcertdb;        /* len name SSL-certdb-file */
   char       *achl_ssl_password;           /* SSL-password-file       */
   unsigned int uml_len_ssl_password;       /* len name SSL-password-file */
   class dsd_file_read_1 dsl_file_read_1;   /* class read input file   */

   adsl_node_fichi = adsp_node_ldap_s->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error LDAP-service has no child - ignored" );
     return;                                /* all done                */
   }
   /* search name first                                                */
   adsl_node_se_name = NULL;                /* clear name of LDAP service */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_se_name) {           /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element LDAP-service name double - ignored" );
         } else {
           adsl_node_se_name = adsl_node_04;  /* save name             */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_se_name == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error LDAP-service has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_se_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_ldap_gr_w1 = adsp_loconf_1_fill->adsc_ldap_group;  /* get chain of LDAP groups */
   while (adsl_ldap_gr_w1) {                /* loop over already defined LDAP groups */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_se_name, -1, ied_chs_utf_16,
                         adsl_ldap_gr_w1 + 1, adsl_ldap_gr_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s already defined - ignored",
                       awcl_se_name );
       return;                              /* do not process this entry */
     }
     adsl_ldap_gr_w1 = adsl_ldap_gr_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_ldap_s() l%05d-T LDAP-service name %(ux)s",
                   __LINE__, awcl_se_name );
#endif
   awcl_se_comment = NULL;                  /* clear LDAP service comment */
   iml_trace_level = -1;                    /* LDAP service trace-level */
   adsl_ldap_e_anchor = NULL;               /* clear anchor of chain LDAP entries */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */

   p_ldap_s_20:                             /* node found - check what it contains */
   if (adsl_node_04 == adsl_node_se_name) {  /* name already processed */
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   if (adsl_node_04->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   awcl_04_name = (HL_WCHAR *) adsl_node_04->getNodeName();
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_ldap_s() l%05d-T node found %(ux)s", __LINE__, awcl_04_name );
#endif
   bol1 = m_cmp_u16z_u8z( &iml1, awcl_04_name, "LDAP-entry" );
   if ((bol1) && (iml1 == 0)) {             /* strings are equal       */
     goto p_ldap_s_28;                      /* LDAP-entry found        */
   }
   bol1 = m_cmp_u16z_u8z( &iml1, awcl_04_name, "comment" );
   if ((bol1) && (iml1 == 0)) {             /* strings are equal       */
     goto p_ldap_s_24;                      /* comment found           */
   }
   bol1 = m_cmp_u16z_u8z( &iml1, awcl_04_name, "trace-level" );
   if ((bol1 == FALSE) || iml1) {           /* strings are not equal   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s invalid node found \"%(ux)s\" - ignored",
                     awcl_se_name, awcl_04_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   if (iml_trace_level >= 0) {              /* LDAP service trace-level already set */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s node found \"trace-level\" but already defined - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"trace-level\" has no child - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"trace-level\" no TEXT_NODE found - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   iml_trace_level = m_get_wc_number( awcl_06_value );
   if (iml_trace_level < 0) {               /* value is not numeric    */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"trace-level\" value \"%(ux)s\" not numeric - ignored",
                     awcl_se_name, awcl_06_value );
   }
   goto p_ldap_s_80;                        /* get next node on stage 4 */

   p_ldap_s_24:                             /* comment found           */
   if (awcl_se_comment) {                   /* LDAP service comment already set */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s node found \"comment\" but already defined - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"comment\" has no child - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
#ifdef B130221
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_comment = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
#else
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_comment = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
#endif
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"comment\" no TEXT_NODE found - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   goto p_ldap_s_80;                        /* get next node on stage 4 */

   p_ldap_s_28:                             /* LDAP-entry found        */
   adsl_node_ldapent = adsl_node_04->getFirstChild();
   if (adsl_node_ldapent == NULL) {         /* child not found         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error LDAP-service %(ux)s has no child - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }

   /* search name and type first                                       */
   adsl_node_ldape_n = NULL;                /* nothing found yet       */
   adsl_node_05 = adsl_node_ldapent;        /* get first node          */
   do {
     if (adsl_node_05->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_05->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_ldape_n) {           /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element LDAP-service %(ux)s name double - ignored",
                           awcl_se_name );
         } else {
           adsl_node_ldape_n = adsl_node_05;  /* save name             */
         }
       }
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);
   if (adsl_node_ldape_n == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element LDAP-service %(ux)s has no name - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_06 = adsl_node_ldape_n->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"name\" has no child - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_ldape_name = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s name \"name\" no TEXT_NODE found - ignored",
                     awcl_se_name );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   adsl_ldap_e_w1 = adsl_ldap_e_anchor;     /* get chain of LDAP entries */
   while (adsl_ldap_e_w1) {                 /* loop over already defined LDAP entries */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_ldape_name, -1, ied_chs_utf_16,
                         adsl_ldap_e_w1 + 1, adsl_ldap_e_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s  LDAP-entry name %(ux) already defined - ignored",
                       awcl_se_name, awcl_ldape_name );
       goto p_ldap_s_80;                    /* get next node on stage 4 */
     }
     adsl_ldap_e_w1 = adsl_ldap_e_w1->adsc_next;  /* get next in chain */
   }
   /* set new chain           */
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_ldap_s() l%05d-T LDAP-service name %(ux)s LDAP-entry name %(ux)s",
                   __LINE__, awcl_se_name, awcl_ldape_name );
#endif
   memset( &dsl_ldap_entry, 0, sizeof(struct dsd_ldap_entry) );  /* clear definition LDAP entry   */
#ifdef B070917
   dsl_ldap_entry.umc_multih_ineta = 0XFFFFFFFF;
#endif
   bol_def_global_directory = FALSE;        /* reset parameter global directory is defined */
   awcl_ldape_comm = NULL;                  /* clear LDAP entry comment */
   awcl_ldape_dn = NULL;                    /* clear LDAP entry dn     */
   awcl_ldape_pwd = NULL;                   /* clear LDAP entry password */
   awcl_ldape_base_dn = NULL;               /* clear LDAP entry base-dn */
#ifdef B100907
   awcl_ldape_search_d_a = NULL;            /* clear LDAP entry search-default-attribute */
#endif
   awcl_ldape_server_ineta = NULL;          /* clear LDAP entry server INETA */
   awcl_ldape_template = NULL;              /* clear LDAP entry template */
   awcl_ldape_ssl_fconfig = NULL;           /* clear <SSL-config-file> */
   awcl_ldape_ssl_fcertdb = NULL;           /* clear <SSL-certdb-file> */
   awcl_ldape_ssl_password = NULL;          /* clear <SSL-password-file> */
   adsl_node_05 = adsl_node_ldapent;        /* get first node          */

   p_ldap_s_40:                             /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   if (adsl_node_05 == adsl_node_ldape_n) {  /* name already processed */
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   awcl_05_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_ldap_entry) / sizeof(achrs_node_ldap_entry[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s invalid node found \"%(ux)s\" - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, (char *) achrs_node_ldap_entry[ iml_e_05 ] );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s LDAP-entry %(ux)s name \"%(ux)s\" has no child - ignored",
                     awcl_se_name, awcl_ldape_name, awcl_05_name );
     goto p_ldap_s_60;                     /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s LDAP-entry %(ux)s name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_se_name, awcl_ldape_name, awcl_05_name );
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   aiml_val = NULL;                         /* clear address of value  */
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_05) {                      /* switch keyword found    */
     case (DEF_XML_LDAP_ENT_COMMENT - 1):
       aawcl_val = &awcl_ldape_comm;        /* LDAP entry comment      */
       break;
     case (DEF_XML_LDAP_ENT_BASE_DN - 1):
       aawcl_val = &awcl_ldape_base_dn;     /* LDAP entry base-dn      */
       break;
//   case (DEF_XML_LDAP_ENT_SERVER_INETA - 1):
//     break;
     case (DEF_XML_LDAP_ENT_SERVER_PORT - 1):
       aiml_val = &dsl_ldap_entry.imc_port;  /* Port TCP LDAP-Server   */
       break;
//   case (DEF_XML_LDAP_ENT_GATE_OUT_I - 1):
//     break;
     case (DEF_XML_LDAP_ENT_WAIT_CONNECT - 1):
       aiml_val = &dsl_ldap_entry.imc_timeout_conn;  /* timeout connect seconds */
       break;
     case (DEF_XML_LDAP_ENT_SEARCH_N_G_L - 1):
       aiml_val = &dsl_ldap_entry.imc_search_nested_groups_level;  /* how deep to search in nested groups */
       break;
     case (DEF_XML_LDAP_ENT_GLOBAL_DIR - 1):
       if (bol_def_global_directory) {      /* parameter global directory is defined */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                         awcl_se_name, awcl_ldape_name, awcl_05_name );
         goto p_ldap_s_60;                  /* get next node on stage 5 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_value, "YES" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         dsl_ldap_entry.boc_global_directory = TRUE;  /* is global directory */
         bol_def_global_directory = TRUE;   /* parameter global directory is defined */
         goto p_ldap_s_60;                  /* get next node on stage 5 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_value, "NO" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         dsl_ldap_entry.boc_global_directory = FALSE;  /* is not global directory */
         bol_def_global_directory = TRUE;   /* parameter global directory is defined */
         goto p_ldap_s_60;                  /* get next node on stage 5 */
       }
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" value \"%(ux)s\" neither \"YES\" nor \"NO\" - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     case (DEF_XML_LDAP_ENT_TIMEOUT_S - 1):
       aiml_val = &dsl_ldap_entry.imc_timeout_search;  /* timeout search seconds */
       break;
     case (DEF_XML_LDAP_ENT_RETRY_AFTER_E - 1):
       aiml_val = &dsl_ldap_entry.imc_retry_after_error;  /* time retry after error seconds */
       break;
     case (DEF_XML_LDAP_ENT_SEARCH_B_S - 1):
       aiml_val = &dsl_ldap_entry.imc_search_buf_size;  /* default search buffer size */
       break;
     case (DEF_XML_LDAP_ENT_MAX_SESSION - 1):
       aiml_val = &dsl_ldap_entry.imc_conf_max_session;  /* maximum parallel session (TCP) */
       break;
     case (DEF_XML_LDAP_ENT_DN - 1):
       aawcl_val = &awcl_ldape_dn;          /* LDAP entry dn           */
       break;
     case (DEF_XML_LDAP_ENT_PASSWORD - 1):
       aawcl_val = &awcl_ldape_pwd;         /* LDAP entry password     */
       break;
#ifdef B100907
     case (DEF_XML_LDAP_ENT_SEARCH_D_A - 1):
       aawcl_val = &awcl_ldape_search_d_a;  /* LDAP entry search-default-attribute */
       break;
#endif
     case (DEF_XML_LDAP_ENT_TEMPLATE - 1):
       aawcl_val = &awcl_ldape_template;    /* LDAP entry template     */
       break;
     case (DEF_XML_LDAP_ENT_SSL_CONFFI - 1):
       aawcl_val = &awcl_ldape_ssl_fconfig;  /* <SSL-config-file>      */
       break;
     case (DEF_XML_LDAP_ENT_SSL_CEDBFI - 1):
       aawcl_val = &awcl_ldape_ssl_fcertdb;  /* <SSL-certdb-file>      */
       break;
     case (DEF_XML_LDAP_ENT_SSL_PAWOFI - 1):
       aawcl_val = &awcl_ldape_ssl_password;  /* <SSL-password-file>   */
       break;
   }
   if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     *aawcl_val = awcl_06_value;            /* save value found        */
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     if (iml_e_05 == (DEF_XML_LDAP_ENT_SERVER_PORT - 1)) {
       *aiml_val = m_get_port_no( awcl_06_value, -1, ied_chs_utf_16 );
     } else {
       *aiml_val = m_get_wc_number( awcl_06_value );
     }
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s LDAP-entry %(ux)s name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s LDAP-entry %(ux)s name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   if (iml_e_05 == (DEF_XML_LDAP_ENT_SERVER_INETA - 1)) {
#ifdef B070917
     if (dsl_ldap_entry.adsc_server_ineta) {  /* already defined       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     achl1 = XMLString::transcode( (XMLCh *) awcl_06_value );
     dsl_ldap_entry.adsc_server_ineta = m_get_ineta_multi( achl1 );
     XMLString::release( &achl1 );          /* free INETA again        */
     if (dsl_ldap_entry.adsc_server_ineta == NULL) {  /* INETA not valid */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
     }
#endif
     if (awcl_ldape_server_ineta) {         /* already defined       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     awcl_ldape_server_ineta = awcl_06_value;
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   if (iml_e_05 == (DEF_XML_LDAP_ENT_GATE_OUT_I - 1)) {
     if (dsl_ldap_entry.dsc_bind_multih.boc_bind_needed) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     iml1 = m_build_bind_ineta( &dsl_ldap_entry.dsc_bind_multih, awcl_06_value, -1, ied_chs_utf_16 );
     if (iml1) {                            /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
     }
#ifdef B070917
     if (dsl_ldap_entry.umc_multih_ineta != 0XFFFFFFFF) {  /* already defined */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name );
       goto p_ldap_s_60;                    /* get next node on stage 5 */
     }
     achl1 = XMLString::transcode( (XMLCh *) awcl_06_value );
     dsl_ldap_entry.umc_multih_ineta = m_get_ineta_single( achl1 );
     XMLString::release( &achl1 );          /* free ineta again        */
     if (dsl_ldap_entry.umc_multih_ineta == 0XFFFFFFFF) {  /* invalid IP-address */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                       awcl_se_name, awcl_ldape_name, awcl_05_name, awcl_06_value );
     }
#endif
     goto p_ldap_s_60;                      /* get next node on stage 5 */
   }
   /* program should never get here                                    */

   p_ldap_s_60:                             /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_ldap_s_40;      /* node found - check what it contains */
   bol1 = TRUE;                             /* LDAP entry still valid  */
   if (awcl_ldape_server_ineta == NULL) {   /* INETA not defined       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"serverineta\" not defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name );
     bol1 = FALSE;                          /* LDAP entry not valid    */
   }
   if (dsl_ldap_entry.imc_port == 0) {      /* no port defined         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"serverport\" not defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name );
     bol1 = FALSE;                          /* LDAP entry not valid    */
   }
   if (awcl_ldape_dn == NULL) {             /* no LDAP entry dn defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"dn\" not defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name );
     bol1 = FALSE;                          /* LDAP entry not valid    */
   }
   if (awcl_ldape_pwd == NULL) {            /* no LDAP entry password defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"password\" not defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name );
     bol1 = FALSE;                          /* LDAP entry not valid    */
   }
   if (awcl_ldape_template == NULL) {       /* no LDAP entry template defined */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"LDAP-template\" not defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name );
     bol1 = FALSE;                          /* LDAP entry not valid    */
   } else {                                 /* search LDAP template    */
     adsl_ldap_t_dummy_w1 = adsp_ldap_t_dummy_anchor;  /* get chain of LDAP template dummies */
     while (adsl_ldap_t_dummy_w1) {         /* loop over all LDAP template dummies */
       if (adsl_ldap_t_dummy_w1->awcc_te_name) {  /* entry is valid    */
         bol2 = m_cmp_vx_vx( &iml1,
                             awcl_ldape_template, -1, ied_chs_utf_16,
                             adsl_ldap_t_dummy_w1->awcc_te_name, -1, ied_chs_utf_16 );
         if ((bol2) && (iml1 == 0)) {       /* LDAP template found     */
           dsl_ldap_entry.adsc_ldap_template = adsl_ldap_t_dummy_w1->adsc_ldap_template;  /* template defined */
           adsl_ldap_t_dummy_w1->boc_referenced = TRUE;  /* entry is referenced */
           break;
         }
       }
       adsl_ldap_t_dummy_w1 = adsl_ldap_t_dummy_w1->adsc_next;  /* get next in chain */
     }
     if (adsl_ldap_t_dummy_w1 == NULL) {    /* LDAP template not found */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node \"LDAP-template\" value \"%(ux)s\" not defined - LDAP-entry ignored",
                       awcl_se_name, awcl_ldape_name, awcl_ldape_template );
       bol1 = FALSE;                        /* LDAP entry not valid    */
     }
   }
   if (bol1 == FALSE) {                     /* LDAP entry not valid    */
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   dsl_ldap_entry.adsc_server_ineta = m_get_target_ineta( awcl_ldape_server_ineta, -1, ied_chs_utf_16,
                                                          &dsl_ldap_entry.dsc_bind_multih );
   if (dsl_ldap_entry.adsc_server_ineta == NULL) {  /* INETA not valid */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s node serverineta \"%(ux)s\" not valid - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name, awcl_ldape_server_ineta );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   iml1 = 0;                                /* clear count entries     */
   if (awcl_ldape_ssl_fconfig) iml1++;      /* count <SSL-config-file> */
   if (awcl_ldape_ssl_fcertdb) iml1++;      /* count <SSL-certdb-file> */
   if (awcl_ldape_ssl_password) iml1++;     /* count <SSL-password-file> */
   if (iml1 == 0) goto p_ldap_s_68;         /* LDAP entry is valid     */
   if (iml1 != 3) {                         /* not all SSL parameters set */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s only part of SSL parameters (%d of 3) defined - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name, iml1 );
     free( dsl_ldap_entry.adsc_server_ineta );  /* free INETA again    */
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   bol1 = dsl_file_read_1.m_readfile( awcl_ldape_ssl_fconfig,
                                      &achl_ssl_fconfig,
                                      &uml_len_ssl_fconfig,
                                      &dwl_error );
   if (bol1 == FALSE) {                     /* no file loaded          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s SSL-config-file \"%(ux)s\" read Error %d - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name,
                     awcl_ldape_ssl_fconfig, dwl_error );
     free( dsl_ldap_entry.adsc_server_ineta );  /* free INETA again    */
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   bol1 = dsl_file_read_1.m_readfile( awcl_ldape_ssl_fcertdb,
                                      &achl_ssl_fcertdb,
                                      &uml_len_ssl_fcertdb,
                                      &dwl_error );
   if (bol1 == FALSE) {                     /* no file loaded          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s SSL-certdb-file \"%(ux)s\" read Error %d - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name,
                     awcl_ldape_ssl_fcertdb, dwl_error );
     free( dsl_ldap_entry.adsc_server_ineta );  /* free INETA again    */
     free( achl_ssl_fconfig );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   bol1 = dsl_file_read_1.m_readfile( awcl_ldape_ssl_password,
                                      &achl_ssl_password,
                                      &uml_len_ssl_password,
                                      &dwl_error );
   if (bol1 == FALSE) {                     /* no file loaded          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s SSL-password-file \"%(ux)s\" read Error %d - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name,
                     awcl_ldape_ssl_password, dwl_error );
     free( dsl_ldap_entry.adsc_server_ineta );  /* free INETA again    */
     free( achl_ssl_fconfig );
     free( achl_ssl_fcertdb );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   bol1 = FALSE;                            /* no external random generator */
#ifdef HL_UNIX
   if (adsp_loconf_1_fill->achc_ext_random_g_domain_socket_name) {  /* external Random Generator */
     bol1 = TRUE;                           /* use external random generator */
   }
#endif
   iml1 = m_cl_registerconfig( achl_ssl_fconfig, uml_len_ssl_fconfig,
                               achl_ssl_fcertdb, uml_len_ssl_fcertdb,
                               achl_ssl_password, uml_len_ssl_password,
                               TRUE,
                               adsp_loconf_1_fill->adsc_hl_ocsp_d_1,  /* OCSP */
                               &m_cdaux,    /* subroutine              */
                               NULL,        /* vpp_userfld             */
                               &dsl_ldap_entry.vpc_csssl_config_id,  /* address config id */
                               bol1 );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "l%05d m_conf_ldap_s check returned SSL / ireturn = %d",
                   __LINE__, iml1 );
#endif
   if (iml1) {
     bol1 = m_rerrm1( iml1, &achl1, &iml2, chrg_ssl_error );
     if (bol1 == FALSE) {                 /* subroutine failed       */
       achl1 = "error-message not available";
       iml2 = strlen( achl1 );
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error LDAP-service %(ux)s LDAP-entry %(ux)s SSL Error %d %.*s - LDAP-entry ignored",
                     awcl_se_name, awcl_ldape_name, iml1, iml2, achl1 );
     free( dsl_ldap_entry.adsc_server_ineta );  /* free INETA again    */
     free( achl_ssl_fconfig );
     free( achl_ssl_fcertdb );
     free( achl_ssl_password );
     goto p_ldap_s_80;                      /* get next node on stage 4 */
   }
   dsl_ldap_entry.boc_csssl_conf = TRUE;    /* LDAP Client Side SSL configured */
   free( achl_ssl_fconfig );
   free( achl_ssl_fcertdb );
   free( achl_ssl_password );
#ifdef XYZ1
   char       *achl_ssl_fconfig;            /* SSL-config-file         */
   unsigned int uml_len_ssl_fconfig;        /* len name SSL-config-file */
   char       *achl_ssl_fcertdb;            /* SSL-certdb-file         */
   unsigned int uml_len_ssl_fcertdb;        /* len name SSL-certdb-file */
   char       *achl_ssl_password;           /* SSL-password-file       */
   unsigned int uml_len_ssl_password;       /* len name SSL-password-file */
#endif

   p_ldap_s_68:                             /* LDAP entry is valid     */
#ifdef B070917
   if (dsl_ldap_entry.umc_multih_ineta == 0XFFFFFFFF) {
     dsl_ldap_entry.umc_multih_ineta = 0;
   }
#endif
   dsl_ldap_entry.imc_len_name = m_count_wchar_z_to_utf8( awcl_ldape_name );
   dsl_ldap_entry.imc_len_userid = m_count_wchar_z_to_utf8( awcl_ldape_dn );
   dsl_ldap_entry.imc_len_password = m_count_wchar_z_to_utf8( awcl_ldape_pwd );
   if (awcl_ldape_base_dn) {                /* LDAP entry base-dn      */
     dsl_ldap_entry.imc_len_base_dn = m_count_wchar_z_to_utf8( awcl_ldape_base_dn );  /* length of base-dn bytes */
   }
#ifdef B100907
   if (awcl_ldape_search_d_a) {             /* LDAP entry search-default-attribute */
     dsl_ldap_entry.imc_len_search_d_a = m_count_wchar_z_to_utf8( awcl_ldape_search_d_a );  /* length of search-default-attribute bytes */
   }
#endif
   if (awcl_ldape_comm) dsl_ldap_entry.imc_len_comment = m_count_wchar_z_to_utf8( awcl_ldape_comm );
   iml1 = sizeof(struct dsd_ldap_entry)
          + dsl_ldap_entry.imc_len_name
          + dsl_ldap_entry.imc_len_userid
          + dsl_ldap_entry.imc_len_password
          + dsl_ldap_entry.imc_len_base_dn  /* length of base-dn bytes */
#ifdef B100907
          + dsl_ldap_entry.imc_len_search_d_a
#endif
          + dsl_ldap_entry.imc_len_comment;
   adsl_ldap_e_w1 = (struct dsd_ldap_entry *) malloc( iml1 );
   memcpy( adsl_ldap_e_w1, &dsl_ldap_entry, sizeof(struct dsd_ldap_entry) );
   achl1 = (char *) adsl_ldap_e_w1 + iml1;
   if (awcl_ldape_comm) {                   /* comment defined         */
     achl1 -= adsl_ldap_e_w1->imc_len_comment;
     m_trans_wchar_z_to_utf8( achl1, awcl_ldape_comm );
     adsl_ldap_e_w1->achc_comment = achl1;
   }
#ifdef B100907
   if (awcl_ldape_search_d_a) {             /* LDAP entry search-default-attribute */
     achl1 -= dsl_ldap_entry.imc_len_search_d_a;
     m_trans_wchar_z_to_utf8( achl1, awcl_ldape_search_d_a );
     adsl_ldap_e_w1->achc_search_d_a = achl1;  /* search-default-attribute UTF-8 */
   }
#endif
   if (awcl_ldape_base_dn) {                /* LDAP entry base-dn      */
     achl1 -= dsl_ldap_entry.imc_len_base_dn;
     m_trans_wchar_z_to_utf8( achl1, awcl_ldape_base_dn );
     adsl_ldap_e_w1->achc_base_dn = achl1;  /* base-dn UTF-8           */
   }
   achl1 -= adsl_ldap_e_w1->imc_len_password;
   m_trans_wchar_z_to_utf8( achl1, awcl_ldape_pwd );
   adsl_ldap_e_w1->achc_password = achl1;
   achl1 -= adsl_ldap_e_w1->imc_len_userid;
   m_trans_wchar_z_to_utf8( achl1, awcl_ldape_dn );
   adsl_ldap_e_w1->achc_userid = achl1;
   achl1 -= adsl_ldap_e_w1->imc_len_name;
   m_trans_wchar_z_to_utf8( achl1, awcl_ldape_name );
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_ldap_s() l%05d-T end define - (adsl_ldap_e_w1 + 1)=%p achl1=%p",
                   __LINE__, adsl_ldap_e_w1 + 1, achl1 );
#endif
   adsl_ldap_e_w1->adsc_next = adsl_ldap_e_anchor;  /* get old chain   */
   adsl_ldap_e_anchor = adsl_ldap_e_w1;     /* set new chain           */

   p_ldap_s_80:                             /* get next node on stage 4 */
   adsl_node_04 = adsl_node_04->getNextSibling();
   if (adsl_node_04) goto p_ldap_s_20;      /* node found - check what it contains */
   if (adsl_ldap_e_anchor == NULL) {        /* no LDAP entry defined   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element LDAP-service %(ux)s no LDAP-entries defined - ignored",
                     awcl_se_name );
     return;                                /* this entry is not valid */
   }
#ifdef B120220
   dsl_ldap_entry.imc_len_password = m_count_wchar_z_to_utf8( awcl_ldape_pwd );
   if (awcl_ldape_comm) dsl_ldap_entry.imc_len_comment = m_count_wchar_z_to_utf8( awcl_ldape_comm );
#endif
   iml1 = 0;                                /* clear length            */
   if (awcl_se_comment) {                   /* LDAP service comment set */
     iml1 = m_count_wchar_z_to_utf8( awcl_se_comment );
   }
   iml1 += sizeof(struct dsd_ldap_group)
           + m_count_wchar_z_to_utf8( awcl_se_name )
           + sizeof(void *) - 1;
   iml1 &= 0 - sizeof(void *);              /* make length aligned     */
   adsl_ldap_e_w1 = adsl_ldap_e_anchor;     /* get chain of LDAP entries */
   while (adsl_ldap_e_w1) {                 /* loop over already defined LDAP entries */
     iml1 += sizeof(struct dsd_ldap_entry)
             + adsl_ldap_e_w1->imc_len_name
             + adsl_ldap_e_w1->imc_len_userid
             + adsl_ldap_e_w1->imc_len_password
             + adsl_ldap_e_w1->imc_len_base_dn  /* length of base-dn bytes */
#ifdef B100907
             + adsl_ldap_e_w1->imc_len_search_d_a
#endif
             + adsl_ldap_e_w1->imc_len_comment
             + sizeof(void *) - 1;
     iml1 &= 0 - sizeof(void *);            /* make length aligned     */
     adsl_ldap_e_w1 = adsl_ldap_e_w1->adsc_next;  /* get next in chain */
   }
   adsl_ldap_gr_w1 = (struct dsd_ldap_group *) malloc( iml1 );
   memset( adsl_ldap_gr_w1, 0, sizeof(struct dsd_ldap_group) );
   adsl_ldap_gr_w1->imc_len_name = m_count_wchar_z_to_utf8( awcl_se_name );
   m_trans_wchar_z_to_utf8( (char *) (adsl_ldap_gr_w1 + 1), awcl_se_name );
   if (awcl_se_comment) {                   /* LDAP service comment set */
     adsl_ldap_gr_w1->imc_len_comment = m_count_wchar_z_to_utf8( awcl_se_comment );
     m_trans_wchar_z_to_utf8( (char *) (adsl_ldap_gr_w1 + 1) + adsl_ldap_gr_w1->imc_len_name,
                              awcl_se_comment );
   }
   if (iml_trace_level < 0) iml_trace_level = 0;  /* set default value */
   adsl_ldap_gr_w1->imc_trace_level = iml_trace_level;  /* LDAP service trace-level */
   adsl_ldap_e_w2 = (struct dsd_ldap_entry *)
                      ((char *) (adsl_ldap_gr_w1 + 1)
                       + ((adsl_ldap_gr_w1->imc_len_name + adsl_ldap_gr_w1->imc_len_comment + sizeof(void *) - 1)
                          & (0 - sizeof(void *))));
   adsl_ldap_e_w3 = NULL;                   /* last of chain           */
   while (adsl_ldap_e_anchor) {             /* loop over already defined LDAP entries */
     adsl_ldap_e_w1 = adsl_ldap_e_anchor;   /* save this entry         */
     iml1 = sizeof(struct dsd_ldap_entry)
            + adsl_ldap_e_w1->imc_len_name
            + adsl_ldap_e_w1->imc_len_userid
            + adsl_ldap_e_w1->imc_len_password
            + adsl_ldap_e_w1->imc_len_base_dn  /* length of base-dn bytes */
#ifdef B100907
            + adsl_ldap_e_w1->imc_len_search_d_a
#endif
            + adsl_ldap_e_w1->imc_len_comment;
     memcpy( adsl_ldap_e_w2, adsl_ldap_e_w1, iml1 );  /* copy all fields */
     adsl_ldap_e_w2->adsc_next = adsl_ldap_e_w3;  /* get chain         */
#ifdef XYZ1
     achl1 = (char *) adsl_ldap_e_w2 + adsl_ldap_e_w2->imc_len_name;  /* here start fields, after name */
     if (adsl_ldap_e_w2->imc_len_userid) {  /* length of Userid bytes  */
       adsl_ldap_e_w2->achc_userid = achl1;  /* Userid Administrator UTF-8 */
       achl1 += adsl_ldap_e_w2->imc_len_userid;  /* after Userid       */
     }
     if (adsl_ldap_e_w2->imc_len_password) {  /* length of Password bytes */
       adsl_ldap_e_w2->achc_password = achl1;  /* Password Administrator UTF-8 */
       achl1 += adsl_ldap_e_w2->imc_len_password;  /* after Password   */
     }
     if (adsl_ldap_e_w2->imc_len_comment) {  /* length of Comment bytes */
       adsl_ldap_e_w2->achc_comment = achl1;  /* Comment UTF-8         */
//     achl1 += adsl_ldap_e_w2->imc_len_comment;  /* after Comment     */
     }
#endif
     achl1 = (char *) adsl_ldap_e_w2 + iml1;
     if (adsl_ldap_e_w1->imc_len_comment) {
       achl1 -= adsl_ldap_e_w1->imc_len_comment;
       adsl_ldap_e_w2->achc_comment = achl1;
     }
#ifdef B100907
     if (adsl_ldap_e_w1->imc_len_search_d_a) {
       achl1 -= adsl_ldap_e_w1->imc_len_search_d_a;
       adsl_ldap_e_w2->achc_search_d_a = achl1;  /* search-default-attribute UTF-8 */
     }
#endif
     if (adsl_ldap_e_w1->imc_len_base_dn) {  /* length of base-dn bytes */
       achl1 -= adsl_ldap_e_w1->imc_len_base_dn;
       adsl_ldap_e_w2->achc_base_dn = achl1;  /* base-dn UTF-8         */
     }
     achl1 -= adsl_ldap_e_w1->imc_len_password;
     adsl_ldap_e_w2->achc_password = achl1;
     achl1 -= adsl_ldap_e_w1->imc_len_userid;
     adsl_ldap_e_w2->achc_userid = achl1;
     adsl_ldap_e_w3 = adsl_ldap_e_w2;       /* save last of chain      */
     iml1 += sizeof(void *) - 1;
     iml1 &= 0 - sizeof(void *);            /* make length aligned     */
     adsl_ldap_e_w2 = (struct dsd_ldap_entry *)
                        ((char *) adsl_ldap_e_w2 + iml1);
     adsl_ldap_e_anchor = adsl_ldap_e_anchor->adsc_next;  /* remove entry from chain */
     free( adsl_ldap_e_w1 );                /* free temporary entry    */
   }
   adsl_ldap_gr_w1->adsc_ldap_entry = adsl_ldap_e_w3;  /* chain of LDAP entries */
   adsl_ldap_gr_w1->adsc_next = adsp_loconf_1_fill->adsc_ldap_group;  /* get chain of LDAP groups */
   adsp_loconf_1_fill->adsc_ldap_group = adsl_ldap_gr_w1;  /* set new chain of LDAP groups */
   return;                                  /* LDAP group is defined   */
} /* end m_conf_ldap_s                                                 */

/** process configuration service                                      */
static void m_conf_service( DOMNode *adsp_node_service, struct dsd_loconf_1 *adsp_loconf_1_fill ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   int        iml_keyw_01;                  /* search keyword          */
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_se_name;           /* name of service         */
   DOMNode    *adsl_node_se_type;           /* type of service         */
   HL_WCHAR * awcl_se_name;                 /* service entry name      */
   HL_WCHAR * awcl_se_type;                 /* service entry type      */
   HL_WCHAR * awcl_05_name;
   struct dsd_service_conf_1 *adsl_service_conf_1_w1;  /* service configuration */

   adsl_node_fichi = adsp_node_service->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error service has no child - ignored" );
     return;                                /* all done                */
   }
   /* search name and type first                                       */
   adsl_node_se_name = NULL;                /* clear name of service   */
   adsl_node_se_type = NULL;                /* clear type of service   */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     while (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_se_name) {           /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element service name double - ignored" );
         } else {
           adsl_node_se_name = adsl_node_04;  /* save name             */
         }
         break;
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "type" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_se_type) {           /* type already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element service type double - ignored" );
         } else {
           adsl_node_se_type = adsl_node_04;  /* save type             */
         }
         break;
       }
       break;
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_se_name == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error service has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_se_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element service name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element service name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve type                                                    */
   adsl_node_05 = adsl_node_se_type->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element service %(ux)s name \"type\" has no child - ignored",
                     awcl_se_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_se_type = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element service %(ux)s name \"type\" no TEXT_NODE found - ignored",
                     awcl_se_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_service() l%05d found service name %(ux)s type %(ux)s",
                   __LINE__, awcl_se_name, awcl_se_type );
#endif
// 13.10.07 KB to-do service name double
   /* search service in table                                          */
   /* search keyword (tag) in table                                    */
   iml_keyw_01 = sizeof(dsrs_conf_service_type) / sizeof(dsrs_conf_service_type[0]);
   while (TRUE) {                           /* loop over table         */
     iml_keyw_01--;                         /* element before          */
     if (iml_keyw_01 < 0) break;            /* end of table            */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_se_type, (char *) dsrs_conf_service_type[ iml_keyw_01 ].achc_keyword );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   if (iml_keyw_01 < 0) {                   /* keyword not defined     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error service name %(ux)s type %(ux)s unknown - ignored",
                     awcl_se_name, awcl_se_type );
     return;                                /* do not process this entry */
   }
   dsg_cdaux_control.adsc_node_conf = adsp_node_service;
   adsl_service_conf_1_w1
     = dsrs_conf_service_type[ iml_keyw_01 ].amc_conf( adsp_node_service, &m_call_dom, awcl_se_name );
   if (adsl_service_conf_1_w1 == NULL) return;
   adsl_service_conf_1_w1->adsc_next = adsp_loconf_1_fill->adsc_service_conf_1;  /* get chain of service configuration */
   adsp_loconf_1_fill->adsc_service_conf_1 = adsl_service_conf_1_w1;  /* set chain of service configuration */
} /* end m_conf_service()                                              */

/** process configuration HTTP-redirect-library-object                 */
static void m_conf_hrl_obj( DOMNode *adsp_node,
                            struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2;                   /* working variables       */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_hrl_obj_name;      /* name of HTTP-redirect-library-object */
   DOMNode    *adsl_node_lib_fn;            /* library-file-name       */
   DOMNode    *adsl_node_conf_sect;         /* configuration-section   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_hrl_obj_name;            /* HTTP-redirect-library-object name */
   HL_WCHAR * awcl_lib_fn;                  /* library-file-name       */
   struct dsd_hrl_obj_1 *adsl_hrl_obj_w1;   /* working variable     */
   struct dsd_hrl_def_1 dsl_hrl_def_l;      /* for loading of HTTP-redirect-library */
   struct dsd_hrl_obj_1 dsl_hrl_obj_l;      /* definition HTTP-redirect-library-object entry */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error HTTP-redirect-library-object has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_hrl_obj_name = NULL;           /* clear name of HTTP-redirect-library-object */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_hrl_obj_name) {      /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element HTTP-redirect-library-object name double - ignored" );
         } else {
           adsl_node_hrl_obj_name = adsl_node_04;  /* save name        */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_hrl_obj_name == NULL) {    /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error HTTP-redirect-library-object has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_hrl_obj_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element HTTP-redirect-library-object name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_hrl_obj_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element HTTP-redirect-library-object name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_hrl_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_hrl_obj_1;  /* get chain HTTP-redirect-library-object */
   while (adsl_hrl_obj_w1) {                /* loop over already defined HTTP-redirect-library-object */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_hrl_obj_name, -1, ied_chs_utf_16,
                         adsl_hrl_obj_w1 + 1, adsl_hrl_obj_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element HTTP-redirect-library-object %(ux)s already defined - ignored",
                       awcl_hrl_obj_name );
       return;                              /* do not process this entry */
     }
     adsl_hrl_obj_w1 = adsl_hrl_obj_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_hrl_obj() l%05d-T HTTP-redirect-library-object name %(ux)s",
                   __LINE__, awcl_hrl_obj_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_lib_fn = NULL;                 /* clear library-file-name */
   adsl_node_conf_sect = NULL;              /* clear configuration-section */
   do {
     if (   (adsl_node_04 != adsl_node_hrl_obj_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       do {                                 /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "library-file-name" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_lib_fn) {          /* library-file-name already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element HTTP-redirect-library-object %(ux)s library-file-name double - ignored",
                             awcl_hrl_obj_name );
           } else {
             adsl_node_lib_fn = adsl_node_04;  /* save library-file-name */
           }
           break;                           /* all done                */
         }
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "configuration-section" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_conf_sect) {       /* configuration-section already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element HTTP-redirect-library-object %(ux)s configuration-section double - ignored",
                             awcl_hrl_obj_name );
           } else {
             adsl_node_conf_sect = adsl_node_04;  /* save configuration-section */
           }
           break;                           /* all done                */
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element HTTP-redirect-library-object %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         awcl_hrl_obj_name, awcl_05_name );
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_lib_fn == NULL) {          /* no library-file-name found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error HTTP-redirect-library-object %(ux)s has no library-file-name - ignored",
                     awcl_hrl_obj_name );
     return;                                /* do not process this entry */
   }
   /* retrieve library-file-name                                       */
   adsl_node_05 = adsl_node_lib_fn->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element HTTP-redirect-library-object %(ux)s name \"library-file-name\" has no child - ignored",
                     awcl_hrl_obj_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_lib_fn = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element HTTP-redirect-library-object %(ux)s name \"library-file-name\" no TEXT_NODE found - ignored",
                     awcl_hrl_obj_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_hrl_obj() l%05d-T HTTP-redirect-library-object name %(ux)s library-file-name %(ux)s",
                   __LINE__, awcl_hrl_obj_name, awcl_lib_fn );
#endif

   memset( &dsl_hrl_def_l, 0, sizeof(struct dsd_hrl_def_1) );  /* for loading of HTTP-redirect-library */
   dsl_hrl_def_l.awcc_library_name = awcl_lib_fn;  /* name of library  */
   dsl_hrl_def_l.adsc_node_def = adsp_node;  /* node definition        */
   dsl_hrl_def_l.adsc_node_conf = adsl_node_conf_sect;  /* entry configuration-section */
#ifdef XYZ1
   dsl_hrl_def_l.imc_node_lineno = MAC_XML_LINENO( adsp_node );  /* line number in XML configuration file */
   dsl_hrl_def_l.imc_node_col = MAC_XML_COL( adsp_node );  /* column in XML configuration file */
#endif
   adsp_cs->adsc_hrl_def = &dsl_hrl_def_l;  /* pass structure with values */
   /* prepare text fields for error messages                           */
   adsp_cs->achc_msgtext_1 = "HTTP-redirect-library-object ";  /* message text 1 */
   adsp_cs->awcc_msgtext_1 = awcl_hrl_obj_name;  /* message text variable 1 */
   adsp_cs->achc_msgtext_2 = "";
   adsp_cs->achc_msgtext_3 = "";
   adsp_cs->awcc_name_value = awcl_hrl_obj_name;
   iml1 = 0;                                /* clear flag              */
#ifdef NOT_YET_111203
   if (dsl_cs.avpc_usgro_chain) {           /* with user groups        */
     iml1 |= DEF_CLIB1_CONF_USERLI;
   }
   if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
     iml1 |= DEF_CLIB1_CONF_RADIUS;
   }
// to-do 14.01.12 KB dynamic radius
   if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {   /* number of Kerberos 5 KDCs */
     iml1 |= DEF_CLIB1_CONF_KRB5;           /* Kerberos 5 KDC defined  */
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_DYN_KRB5;     /* dynamic Kerberos 5 KDC defined */
     }
   }
   iml2 = 0;
   if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
       && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (iml2) {                              /* number of LDAP groups   */
     iml1 |= DEF_CLIB1_CONF_LDAP;           /* LDAP group defined      */
     if (iml2 > 1) {                        /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_DYN_LDAP;     /* dynamic LDAP groups defined */
     }
   }
#endif
   bol1 = m_conf_hrl_ele( adsp_cs, iml1 );  /* call subroutine         */
   if (bol1 == FALSE) return;               /* HTTP-redirect-library could not be loaded */
   memset( &dsl_hrl_obj_l, 0, sizeof(struct dsd_hrl_obj_1) );  /* clear definition HTTP-redirect-library-object entry */
   dsl_hrl_obj_l.adsc_ext_lib1 = dsl_hrl_def_l.adsc_ext_lib1;  /* HTTP-redirect-library external library */
   dsl_hrl_obj_l.ac_conf = dsl_hrl_def_l.ac_conf;  /* return data from conf */
   dsl_hrl_obj_l.imc_len_name = m_count_wchar_z_to_utf8( awcl_hrl_obj_name );
   adsl_hrl_obj_w1 = (struct dsd_hrl_obj_1 *) malloc( sizeof(struct dsd_wspat_obj_1)
                                                        + dsl_hrl_obj_l.imc_len_name );
   memcpy( adsl_hrl_obj_w1, &dsl_hrl_obj_l, sizeof(struct dsd_hrl_obj_1) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_hrl_obj_w1 + 1), awcl_hrl_obj_name );
   adsl_hrl_obj_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_hrl_obj_1;  /* get chain HTTP-redirect-library-object */
   adsp_cs->adsc_loconf_1_fill->adsc_hrl_obj_1 = adsl_hrl_obj_w1;  /* set chain HTTP-redirect-library-object */
} /* end m_conf_hrl_obj()                                              */

/** process configuration plain-HTTP-library-object                    */
static void m_conf_phl_obj( DOMNode *adsp_node,
                            struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2;                   /* working variables       */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_phl_obj_name;      /* name of plain-HTTP-library-object */
   DOMNode    *adsl_node_lib_fn;            /* library-file-name       */
   DOMNode    *adsl_node_conf_sect;         /* configuration-section   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_phl_obj_name;            /* plain-HTTP-library-object name */
   HL_WCHAR * awcl_lib_fn;                  /* library-file-name       */
   struct dsd_phl_obj_1 *adsl_phl_obj_w1;   /* working variable     */
   struct dsd_phl_def_1 dsl_phl_def_l;      /* for loading of plain-HTTP-library */
   struct dsd_phl_obj_1 dsl_phl_obj_l;      /* definition plain-HTTP-library-object entry */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error plain-HTTP-library-object has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_phl_obj_name = NULL;           /* clear name of plain-HTTP-library-object */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_phl_obj_name) {      /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element plain-HTTP-library-object name double - ignored" );
         } else {
           adsl_node_phl_obj_name = adsl_node_04;  /* save name        */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_phl_obj_name == NULL) {    /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error plain-HTTP-library-object has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_phl_obj_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element plain-HTTP-library-object name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_phl_obj_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element plain-HTTP-library-object name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_phl_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_phl_obj_1;  /* get chain plain-HTTP-library-object */
   while (adsl_phl_obj_w1) {                /* loop over already defined plain-HTTP-library-object */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_phl_obj_name, -1, ied_chs_utf_16,
                         adsl_phl_obj_w1 + 1, adsl_phl_obj_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element plain-HTTP-library-object %(ux)s already defined - ignored",
                       awcl_phl_obj_name );
       return;                              /* do not process this entry */
     }
     adsl_phl_obj_w1 = adsl_phl_obj_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_phl_obj() l%05d-T plain-HTTP-library-object name %(ux)s",
                   __LINE__, awcl_phl_obj_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_lib_fn = NULL;                 /* clear library-file-name */
   adsl_node_conf_sect = NULL;              /* clear configuration-section */
   do {
     if (   (adsl_node_04 != adsl_node_phl_obj_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       do {                                 /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "library-file-name" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_lib_fn) {          /* library-file-name already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element plain-HTTP-library-object %(ux)s library-file-name double - ignored",
                             awcl_phl_obj_name );
           } else {
             adsl_node_lib_fn = adsl_node_04;  /* save library-file-name */
           }
           break;                           /* all done                */
         }
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "configuration-section" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_conf_sect) {       /* configuration-section already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element plain-HTTP-library-object %(ux)s configuration-section double - ignored",
                             awcl_phl_obj_name );
           } else {
             adsl_node_conf_sect = adsl_node_04;  /* save configuration-section */
           }
           break;                           /* all done                */
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element plain-HTTP-library-object %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         awcl_phl_obj_name, awcl_05_name );
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_lib_fn == NULL) {          /* no library-file-name found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error plain-HTTP-library-object %(ux)s has no library-file-name - ignored",
                     awcl_phl_obj_name );
     return;                                /* do not process this entry */
   }
   /* retrieve library-file-name                                       */
   adsl_node_05 = adsl_node_lib_fn->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element plain-HTTP-library-object %(ux)s name \"library-file-name\" has no child - ignored",
                     awcl_phl_obj_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_lib_fn = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element plain-HTTP-library-object %(ux)s name \"library-file-name\" no TEXT_NODE found - ignored",
                     awcl_phl_obj_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_phl_obj() l%05d-T plain-HTTP-library-object name %(ux)s library-file-name %(ux)s",
                   __LINE__, awcl_phl_obj_name, awcl_lib_fn );
#endif

   memset( &dsl_phl_def_l, 0, sizeof(struct dsd_phl_def_1) );  /* for loading of plain-HTTP-library */
   dsl_phl_def_l.awcc_library_name = awcl_lib_fn;  /* name of library  */
   dsl_phl_def_l.adsc_node_def = adsp_node;  /* node definition        */
   dsl_phl_def_l.adsc_node_conf = adsl_node_conf_sect;  /* entry configuration-section */
#ifdef XYZ1
   dsl_phl_def_l.imc_node_lineno = MAC_XML_LINENO( adsp_node );  /* line number in XML configuration file */
   dsl_phl_def_l.imc_node_col = MAC_XML_COL( adsp_node );  /* column in XML configuration file */
#endif
   adsp_cs->adsc_phl_def = &dsl_phl_def_l;  /* pass structure with values */
   /* prepare text fields for error messages                           */
   adsp_cs->achc_msgtext_1 = "plain-HTTP-library-object ";  /* message text 1 */
   adsp_cs->awcc_msgtext_1 = awcl_phl_obj_name;  /* message text variable 1 */
   adsp_cs->achc_msgtext_2 = "";
   adsp_cs->achc_msgtext_3 = "";
   adsp_cs->awcc_name_value = awcl_phl_obj_name;
   iml1 = 0;                                /* clear flag              */
#ifdef NOT_YET_111203
   if (dsl_cs.avpc_usgro_chain) {           /* with user groups        */
     iml1 |= DEF_CLIB1_CONF_USERLI;
   }
   if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
     iml1 |= DEF_CLIB1_CONF_RADIUS;
   }
// to-do 14.01.12 KB dynamic radius
   if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {   /* number of Kerberos 5 KDCs */
     iml1 |= DEF_CLIB1_CONF_KRB5;           /* Kerberos 5 KDC defined  */
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_DYN_KRB5;     /* dynamic Kerberos 5 KDC defined */
     }
   }
   iml2 = 0;
   if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
       && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (iml2) {                              /* number of LDAP groups   */
     iml1 |= DEF_CLIB1_CONF_LDAP;           /* LDAP group defined      */
     if (iml2 > 1) {                        /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_DYN_LDAP;     /* dynamic LDAP groups defined */
     }
   }
#endif
   bol1 = m_conf_phl_ele( adsp_cs, iml1 );  /* call subroutine         */
   if (bol1 == FALSE) return;               /* plain-HTTP-library could not be loaded */
   memset( &dsl_phl_obj_l, 0, sizeof(struct dsd_phl_obj_1) );  /* clear definition plain-HTTP-library-object entry */
   dsl_phl_obj_l.adsc_ext_lib1 = dsl_phl_def_l.adsc_ext_lib1;  /* plain-HTTP-library external library */
   dsl_phl_obj_l.ac_conf = dsl_phl_def_l.ac_conf;  /* return data from conf */
   dsl_phl_obj_l.imc_len_name = m_count_wchar_z_to_utf8( awcl_phl_obj_name );
   adsl_phl_obj_w1 = (struct dsd_phl_obj_1 *) malloc( sizeof(struct dsd_wspat_obj_1)
                                                        + dsl_phl_obj_l.imc_len_name );
   memcpy( adsl_phl_obj_w1, &dsl_phl_obj_l, sizeof(struct dsd_phl_obj_1) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_phl_obj_w1 + 1), awcl_phl_obj_name );
   adsl_phl_obj_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_phl_obj_1;  /* get chain plain-HTTP-library-object */
   adsp_cs->adsc_loconf_1_fill->adsc_phl_obj_1 = adsl_phl_obj_w1;  /* set chain plain-HTTP-library-object */
} /* end m_conf_phl_obj()                                              */

/** process configuration authentication-library-object                */
static void m_conf_wspat_obj( DOMNode *adsp_node,
                              struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2;                   /* working variables       */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_wspat_obj_name;    /* name of authentication-library-object */
   DOMNode    *adsl_node_lib_fn;            /* library-file-name       */
   DOMNode    *adsl_node_conf_sect;         /* configuration-section   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_wspat_obj_name;          /* authentication-library-object name */
   HL_WCHAR * awcl_lib_fn;                  /* library-file-name       */
   struct dsd_wspat_obj_1 *adsl_wspat_obj_w1;  /* working variable     */
   struct dsd_wspat_def_1 dsl_wspat_def_1;  /* for loading of authentication-library */
   struct dsd_wspat_obj_1 dsl_wspat_obj_1;  /* definition authentication-library-object entry */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error authentication-library-object has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_wspat_obj_name = NULL;         /* clear name of authentication-library-object */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_wspat_obj_name) {    /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element authentication-library-object name double - ignored" );
         } else {
           adsl_node_wspat_obj_name = adsl_node_04;  /* save name      */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_wspat_obj_name == NULL) {  /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error authentication-library-object has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_wspat_obj_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element authentication-library-object name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_wspat_obj_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element authentication-library-object name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_wspat_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_wspat_obj_1;  /* get chain authentication-library-object */
   while (adsl_wspat_obj_w1) {              /* loop over already defined authentication-library-object */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_wspat_obj_name, -1, ied_chs_utf_16,
                         adsl_wspat_obj_w1 + 1, adsl_wspat_obj_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element authentication-library-object %(ux)s already defined - ignored",
                       awcl_wspat_obj_name );
       return;                              /* do not process this entry */
     }
     adsl_wspat_obj_w1 = adsl_wspat_obj_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_wspat_obj() l%05d-T authentication-library-object name %(ux)s",
                   __LINE__, awcl_wspat_obj_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_lib_fn = NULL;                 /* clear library-file-name */
   adsl_node_conf_sect = NULL;              /* clear configuration-section */
   do {
     if (   (adsl_node_04 != adsl_node_wspat_obj_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       do {                                 /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "library-file-name" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_lib_fn) {          /* library-file-name already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element authentication-library-object %(ux)s library-file-name double - ignored",
                             awcl_wspat_obj_name );
           } else {
             adsl_node_lib_fn = adsl_node_04;  /* save library-file-name */
           }
           break;                           /* all done                */
         }
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "configuration-section" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_conf_sect) {       /* configuration-section already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element authentication-library-object %(ux)s configuration-section double - ignored",
                             awcl_wspat_obj_name );
           } else {
             adsl_node_conf_sect = adsl_node_04;  /* save configuration-section */
           }
           break;                           /* all done                */
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element authentication-library-object %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         awcl_wspat_obj_name, awcl_05_name );
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_lib_fn == NULL) {          /* no library-file-name found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error authentication-library-object %(ux)s has no library-file-name - ignored",
                     awcl_wspat_obj_name );
     return;                                /* do not process this entry */
   }
   /* retrieve library-file-name                                       */
   adsl_node_05 = adsl_node_lib_fn->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element authentication-library-object %(ux)s name \"library-file-name\" has no child - ignored",
                     awcl_wspat_obj_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_lib_fn = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element authentication-library-object %(ux)s name \"library-file-name\" no TEXT_NODE found - ignored",
                     awcl_wspat_obj_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_wspat_obj() l%05d-T authentication-library-object name %(ux)s library-file-name %(ux)s",
                   __LINE__, awcl_wspat_obj_name, awcl_lib_fn );
#endif

   memset( &dsl_wspat_def_1, 0, sizeof(struct dsd_wspat_def_1) );  /* for loading of authentication-library */
   dsl_wspat_def_1.awcc_library_name = awcl_lib_fn;  /* name of library */
   dsl_wspat_def_1.adsc_node_def = adsp_node;  /* node definition      */
   dsl_wspat_def_1.adsc_node_conf = adsl_node_conf_sect;  /* entry configuration-section */
#ifdef XYZ1
   dsl_wspat_def_1.imc_node_lineno = MAC_XML_LINENO( adsp_node );  /* line number in XML configuration file */
   dsl_wspat_def_1.imc_node_col = MAC_XML_COL( adsp_node );  /* column in XML configuration file */
#endif
   adsp_cs->adsc_hobwspat3_def_1 = &dsl_wspat_def_1;  /* pass structure with values */
   /* prepare text fields for error messages                           */
   adsp_cs->achc_msgtext_1 = "authentication-library-object ";  /* message text 1 */
   adsp_cs->awcc_msgtext_1 = awcl_wspat_obj_name;  /* message text variable 1 */
   adsp_cs->achc_msgtext_2 = "";
   adsp_cs->achc_msgtext_3 = "";
   adsp_cs->awcc_name_value = awcl_wspat_obj_name;
   iml1 = 0;                                /* clear flag              */
#ifdef NOT_YET_111203
   if (dsl_cs.avpc_usgro_chain) {           /* with user groups        */
     iml1 |= DEF_CLIB1_CONF_USERLI;
   }
   if (dsl_cs.avpc_radius_chain) {        /* radius server defined   */
     iml1 |= DEF_CLIB1_CONF_RADIUS;
   }
// to-do 14.01.12 KB dynamic radius
   if (dsl_cs.dsc_gate.imc_no_krb5_kdc) {   /* number of Kerberos 5 KDCs */
     iml1 |= DEF_CLIB1_CONF_KRB5;           /* Kerberos 5 KDC defined  */
     if (dsl_cs.dsc_gate.imc_no_krb5_kdc > 1) {  /* number of Kerberos 5 KDCs */
       iml1 |= DEF_CLIB1_CONF_DYN_KRB5;     /* dynamic Kerberos 5 KDC defined */
     }
   }
   iml2 = 0;
   if (dsl_cs.dsc_gate.imc_no_ldap_group) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_gate.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (   (dsl_cs.dsc_gate.ifunction != DEF_FUNC_SS5H)
       && (dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group)) {  /* number of LDAP groups */
     iml2 = dsl_cs.dsc_server_conf_1_c.imc_no_ldap_group;  /* number of LDAP groups */
   }
   if (iml2) {                              /* number of LDAP groups   */
     iml1 |= DEF_CLIB1_CONF_LDAP;           /* LDAP group defined      */
     if (iml2 > 1) {                        /* number of LDAP groups   */
       iml1 |= DEF_CLIB1_CONF_DYN_LDAP;     /* dynamic LDAP groups defined */
     }
   }
#endif
   bol1 = m_conf_hobwspat3( adsp_cs, iml1 );  /* call subroutine       */
   if (bol1 == FALSE) return;               /* authentication-library could not be loaded */
   memset( &dsl_wspat_obj_1, 0, sizeof(struct dsd_wspat_obj_1) );  /* clear definition authentication-library-object entry */
   dsl_wspat_obj_1.adsc_ext_lib1 = dsl_wspat_def_1.adsc_ext_lib1;  /* authentication-library external library */
   dsl_wspat_obj_1.ac_conf = dsl_wspat_def_1.ac_conf;  /* return data from conf */
   dsl_wspat_obj_1.imc_len_name = m_count_wchar_z_to_utf8( awcl_wspat_obj_name );
   adsl_wspat_obj_w1 = (struct dsd_wspat_obj_1 *) malloc( sizeof(struct dsd_wspat_obj_1)
                                                            + dsl_wspat_obj_1.imc_len_name );
   memcpy( adsl_wspat_obj_w1, &dsl_wspat_obj_1, sizeof(struct dsd_wspat_obj_1) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_wspat_obj_w1 + 1), awcl_wspat_obj_name );
   adsl_wspat_obj_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_wspat_obj_1;  /* get chain authentication-library-object */
   adsp_cs->adsc_loconf_1_fill->adsc_wspat_obj_1 = adsl_wspat_obj_w1;  /* set chain authentication-library-object */
} /* end m_conf_wspat_obj()                                            */

/** process configuration server-data-hook-object                      */
static void m_conf_sdh_obj( DOMNode *adsp_node,
                            struct dsd_conf_serv *adsp_cs ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_sdh_obj_name;      /* name of server-data-hook-object */
   DOMNode    *adsl_node_lib_fn;            /* library-file-name       */
   DOMNode    *adsl_node_conf_sect;         /* configuration-section   */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_sdh_obj_name;            /* server-data-hook-object name */
   HL_WCHAR * awcl_lib_fn;                  /* library-file-name       */
   struct dsd_sdh_obj_1 *adsl_sdh_obj_w1;   /* working variable        */
   struct dsd_sdh_def_1 dsl_sdh_def_1;      /* for loading of server-data-hook */
   struct dsd_sdh_obj_1 dsl_sdh_obj_1;      /* definition server-data-hook-object entry */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error server-data-hook-object has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_sdh_obj_name = NULL;           /* clear name of server-data-hook-object */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_sdh_obj_name) {      /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element server-data-hook-object name double - ignored" );
         } else {
           adsl_node_sdh_obj_name = adsl_node_04;  /* save name        */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_sdh_obj_name == NULL) {    /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error server-data-hook-object has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_sdh_obj_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element server-data-hook-object name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_sdh_obj_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element server-data-hook-object name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_sdh_obj_w1 = adsp_cs->adsc_loconf_1_fill->adsc_sdh_obj_1;  /* get chain server-data-hook-object */
   while (adsl_sdh_obj_w1) {                 /* loop over already defined server-data-hook-object */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_sdh_obj_name, -1, ied_chs_utf_16,
                         adsl_sdh_obj_w1 + 1, adsl_sdh_obj_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element server-data-hook-object %(ux)s already defined - ignored",
                       awcl_sdh_obj_name );
       return;                              /* do not process this entry */
     }
     adsl_sdh_obj_w1 = adsl_sdh_obj_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_sdh_obj() l%05d-T server-data-hook-object name %(ux)s",
                   __LINE__, awcl_sdh_obj_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   adsl_node_lib_fn = NULL;                 /* clear library-file-name */
   adsl_node_conf_sect = NULL;              /* clear configuration-section */
   do {
     if (   (adsl_node_04 != adsl_node_sdh_obj_name)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       do {                                 /* pseudo-loop             */
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "library-file-name" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_lib_fn) {          /* library-file-name already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element server-data-hook-object %(ux)s library-file-name double - ignored",
                             awcl_sdh_obj_name );
           } else {
             adsl_node_lib_fn = adsl_node_04;  /* save library-file-name */
           }
           break;                           /* all done                */
         }
         bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "configuration-section" );
         if ((bol1) && (iml1 == 0)) {       /* strings are equal       */
           if (adsl_node_conf_sect) {       /* configuration-section already defined */
             m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element server-data-hook-object %(ux)s configuration-section double - ignored",
                             awcl_sdh_obj_name );
           } else {
             adsl_node_conf_sect = adsl_node_04;  /* save configuration-section */
           }
           break;                           /* all done                */
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element server-data-hook-object %(ux)s contains undefined node \"%(ux)s\" - ignored",
                         awcl_sdh_obj_name, awcl_05_name );
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_lib_fn == NULL) {          /* no library-file-name found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error server-data-hook-object %(ux)s has no library-file-name - ignored",
                     awcl_sdh_obj_name );
     return;                                /* do not process this entry */
   }
   /* retrieve library-file-name                                       */
   adsl_node_05 = adsl_node_lib_fn->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element server-data-hook-object %(ux)s name \"library-file-name\" has no child - ignored",
                     awcl_sdh_obj_name );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_lib_fn = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element server-data-hook-object %(ux)s name \"library-file-name\" no TEXT_NODE found - ignored",
                     awcl_sdh_obj_name );
     return;                                /* do not process this entry */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_sdh_obj() l%05d-T server-data-hook-object name %(ux)s library-file-name %(ux)s",
                   __LINE__, awcl_sdh_obj_name, awcl_lib_fn );
#endif

   memset( &dsl_sdh_def_1, 0, sizeof(struct dsd_sdh_def_1) );  /* for loading of server-data-hook */
   dsl_sdh_def_1.awcc_library_name = awcl_lib_fn;  /* name of library  */
   dsl_sdh_def_1.adsc_node_conf = adsl_node_conf_sect;  /* entry configuration-section */
   adsp_cs->adsc_sdhlib_chain = &dsl_sdh_def_1;  /* set SDH to load    */
   /* prepare text fields for error messages                           */
#ifdef OLD01
   adsp_cs->achc_msgtext_1 = "server-data-hook-object ";
   adsp_cs->awcc_msgtext_1 = awcl_sdh_obj_name;
   adsp_cs->achc_msgtext_2 = " library-file-name";
   adsp_cs->awcc_name_value = awcl_lib_fn;
#endif
   adsp_cs->achc_msgtext_1 = "server-data-hook-object";
   adsp_cs->awcc_msgtext_1 = (HL_WCHAR *) L"";
   adsp_cs->achc_msgtext_2 = "";
   adsp_cs->awcc_name_value = awcl_sdh_obj_name;
   iml1 = m_conf_sdh_load( adsp_cs, 0 );    /* call subroutine         */
   if (iml1 == 0) return;                   /* server-data-hook could not be loaded */
   memset( &dsl_sdh_obj_1, 0, sizeof(struct dsd_sdh_obj_1) );  /* clear definition server-data-hook-object entry */
#ifdef B080609
   dsl_sdh_obj_1.adsc_sdhl_1 = dsl_sdh_def_1.adsc_sdhl_1;  /* server-data-hook libr */
#endif
   dsl_sdh_obj_1.adsc_ext_lib1 = dsl_sdh_def_1.adsc_ext_lib1;  /* server-data-hook external library */
   dsl_sdh_obj_1.ac_conf = dsl_sdh_def_1.ac_conf;  /* return data from conf */
   dsl_sdh_obj_1.imc_len_name = m_count_wchar_z_to_utf8( awcl_sdh_obj_name );
   adsl_sdh_obj_w1 = (struct dsd_sdh_obj_1 *) malloc( sizeof(struct dsd_sdh_obj_1)
                                                        + dsl_sdh_obj_1.imc_len_name );
   memcpy( adsl_sdh_obj_w1, &dsl_sdh_obj_1, sizeof(struct dsd_sdh_obj_1) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_sdh_obj_w1 + 1), awcl_sdh_obj_name );
   adsl_sdh_obj_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_sdh_obj_1;  /* get chain server-data-hook-object */
   adsp_cs->adsc_loconf_1_fill->adsc_sdh_obj_1 = adsl_sdh_obj_w1;  /* set chain server-data-hook-object */
} /* end m_conf_sdh_obj()                                              */

/** process configuration L2TP-gateway                                 */
static void m_conf_l2tp_gw( DOMNode *adsp_node,
                            struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2, iml3;             /* working variables       */
   BOOL       bol1;                         /* working variable        */
#ifdef XYZ1
   char       *achl1;                       /* working variable        */
#endif
   int        iml_cmp;                      /* compare values          */
   int        iml_len_auth_pwd_1;           /* length of password      */
   char       *achl_auth_pwd_1;             /* address of password     */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
// DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_l2tp_gw;           /* name of L2TP-gateway    */
// HL_WCHAR * awcl_04_name;
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_l2tp_gw_name;            /* L2TP-gateway name       */
#ifdef XYZ1
   HL_WCHAR * awcl_l2tp_gw_auth_userid;     /* L2TP <authenticate-use-userid> */
   HL_WCHAR * awcl_l2tp_gw_auth_pwd;        /* L2TP <authenticate-use-password> */
#endif
   HL_WCHAR * awcrl_value[ DEF_XML_L2TP_GW_MAX ];  /* values retrieved */
   struct dsd_l2tp_conf *adsl_l2tp_conf_w1;  /* working variable       */
   struct dsd_l2tp_conf dsl_l2tp_conf_fill;  /* L2TP gateway configuration */
   struct dsd_unicode_string dsl_ucs_l;     /* unicode string          */
   char       chrl_work1[512];              /* working variable        */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02700W Error L2TP-gateway has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_l2tp_gw = NULL;                /* clear name of L2TP-gateway */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_l2tp_gw) {           /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02701W Error element L2TP-gateway name double - ignored" );
         } else {
           adsl_node_l2tp_gw = adsl_node_04;  /* save name             */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_l2tp_gw == NULL) {         /* no name found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02702W Error L2TP-gateway has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_l2tp_gw->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02703W Error element L2TP-gateway name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_l2tp_gw_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02704W Error element L2TP-gateway name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_l2tp_conf_w1 = adsp_cs->adsc_loconf_1_fill->adsc_l2tp_conf;  /* get chain L2TP gateways */
   while (adsl_l2tp_conf_w1) {                 /* loop over already defined L2TP gateways */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcl_l2tp_gw_name, -1, ied_chs_utf_16,
                         adsl_l2tp_conf_w1 + 1, adsl_l2tp_conf_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml_cmp == 0)) {          /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02705W Error element L2TP-gateway %(ux)s already defined - ignored",
                       awcl_l2tp_gw_name );
       return;                              /* do not process this entry */
     }
     adsl_l2tp_conf_w1 = adsl_l2tp_conf_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_sdh_obj() l%05d-T L2TP-gateway name %(ux)s",
                   __LINE__, awcl_l2tp_gw_name );
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   memset( awcrl_value, 0, sizeof(awcrl_value) );  /* clear values retrieved */
   achl_auth_pwd_1 = NULL;                  /* address of password     */
   do {                                     /* loop to retrieve nodes  */
     if (   (adsl_node_04 != adsl_node_l2tp_gw)
         && (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE)) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       iml1 = sizeof(achrs_node_l2tp_gw_entry) / sizeof(achrs_node_l2tp_gw_entry[0]);  /* number of elements */
       do {                                 /* loop over all keywords  */
         bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_name, (char *) achrs_node_l2tp_gw_entry[ iml1 - 1 ] );
         if ((bol1) && (iml_cmp == 0)) {    /* strings are equal       */
           break;
         }
         iml1--;                            /* decrement index of keywords */
       } while (iml1);
       do {                                 /* pseudo-loop             */
         if (iml1 <= 0) {                   /* keyword not defined     */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02710W Error L2TP-gateway name \"%(ux)s\" element \"%(ux)s\" not defined - ignored",
                           awcl_l2tp_gw_name, awcl_05_name );
           break;
         }
         if (awcrl_value[ iml1 - 1 ]) {     /* element already defined */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02711W Error L2TP-gateway name \"%(ux)s\" element \"%(ux)s\" double - ignored",
                           awcl_l2tp_gw_name, awcl_05_name );
           break;
         }
//       if (   (iml1 == DEF_XML_L2TP_GW_AUTH_PWD_PLAIN)
//           && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY - 1 ])) {
         if (   (iml1 == (DEF_XML_L2TP_GW_AUTH_PWD_PLAIN + 1))
             && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY ])) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02712W line=%d col=%d Error L2TP-gateway name \"%(ux)s\" found node name \"<authenticate-use-password-plain>\" but authenticate-use-password-enrypted already defined - ignored",
                           MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                           awcl_l2tp_gw_name );
           break;
         }
//       if (   (iml1 == DEF_XML_L2TP_GW_AUTH_PWD_ENCRY)
//           && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN - 1 ])) {
         if (   (iml1 == (DEF_XML_L2TP_GW_AUTH_PWD_ENCRY + 1))
             && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ])) {
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02713W line=%d col=%d Error L2TP-gateway name \"%(ux)s\" found node name \"<authenticate-use-password-encrypted>\" but authenticate-use-password-plain already defined - ignored",
                           MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                           awcl_l2tp_gw_name );
           break;
         }
         adsl_node_05 = adsl_node_04->getFirstChild();
         if (adsl_node_05 == NULL) {        /* no child found          */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02714W Error L2TP-gateway name \"%(ux)s\" element \"%(ux)s\" has no child - ignored",
                           awcl_l2tp_gw_name, awcl_05_name );
           break;
         }
         do {
           if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
             awcrl_value[ iml1 - 1 ] = (HL_WCHAR *) adsl_node_05->getNodeValue();
//           if (iml1 == DEF_XML_L2TP_GW_AUTH_CHARSET) {
             if (iml1 == (DEF_XML_L2TP_GW_AUTH_CHARSET + 1)) {
               iml2 = sizeof(dsrs_radius_gr_charset_tab) / sizeof(dsrs_radius_gr_charset_tab[0]);
               while (TRUE) {               /* loop over possible values */
                 iml2--;                    /* decrement index         */
                 if (iml2 < 0) {            /* value not found in table */
                   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02720W line=%d col=%d Error L2TP-gateway name %(ux)s element \"authenticate-use-charset\" charset found \"%(ux)s\" - not defined, ignored",
                                   MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                                   awcl_l2tp_gw_name,
                                   awcrl_value[ iml1 - 1 ] );
                   awcrl_value[ iml1 - 1 ] = NULL;
                   break;
                 }
                 bol1 = m_cmp_vx_vx( &iml_cmp,
                                     awcrl_value[ iml1 - 1 ], -1, ied_chs_utf_16,
                                     dsrs_radius_gr_charset_tab[ iml2 ].achc_name, -1, ied_chs_utf_8 );
                 if ((bol1) && (iml_cmp == 0)) break;  /* strings are equal    */
               }
               if (iml2 < 0) break;
               if (   (dsrs_radius_gr_charset_tab[ iml2 ].iec_chs != ied_chs_utf_8)  /* Unicode UTF-8 */
                   && (dsrs_radius_gr_charset_tab[ iml2 ].iec_chs != ied_chs_ansi_819)  /* ANSI 819 */
                   && (dsrs_radius_gr_charset_tab[ iml2 ].iec_chs != ied_chs_ascii_850)) {  /* ASCII 850 */
                 m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02721W line=%d col=%d Error L2TP-gateway name %(ux)s element \"authenticate-use-charset\" charset found \"%(ux)s\" not valid for PPP authentication - ignored",
                                 MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                                 awcl_l2tp_gw_name,
                                 awcrl_value[ iml1 - 1 ] );
                 awcrl_value[ iml1 - 1 ] = NULL;
                 break;
               }
               dsl_l2tp_conf_fill.iec_chs_ppp = dsrs_radius_gr_charset_tab[ iml2 ].iec_chs;  /* character set PPP */
               break;
             }
//           if (iml1 != DEF_XML_L2TP_GW_AUTH_PWD_ENCRY) break;
             if (iml1 != (DEF_XML_L2TP_GW_AUTH_PWD_ENCRY + 1)) break;
             dsl_ucs_l.ac_str = awcrl_value[ iml1 - 1 ];    /* address of string       */
             dsl_ucs_l.imc_len_str = -1;          /* length string in elements */
             dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string */
             iml2 = (HL_WCSLEN( (HL_WCHAR *) dsl_ucs_l.ac_str ) + 4 - 1) / 4 * 3;
             achl_auth_pwd_1 = (char *) malloc( iml2 );  /* authenticate-use-password-encrypted */
             iml_len_auth_pwd_1 = m_get_ucs_base64( &iml2, &iml3,
                                                    achl_auth_pwd_1, iml2,
                                                    &dsl_ucs_l );
             if (iml_len_auth_pwd_1 <= 0) {  /* error occured          */
               m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02730W line=%d col=%d Error L2TP-gateway name \"%(ux)s\" element \"authenticate-use-password-encrypted\" base64 error %d position %d in string \"%(ux)s\" - ignored",
                               MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                               awcl_l2tp_gw_name,
                               iml2, iml3, dsl_ucs_l.ac_str );
               free( achl_auth_pwd_1 );     /* free memory again       */
               achl_auth_pwd_1 = NULL;
//             awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY - 1 ] = NULL;  /* node ignored */
               awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY ] = NULL;  /* node ignored */
               break;
             }
             bol1 = m_check_vx( achl_auth_pwd_1, iml_len_auth_pwd_1, ied_chs_utf_8 );  /* check Unicode UTF-8 */
             if (bol1) break;               /* no error                */
             m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02731W line=%d col=%d Error L2TP-gateway name \"%(ux)s\" element \"authenticate-use-password-encrypted\" string \"%(ux)s\" decoded no valid UTF-8 - ignored",
                             MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                             awcl_l2tp_gw_name,
                             dsl_ucs_l.ac_str );
             free( achl_auth_pwd_1 );       /* free memory again       */
             achl_auth_pwd_1 = NULL;
//           awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY - 1 ] = NULL;  /* node ignored */
             awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY ] = NULL;  /* node ignored */
             break;
           }
           adsl_node_05 = adsl_node_05->getNextSibling();
         } while (adsl_node_05);            /* for all siblings        */
         if (adsl_node_05 == NULL) {        /* no text found           */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02715W Error L2TP-gateway name \"%(ux)s\" element \"%(ux)s\" no TEXT_NODE found - ignored",
                           awcl_l2tp_gw_name, awcl_05_name );
         }
       } while (FALSE);
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (awcrl_value[ DEF_XML_L2TP_GW_SERVER_INETA ] == NULL) {  /* no serverineta found */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02750W Error L2TP-gateway name %(ux)s <serverineta> missing - ignored",
                     awcl_l2tp_gw_name );
     if (achl_auth_pwd_1 == NULL) return;   /* address of password     */
     free( achl_auth_pwd_1 );               /* free memory of password */
     return;                                /* do not process this entry */
   }

   memset( &dsl_l2tp_conf_fill, 0, sizeof(struct dsd_l2tp_conf) );  /* L2TP gateway configuration */
   iml1 = m_build_udp_param( &dsl_l2tp_conf_fill.dsc_udp_param_1, chrl_work1,
                             awcrl_value[ DEF_XML_L2TP_GW_GATE_I ], -1, ied_chs_utf_16,
                             awcrl_value[ DEF_XML_L2TP_GW_SERVER_INETA ], -1, ied_chs_utf_16 );
   if (iml1) {                              /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02751W Error L2TP-gateway name \"%(ux)s\" serverineta \"%(ux)s\" error %d %s - ignored",
                     awcl_l2tp_gw_name, awcrl_value[ DEF_XML_L2TP_GW_SERVER_INETA ], iml1, chrl_work1 );
     if (achl_auth_pwd_1 == NULL) return;   /* address of password     */
     free( achl_auth_pwd_1 );               /* free memory of password */
     return;                                /* do not process this entry */
   }
   iml1 = DEFAULT_UDP_PORT_L2TP;            /* set default port        */
   if (awcrl_value[ DEF_XML_L2TP_GW_SERVER_PORT ]) {  /* port configured */
     iml1 = m_get_port_no( awcrl_value[ DEF_XML_L2TP_GW_SERVER_PORT ], -1, ied_chs_utf_16 );
     if (iml1 < 0) {                        /* port not valid          */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02752W Error L2TP-gateway name \"%(ux)s\" serverport \"%(ux)s\" invalid - use default L2TP port 1701",
                       awcl_l2tp_gw_name, awcrl_value[ DEF_XML_L2TP_GW_SERVER_PORT ] );
       iml1 = DEFAULT_UDP_PORT_L2TP;        /* set default port        */
     }
   }
   ((struct sockaddr_in *) &dsl_l2tp_conf_fill.dsc_udp_param_1.dsc_soa_target)->sin_port
     = htons( iml1 );                       /* set target port         */
   if (   (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ])  /* password configured */
       && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ] == NULL)) {  /* userid not configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02753W Error L2TP-gateway name \"%(ux)s\" <authenticate-use-password-plain> \"%(ux)s\" configured but no <authenticate-use-userid> - <authenticate-use-password-plain> ignored",
                     awcl_l2tp_gw_name, awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ] );
     awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ] = NULL;
   }
   if (   (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY ])  /* password configured */
       && (awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ] == NULL)) {  /* userid not configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02754W Error L2TP-gateway name \"%(ux)s\" <authenticate-use-password-encrypted> \"%(ux)s\" configured but no <authenticate-use-userid> - <authenticate-use-password-encrypted> ignored",
                     awcl_l2tp_gw_name, awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_ENCRY ] );
     free( achl_auth_pwd_1 );               /* free memory again       */
     achl_auth_pwd_1 = NULL;
   }
   if (awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ]) {  /* userid configured */
     dsl_l2tp_conf_fill.imc_len_auth_userid = m_count_wchar_z_to_utf8( awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ] );  /* length of authenticate-use-userid bytes */
   }
   if (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ]) {  /* password configured */
     dsl_l2tp_conf_fill.imc_len_auth_pwd = m_count_wchar_z_to_utf8( awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ] );  /* length of authenticate-use-password-xxx bytes */
   } else if (achl_auth_pwd_1) {            /* address of password     */
     dsl_l2tp_conf_fill.imc_len_auth_pwd = iml_len_auth_pwd_1;  /* length of authenticate-use-password-xxx bytes */
   }
   dsl_l2tp_conf_fill.imc_len_name = m_count_wchar_z_to_utf8( awcl_l2tp_gw_name );
   adsl_l2tp_conf_w1 = (struct dsd_l2tp_conf *) malloc( sizeof(struct dsd_l2tp_conf)
                                                          + dsl_l2tp_conf_fill.imc_len_name
                                                          + dsl_l2tp_conf_fill.imc_len_auth_userid
                                                          + dsl_l2tp_conf_fill.imc_len_auth_pwd );
   memcpy( adsl_l2tp_conf_w1, &dsl_l2tp_conf_fill, sizeof(struct dsd_l2tp_conf) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_l2tp_conf_w1 + 1), awcl_l2tp_gw_name );
   if (awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ]) {  /* userid configured */
     adsl_l2tp_conf_w1->achc_auth_userid = (char *) (adsl_l2tp_conf_w1 + 1) + dsl_l2tp_conf_fill.imc_len_name;  /* authenticate-use-userid UTF-8 */
     m_trans_wchar_z_to_utf8( (char *) (adsl_l2tp_conf_w1 + 1) + dsl_l2tp_conf_fill.imc_len_name,
                              awcrl_value[ DEF_XML_L2TP_GW_AUTH_USERID ] );
   }
   if (awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ]) {  /* password configured */
     adsl_l2tp_conf_w1->achc_auth_pwd = (char *) (adsl_l2tp_conf_w1 + 1) + dsl_l2tp_conf_fill.imc_len_name + dsl_l2tp_conf_fill.imc_len_auth_userid;  /* authenticate-use-password UTF-8 */
     m_trans_wchar_z_to_utf8( (char *) (adsl_l2tp_conf_w1 + 1) + dsl_l2tp_conf_fill.imc_len_name + dsl_l2tp_conf_fill.imc_len_auth_userid,
                              awcrl_value[ DEF_XML_L2TP_GW_AUTH_PWD_PLAIN ] );
   } else if (achl_auth_pwd_1) {            /* address of password     */
     adsl_l2tp_conf_w1->achc_auth_pwd = (char *) (adsl_l2tp_conf_w1 + 1) + dsl_l2tp_conf_fill.imc_len_name + dsl_l2tp_conf_fill.imc_len_auth_userid;  /* authenticate-use-password UTF-8 */
     memcpy( adsl_l2tp_conf_w1->achc_auth_pwd, achl_auth_pwd_1, dsl_l2tp_conf_fill.imc_len_auth_pwd );
     free( achl_auth_pwd_1 );               /* free memory of password */
   }
   adsl_l2tp_conf_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_l2tp_conf;  /* get chain L2TP gateways */
   adsp_cs->adsc_loconf_1_fill->adsc_l2tp_conf = adsl_l2tp_conf_w1;  /* set chain L2TP gateways */
} /* end m_conf_l2tp_gw()                                              */

/** process configuration radius-group                                 */
static void m_conf_radius_group( DOMNode *adsp_node,
                                 struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2, iml3;             /* working variables       */
   BOOL       bol1;                         /* working variable        */
   int        iml_cmp;                      /* compare values          */
   int        iml_e_04;                     /* entry on stage 4        */
   int        iml_e_05;                     /* entry on stage 5        */
#ifdef XYZ1
   BOOL       bol_def_allow_init_ti;        /* parameter allow initial ticket is defined */
   BOOL       bol_trace_level;              /* parameter trace-level   */
#endif
   int        iml_server_entry_port;        /* UDP-port of radius-server */
   int        iml_len_server_entry_shasec_enc;  /* length radius-server shared-secret-encrypted */
   int        *aiml_val;                    /* address of value        */
   char       *achl1;                       /* working variable        */
   char       *achl_server_entry_shasec_enc;  /* radius-server shared-secret-encrypted */
   HL_WCHAR ** aawcl_val;                   /* address of value        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_server_e;          /* node server-entry       */
   DOMNode    *adsl_node_radius_group_name;  /* name of radius-group   */
   DOMNode    *adsl_node_radius_server_name;  /* name of radius-server */
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_06_name;
   HL_WCHAR * awcl_05_value;
   HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_radius_group_name;       /* radius-group name       */
#ifdef XYZ1
   HL_WCHAR * awcl_krb_serv_server_ineta;   /* Kerberos 5 KDC server-entry server INETA */
#endif
   HL_WCHAR * awcl_radius_group_comment;    /* radius-group comment    */
   HL_WCHAR * awcl_radius_group_corr_ldap;  /* radius-group corresponding-LDAP-service */
   HL_WCHAR * awcl_radius_server_name;      /* name server-entry radius-server */
   HL_WCHAR * awcl_radius_server_gate_ineta;  /* server-entry radius-server gate-ineta */
   HL_WCHAR * awcl_radius_server_radius_ineta;  /* server-entry radius-server radius-ineta */
   HL_WCHAR * awcl_radius_server_shasec_plain;  /* server-entry radius-server shared-secret-plain */
   HL_WCHAR * awcl_radius_server_comment;   /* server-entry radius-server comment */
#ifdef XYZ1
   HL_WCHAR * awcl_krb5_kdc_1_def_realm;  /* Kerberos 5 KDC default-realm */
#endif
   struct dsd_ldap_group *adsl_ldap_group_w1;  /* LDAP group           */
#ifdef XYZ1
   struct dsd_target_ineta_1 *adsl_server_ineta;  /* temporary KDC INETA */
#endif
   struct dsd_radius_group *adsl_radius_group_w1;  /* working variable */
   struct dsd_radius_entry *adsl_radius_entry_w1;  /* radius entry / single radius server */
   struct dsd_radius_entry *adsl_radius_entry_w2;  /* radius entry / single radius server */
   struct dsd_radius_group dsl_radius_group_fill;  /* definition radius-group */
   struct dsd_radius_entry dsl_radius_entry_fill;  /* definition radius entry / single radius server */
   struct dsd_unicode_string dsl_ucs_l;     /* unicode string          */
   struct dsd_radius_pass_msg_1 dsl_radius_pass_msg_1;  /* pass message for radius */
   char       chrl_work1[512];              /* working variable        */

   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02600W line=%d col=%d Error radius-group has no child - ignored",
                     MAC_XML_LINENO( adsp_node ), MAC_XML_COL( adsp_node ) );
     return;                                /* all done                */
   }
   /* search name first                                                */
   adsl_node_radius_group_name = NULL;      /* clear name of radius-group */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_radius_group_name) {  /* name already defined   */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02601W line=%d col=%d Error element radius-group name double - ignored",
                           MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ) );
         } else {
           adsl_node_radius_group_name = adsl_node_04;  /* save name   */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_radius_group_name == NULL) {  /* no name found        */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02602W line=%d col=%d Error radius-group has no name - ignored",
                     MAC_XML_LINENO( adsp_node ), MAC_XML_COL( adsp_node ) );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_radius_group_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02603W line=%d col=%d Error element radius-group name \"name\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_radius_group_name ), MAC_XML_COL( adsl_node_radius_group_name ) );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_radius_group_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02604W line=%d col=%d Error element radius-group name \"name\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_radius_group_name ), MAC_XML_COL( adsl_node_radius_group_name ) );
     return;                                /* do not process this entry */
   }
   adsl_radius_group_w1 = adsp_cs->adsc_loconf_1_fill->adsc_radius_group;  /* get chain Radius groups */
   while (adsl_radius_group_w1) {           /* loop over already defined radius-groups */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_radius_group_name, -1, ied_chs_utf_16,
                         adsl_radius_group_w1 + 1, adsl_radius_group_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02605W line=%d col=%d Error element radius-group %(ux)s already defined - ignored",
                       MAC_XML_LINENO( adsp_node ), MAC_XML_COL( adsp_node ),
                       awcl_radius_group_name );
       return;                              /* do not process this entry */
     }
     adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_radius_group() l%05d-T radius-group name %(ux)s",
                   __LINE__, awcl_radius_group_name );
#endif
   memset( &dsl_radius_group_fill, 0, sizeof(struct dsd_radius_group) );  /* definition Kerberos 5 KDC */
#ifdef XYZ1
   bol_def_allow_init_ti = FALSE;           /* reset parameter allow initial ticket is defined */
   bol_trace_level = FALSE;                 /* reset parameter trace-level */
#endif
   awcl_radius_group_comment = NULL;        /* radius-group comment  */
   awcl_radius_group_corr_ldap = NULL;      /* radius-group corresponding-LDAP-service */
#ifdef XYZ1
   awcl_krb5_kdc_1_def_realm = NULL;        /* Kerberos 5 KDC default-realm */
#endif
   adsl_node_04 = adsl_node_fichi;          /* get first node          */

   p_radius_gr_40:                          /* process node on stage 4 */
   if (adsl_node_04->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   if (adsl_node_04 == adsl_node_radius_group_name) {  /* name already processed */
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
   iml_e_04 = sizeof(achrs_node_radius_group_kw) / sizeof(achrs_node_radius_group_kw[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_04 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02610W line=%d col=%d Error element radius-group %(ux)s invalid node found \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                       awcl_radius_group_name, awcl_05_name );
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     iml_e_04--;                            /* decrement index         */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcl_05_name, -1, ied_chs_utf_16,
                         (void *) achrs_node_radius_group_kw[ iml_e_04 ], -1, ied_chs_utf_8 );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   if (iml_e_04 == DEF_XML_RAD_GRO_RADIUS_SERVER) {  /* found radius-server */
     goto p_radius_serv_00;                 /* process radius-server   */
   }
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02611W line=%d col=%d Error element radius-group %(ux)s name \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_05_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_05_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02612W line=%d col=%d Error element radius-group %(ux)s name \"%(ux)s\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_05_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   aiml_val = NULL;                         /* clear address of value  */
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_04) {                      /* switch keyword found    */
     case DEF_XML_RAD_GRO_CORR_LDAP:
       aawcl_val = &awcl_radius_group_corr_ldap;  /* radius-group corresponding-LDAP-service */
       break;
     case DEF_XML_RAD_GRO_OPTION:
       iml_e_05 = sizeof(dsrs_radius_gr_option_tab) / sizeof(dsrs_radius_gr_option_tab[0]);
       while (TRUE) {                       /* loop over possible values */
         if (iml_e_05 == 0) {               /* value not found in table */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02613W line=%d col=%d Error radius-group %(ux)s element option found \"%(ux)s\" - not defined, ignored",
                           MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                           awcl_radius_group_name, awcl_05_value );
           goto p_radius_gr_60;             /* get next node on stage 4 */
         }
         iml_e_05--;                        /* decrement index         */
         bol1 = m_cmp_vx_vx( &iml_cmp,
                             awcl_05_value, -1, ied_chs_utf_16,
                             dsrs_radius_gr_option_tab[ iml_e_05 ].achc_name, -1, ied_chs_utf_8 );
         if ((bol1) && (iml_cmp == 0)) break;  /* strings are equal    */
       }
       if (dsl_radius_group_fill.imc_options & dsrs_radius_gr_option_tab[ iml_e_05 ].imc_options) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02614W line=%d col=%d Error radius-group %(ux)s element option found \"%(ux)s\" but already set",
                         MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                         awcl_radius_group_name, awcl_05_value );
         goto p_radius_gr_60;               /* get next node on stage 4 */
       }
       dsl_radius_group_fill.imc_options |= dsrs_radius_gr_option_tab[ iml_e_05 ].imc_options;
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     case DEF_XML_RAD_GRO_SEND_CERTIFICATE:
       if (dsl_radius_group_fill.iec_rasc_conf1 != 0) {  /* send certificate */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02615W line=%d col=%d Error radius-group %(ux)s element send-certificate found \"%(ux)s\" but send-certificate already set - ignored",
                         MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                         awcl_radius_group_name, awcl_05_value );
         goto p_radius_gr_60;               /* get next node on stage 4 */
       }
       iml_e_05 = sizeof(dsrs_radius_gr_send_cert_tab) / sizeof(dsrs_radius_gr_send_cert_tab[0]);
       while (TRUE) {                       /* loop over possible values */
         if (iml_e_05 == 0) {               /* value not found in table */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02616W line=%d col=%d Error radius-group %(ux)s element send-certificate found \"%(ux)s\" - not defined, ignored",
                           MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                           awcl_radius_group_name, awcl_05_value );
           goto p_radius_gr_60;             /* get next node on stage 4 */
         }
         iml_e_05--;                        /* decrement index         */
         bol1 = m_cmp_vx_vx( &iml_cmp,
                             awcl_05_value, -1, ied_chs_utf_16,
                             dsrs_radius_gr_send_cert_tab[ iml_e_05 ].achc_name, -1, ied_chs_utf_8 );
         if ((bol1) && (iml_cmp == 0)) break;  /* strings are equal    */
       }
       dsl_radius_group_fill.iec_rasc_conf1 = dsrs_radius_gr_send_cert_tab[ iml_e_05 ].iec_rasc_conf1;  /* send certificate */
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     case DEF_XML_RAD_GRO_CONF_DESKTOP:
       if (dsl_radius_group_fill.iec_pttd_conf1 != 0) {  /* pass thru to desktop configuration */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02617W line=%d col=%d Error radius-group %(ux)s element configuration-desktop found \"%(ux)s\" but configuration-desktop already set - ignored",
                         MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                         awcl_radius_group_name, awcl_05_value );
         goto p_radius_gr_60;               /* get next node on stage 4 */
       }
       iml_e_05 = sizeof(dsrs_radius_gr_conf_desktop_tab) / sizeof(dsrs_radius_gr_conf_desktop_tab[0]);
       while (TRUE) {                       /* loop over possible values */
         if (iml_e_05 == 0) {               /* value not found in table */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02618W line=%d col=%d Error radius-group %(ux)s element configuration-desktop found \"%(ux)s\" - not defined, ignored",
                           MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                           awcl_radius_group_name, awcl_05_value );
           goto p_radius_gr_60;             /* get next node on stage 4 */
         }
         iml_e_05--;                        /* decrement index         */
         bol1 = m_cmp_vx_vx( &iml_cmp,
                             awcl_05_value, -1, ied_chs_utf_16,
                             dsrs_radius_gr_conf_desktop_tab[ iml_e_05 ].achc_name, -1, ied_chs_utf_8 );
         if ((bol1) && (iml_cmp == 0)) break;  /* strings are equal    */
       }
       dsl_radius_group_fill.iec_pttd_conf1 = dsrs_radius_gr_conf_desktop_tab[ iml_e_05 ].iec_pttd_conf1;  /* pass thru to desktop configuration */
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     case DEF_XML_RAD_GRO_CHARSET:
       if (dsl_radius_group_fill.iec_chs != 0) {  /* charset already set */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02620W line=%d col=%d Error radius-group %(ux)s element charset found \"%(ux)s\" but charset already set - ignored",
                         MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                         awcl_radius_group_name, awcl_05_value );
         goto p_radius_gr_60;               /* get next node on stage 4 */
       }
       iml_e_05 = sizeof(dsrs_radius_gr_charset_tab) / sizeof(dsrs_radius_gr_charset_tab[0]);
       while (TRUE) {                       /* loop over possible values */
         if (iml_e_05 == 0) {               /* value not found in table */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02621W line=%d col=%d Error radius-group %(ux)s element charset found \"%(ux)s\" - not defined, ignored",
                           MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                           awcl_radius_group_name, awcl_05_value );
           goto p_radius_gr_60;             /* get next node on stage 4 */
         }
         iml_e_05--;                        /* decrement index         */
         bol1 = m_cmp_vx_vx( &iml_cmp,
                             awcl_05_value, -1, ied_chs_utf_16,
                             dsrs_radius_gr_charset_tab[ iml_e_05 ].achc_name, -1, ied_chs_utf_8 );
         if ((bol1) && (iml_cmp == 0)) break;  /* strings are equal    */
       }
       dsl_radius_group_fill.iec_chs = dsrs_radius_gr_charset_tab[ iml_e_05 ].iec_chs;
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     case DEF_XML_RAD_GRO_TIMEOUT:
       aiml_val = &dsl_radius_group_fill.imc_timeout;  /* timeout in seconds / wait for radius response */
       break;
     case DEF_XML_RAD_GRO_RETRY_AFTER_ERROR:
       aiml_val = &dsl_radius_group_fill.imc_retry_after_error;  /* time retry after error seconds */
       break;
     case DEF_XML_RAD_GRO_COMMENT:
       aawcl_val = &awcl_radius_group_comment;  /* radius-group comment */
       break;
   }
   if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02630W line=%d col=%d Error element radius-group %(ux)s node \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_radius_group_name, awcl_05_name );
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     *aawcl_val = awcl_05_value;            /* save value found        */
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02631W line=%d col=%d Error element radius-group %(ux)s node \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_radius_group_name, awcl_05_name );
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     *aiml_val = m_get_wc_number( awcl_05_value );
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02632W line=%d col=%d Error element radius-group %(ux)s name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_radius_group_name, awcl_05_name, awcl_05_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02633W line=%d col=%d Error element radius-group %(ux)s name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_radius_group_name, awcl_05_name, awcl_05_value );
//     goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   /* program should never get here                                    */

   p_radius_gr_60:                          /* get next node on stage 4 */
   adsl_node_04 = adsl_node_04->getNextSibling();
   if (adsl_node_04) goto p_radius_gr_40;   /* process node on stage 4 */

   if (dsl_radius_group_fill.adsc_radius_entry == NULL) {  /* chain radius entry / single radius server */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02680W line=%d col=%d Error element radius-group %(ux)s no valid radius-server found - radius-group ignored",
                     MAC_XML_LINENO( adsp_node ), MAC_XML_COL( adsp_node ),
                     awcl_radius_group_name );
     return;
   }
   if (dsl_radius_group_fill.iec_chs == 0) {  /* charset not filled    */
     dsl_radius_group_fill.iec_chs = ied_chs_utf_8;  /* default charset UTF-8 */
   }
   if (awcl_radius_group_corr_ldap) {       /* radius-group corresponding-LDAP-service */
     adsl_ldap_group_w1 = adsp_cs->adsc_ldap_group;  /* chain of LDAP groups */
     while (adsl_ldap_group_w1) {           /* loop over all LDAP groups */
       bol1 = m_cmp_vx_vx( &iml_cmp,
                           adsl_ldap_group_w1 + 1, adsl_ldap_group_w1->imc_len_name, ied_chs_utf_8,
                           awcl_radius_group_corr_ldap, -1, ied_chs_utf_16 );
       if ((bol1) && (iml_cmp == 0)) {      /* strings are equal       */
         adsl_ldap_group_w1->imc_references++;  /* references to this LDAP group */
         break;
       }
       adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
     }
     if (adsl_ldap_group_w1 == NULL) {      /* LDAP group not found    */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02681W line=%d col=%d Error element radius-group %(ux)s corresponding-LDAP-service name \"%(ux)s\" not defined - ignored",
                       MAC_XML_LINENO( adsp_node ), MAC_XML_COL( adsp_node ),
                       awcl_radius_group_name, awcl_radius_group_corr_ldap );
     }
     dsl_radius_group_fill.adsc_ldap_group = adsl_ldap_group_w1;  /* corresponding LDAP group */
   }
   dsl_radius_group_fill.imc_len_name = m_len_vx_vx( ied_chs_utf_8, awcl_radius_group_name, -1, ied_chs_utf_16 );  /* length of name bytes */
   if (awcl_radius_group_comment) {         /* radius-group comment    */
     dsl_radius_group_fill.imc_len_comment = m_len_vx_vx( ied_chs_utf_8, awcl_radius_group_comment, -1, ied_chs_utf_16 );  /* length of Comment bytes */
   }
   iml1 = (sizeof(struct dsd_radius_group)
             + dsl_radius_group_fill.imc_len_name
             + dsl_radius_group_fill.imc_len_comment
             + sizeof(void *) - 1)
           & (0 - sizeof(void *));
   adsl_radius_entry_w1 = dsl_radius_group_fill.adsc_radius_entry;  /* get chain radius entry / single radius server */
   do {                                     /* loop over all defined radius-servers */
     iml1 += (sizeof(struct dsd_radius_entry)
                + adsl_radius_entry_w1->imc_len_name
                + adsl_radius_entry_w1->imc_len_comment
                + adsl_radius_entry_w1->imc_len_shasec
                + sizeof(void *) - 1)
              & (0 - sizeof(void *));
     adsl_radius_entry_w1 = adsl_radius_entry_w1->adsc_next;  /* get next in chain */
   } while (adsl_radius_entry_w1);
   adsl_radius_group_w1 = (struct dsd_radius_group *) malloc( iml1 );
   memcpy( adsl_radius_group_w1, &dsl_radius_group_fill, sizeof(struct dsd_radius_group) );
   m_cpy_vx_vx( adsl_radius_group_w1 + 1, dsl_radius_group_fill.imc_len_name, ied_chs_utf_8,
                awcl_radius_group_name, -1, ied_chs_utf_16 );
   adsl_radius_group_w1->adsc_radius_entry = NULL;  /* clear chain radius entry / single radius server */
   if (awcl_radius_group_comment) {         /* radius-group comment    */
     adsl_radius_group_w1->achc_comment = (char *) (adsl_radius_group_w1 + 1) + dsl_radius_group_fill.imc_len_name;  /* address comment */
     m_cpy_vx_vx( (char *) (adsl_radius_group_w1 + 1) + dsl_radius_group_fill.imc_len_name,
                  adsl_radius_group_w1->imc_len_comment, ied_chs_utf_8,
                  awcl_radius_group_comment, -1, ied_chs_utf_16 );
   }
   achl1 = (char *) adsl_radius_group_w1
             + ((sizeof(struct dsd_radius_group)
                   + dsl_radius_group_fill.imc_len_name
                   + dsl_radius_group_fill.imc_len_comment
                   + sizeof(void *) - 1)
                 & (0 - sizeof(void *)));
   adsl_radius_entry_w1 = dsl_radius_group_fill.adsc_radius_entry;  /* get chain radius entry / single radius server */
   do {                                     /* loop over all defined radius-servers */
     adsl_radius_entry_w2 = adsl_radius_entry_w1;  /* save the entry   */
     adsl_radius_entry_w1 = adsl_radius_entry_w1->adsc_next;  /* get next in chain */
     memcpy( achl1,
             adsl_radius_entry_w2,
             sizeof(struct dsd_radius_entry)
               + adsl_radius_entry_w2->imc_len_name
               + adsl_radius_entry_w2->imc_len_comment
               + adsl_radius_entry_w2->imc_len_shasec );
#define ADSL_RADIUS_ENTRY_G ((struct dsd_radius_entry *) achl1)
     ADSL_RADIUS_ENTRY_G->adsc_next = adsl_radius_group_w1->adsc_radius_entry;  /* get chain radius entry / single radius server */
     adsl_radius_group_w1->adsc_radius_entry = ADSL_RADIUS_ENTRY_G;  /* set new chain radius entry / single radius server */
     if (ADSL_RADIUS_ENTRY_G->imc_len_comment) {
       ADSL_RADIUS_ENTRY_G->achc_comment = (char *) (ADSL_RADIUS_ENTRY_G + 1) + ADSL_RADIUS_ENTRY_G->imc_len_name;  /* address comment */
     }
     ADSL_RADIUS_ENTRY_G->achc_shasec       /* address shared secret   */
        = (char *) (ADSL_RADIUS_ENTRY_G + 1) + ADSL_RADIUS_ENTRY_G->imc_len_name + ADSL_RADIUS_ENTRY_G->imc_len_comment;
     dsl_radius_pass_msg_1.adsc_radius_group = adsl_radius_group_w1;  /* definition Radius group */
     dsl_radius_pass_msg_1.adsc_radius_entry = ADSL_RADIUS_ENTRY_G;  /* definition Radius server */
     dsl_radius_pass_msg_1.imc_xml_lineno = MAC_XML_LINENO( adsp_node );  /* line number in XML configuration file */
     dsl_radius_pass_msg_1.imc_xml_col = MAC_XML_COL( adsp_node );  /* column in XML configuration file */
     bol1 = m_radius_server_open( chrl_work1, sizeof(chrl_work1),
                                  &m_msg_open_radius,
                                  &dsl_radius_pass_msg_1,  /* pass message for radius */
                                  ADSL_RADIUS_ENTRY_G );
#undef ADSL_RADIUS_ENTRY_G
     achl1 += (sizeof(struct dsd_radius_entry)
                 + adsl_radius_entry_w2->imc_len_name
                 + adsl_radius_entry_w2->imc_len_comment
                 + adsl_radius_entry_w2->imc_len_shasec
                 + sizeof(void *) - 1)
               & (0 - sizeof(void *));
     free( adsl_radius_entry_w2 );          /* free the entry          */
   } while (adsl_radius_entry_w1);
   adsl_radius_group_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_radius_group;  /* get chain of radius-group */
   adsp_cs->adsc_loconf_1_fill->adsc_radius_group = adsl_radius_group_w1;  /* set chain of radius-group */
   return;                                  /* radius-group defined    */

   p_radius_serv_00:                        /* process radius-server   */
   adsl_node_server_e = adsl_node_04->getFirstChild();  /* node server-entry */
   if (adsl_node_server_e == NULL) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02640W line=%d col=%d Error radius-group %(ux)s radius-server has no child - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   /* search name first                                                */
   adsl_node_radius_server_name = NULL;     /* clear name of radius-server */
   adsl_node_05 = adsl_node_server_e;       /* get first node          */
   do {
     if (adsl_node_05->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_radius_server_name) {  /* name already defined  */
           m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02641W line=%d col=%d Error radius-group %(ux)s radius-server name double - ignored",
                           MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                           awcl_radius_group_name );
         } else {
           adsl_node_radius_server_name = adsl_node_05;  /* save name  */
         }
       }
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);
   if (adsl_node_radius_server_name == NULL) {  /* no name found       */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02642W line=%d col=%d Error radius-group %(ux)s radius-server has no name - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_06 = adsl_node_radius_server_name->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02643W line=%d col=%d Error radius-group %(ux)s element radius-server name \"name\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_radius_server_name ), MAC_XML_COL( adsl_node_radius_server_name ),
                     awcl_radius_group_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_radius_server_name = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02644W line=%d col=%d Error radius-group %(ux)s element radius-server name \"name\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_radius_server_name ), MAC_XML_COL( adsl_node_radius_server_name ),
                     awcl_radius_group_name );
     goto p_radius_gr_60;                   /* get next node on stage 4 */
   }
   adsl_radius_entry_w1 = dsl_radius_group_fill.adsc_radius_entry;  /* chain radius entry / single radius server */
   while (adsl_radius_entry_w1) {           /* loop over already defined radius-servers */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcl_radius_server_name, -1, ied_chs_utf_16,
                         adsl_radius_entry_w1 + 1, adsl_radius_entry_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml_cmp == 0)) {          /* strings are equal       */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02645W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" already defined - ignored",
                       MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                       awcl_radius_group_name, awcl_radius_server_name );
       goto p_radius_gr_60;                 /* get next node on stage 4 */
     }
     adsl_radius_entry_w1 = adsl_radius_entry_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_radius_group() l%05d-T radius-group name %(ux)s radius-server %(ux)s.",
                   __LINE__, awcl_radius_group_name, awcl_radius_server_name );
#endif
   adsl_node_05 = adsl_node_server_e;       /* get first node          */
   memset( &dsl_radius_entry_fill, 0, sizeof(struct dsd_radius_entry) );  /* radius entry / single radius server */
   iml_server_entry_port = -1;              /* UDP-port of radius-server */
   iml_len_server_entry_shasec_enc = 0;     /* length radius-server shared-secret-encrypted */
   awcl_radius_server_gate_ineta = NULL;    /* server-entry radius-server gate-ineta */
   awcl_radius_server_radius_ineta = NULL;  /* server-entry radius-server radius-ineta */
   awcl_radius_server_shasec_plain = NULL;  /* server-entry radius-server shared-secret-plain */
   awcl_radius_server_comment = NULL;       /* server-entry radius-server comment */

   p_radius_serv_40:                        /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_radius_serv_60;                 /* get next node on stage 5 */
   }
   if (adsl_node_05 == adsl_node_radius_server_name) {  /* name already processed */
     goto p_radius_serv_60;                 /* get next node on stage 5 */
   }
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_radius_entry_kw) / sizeof(achrs_node_radius_entry_kw[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02650W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                       MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                       awcl_radius_group_name, awcl_radius_server_name, awcl_06_name );
       goto p_radius_serv_60;               /* get next node on stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_vx_vx( &iml_cmp,
                         awcl_06_name, -1, ied_chs_utf_16,
                         (void *) achrs_node_radius_entry_kw[ iml_e_05 ], -1, ied_chs_utf_8 );
     if (bol1 && (iml_cmp == 0)) {          /* strings are equal       */
       break;
     }
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02651W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" has no child - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_radius_group_name, awcl_radius_server_name, awcl_06_name );
     goto p_radius_serv_60;                 /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02652W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" no TEXT_NODE found - ignored",
                     MAC_XML_LINENO( adsl_node_05 ), MAC_XML_COL( adsl_node_05 ),
                     awcl_radius_group_name, awcl_radius_server_name, awcl_06_name );
     goto p_radius_serv_60;                 /* get next node on stage 5 */
   }
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_05) {                      /* switch keyword found    */
     case DEF_XML_RAD_ENTRY_GATE_INETA:
       aawcl_val = &awcl_radius_server_gate_ineta;  /* server-entry radius-server gate-ineta */
       break;
     case DEF_XML_RAD_ENTRY_RADIUS_INETA:
       aawcl_val = &awcl_radius_server_radius_ineta;  /* server-entry radius-server radius-ineta */
       break;
     case DEF_XML_RAD_ENTRY_UDP_PORT:
       if (iml_server_entry_port >= 0) {    /* UDP-port of radius-server */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02660W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"%(ux)s\" double - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name, awcl_06_name );
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
       iml_server_entry_port = m_get_port_no( awcl_06_value, -1, ied_chs_utf_16 );
       if (iml_server_entry_port >= 0) {    /* port valid              */
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02661W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"UDP-port\" value \"%(ux)s\" no valid port-number - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_radius_group_name, awcl_radius_server_name, awcl_06_value );
       goto p_radius_serv_60;               /* get next node on stage 5 */
     case DEF_XML_RAD_ENTRY_SHASECR_PLAIN:
       if (iml_len_server_entry_shasec_enc > 0) {  /* length radius-server shared-secret-encrypted */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02662W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"shared-secret-plain\" value \"%(ux)s\" but shared-secret-encrypted already set - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name, awcl_06_value );
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
       aawcl_val = &awcl_radius_server_shasec_plain;  /* server-entry radius-server shared-secret-plain */
       break;
     case DEF_XML_RAD_ENTRY_SHASECR_ENCRYPTED:
       if (iml_len_server_entry_shasec_enc > 0) {  /* length radius-server shared-secret-encrypted */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02663W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"shared-secret-encrypted\" double - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name );
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
       if (awcl_radius_server_shasec_plain) {  /* server-entry radius-server shared-secret-plain */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02664W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"shared-secret-encrypted\" but shared-secret-plain already set - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name );
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
       dsl_ucs_l.ac_str = awcl_06_value;    /* address of string       */
       dsl_ucs_l.imc_len_str = -1;          /* length string in elements */
       dsl_ucs_l.iec_chs_str = ied_chs_utf_16;  /* character set string */
       iml1 = (HL_WCSLEN( awcl_06_value ) + 4 - 1) / 4 * 3;
       achl_server_entry_shasec_enc = (char *) malloc( iml1 );  /* radius-server shared-secret-encrypted */
       iml_len_server_entry_shasec_enc = m_get_ucs_base64( &iml2, &iml3,
                                                           achl_server_entry_shasec_enc, iml1,
                                                           &dsl_ucs_l );
       if (iml_len_server_entry_shasec_enc <= 0) {  /* returned error  */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02665W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"shared-secret-encrypted\" base64 error %d position %d in string \"%(ux)s\" - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name,
                         iml2, iml3, awcl_06_value );
         free( achl_server_entry_shasec_enc );  /* free memory again   */
         goto p_radius_serv_60;             /* get next node on stage 5 */
       }
// to-do 19.12.11 KB
       bol1 = m_check_vx( achl_server_entry_shasec_enc, iml_len_server_entry_shasec_enc, ied_chs_utf_8 );  /* check Unicode UTF-8 */
       if (bol1 == FALSE) {                 /* error occured           */
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02666W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"shared-secret-encrypted\" string \"%(ux)s\" decoded no valid UTF-8 - ignored",
                         MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                         awcl_radius_group_name, awcl_radius_server_name,
                         awcl_06_value );
         free( achl_server_entry_shasec_enc );  /* free memory again   */
         iml_len_server_entry_shasec_enc = 0;  /* set string not valid */
       }
       goto p_radius_serv_60;               /* get next node on stage 5 */
     case DEF_XML_RAD_ENTRY_COMMENT:
       aawcl_val = &awcl_radius_server_comment;  /* server-entry radius-server comment */
   }
// if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02668W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" node \"%(ux)s\" double - ignored",
                       MAC_XML_LINENO( adsl_node_06 ), MAC_XML_COL( adsl_node_06 ),
                       awcl_radius_group_name, awcl_radius_server_name, awcl_06_name );
       goto p_radius_serv_60;               /* get next node on stage 5 */
     }
     *aawcl_val = awcl_06_value;            /* save value found        */
//   goto p_radius_serv_60;                 /* get next node on stage 5 */
// }

   p_radius_serv_60:                        /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_radius_serv_40;  /* process node on stage 5 */

   if (awcl_radius_server_radius_ineta == NULL) {  /* no server-entry radius-server radius-ineta */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02670W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" no radius-ineta defined - radius-server ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_radius_server_name );
     goto p_radius_serv_68;                 /* free resources radius-server */
   }
   if (iml_server_entry_port < 0) {         /* no UDP-port of radius-server */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02671W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" no UDP-port defined - radius-server ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_radius_server_name );
     goto p_radius_serv_68;                 /* free resources radius-server */
   }
   if (   (awcl_radius_server_shasec_plain == NULL)  /* server-entry radius-server shared-secret-plain */
       && (iml_len_server_entry_shasec_enc <= 0)) {  /* length radius-server shared-secret-encrypted */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02672W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" neither shared-secret-plain nor shared-secret-encrypted defined - radius-server ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_radius_server_name );
     goto p_radius_serv_68;                 /* free resources radius-server */
   }
   iml1 = m_build_udp_param( &dsl_radius_entry_fill.dsc_udp_param_1,  /* definition UDP parameters radius */
                             chrl_work1,
                             awcl_radius_server_gate_ineta, -1, ied_chs_utf_16,
                             awcl_radius_server_radius_ineta, -1, ied_chs_utf_16 );
   if (iml1 != 0) {                         /* subroutine returned error */
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02673W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" gate-ineta and radius-ineta \"%(ux)s\" could not be resolved - error %d %s - radius-server ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_radius_server_name, awcl_radius_server_radius_ineta,
                     iml1, chrl_work1 );
     goto p_radius_serv_68;                 /* free resources radius-server */
   }
   if (dsl_radius_entry_fill.dsc_udp_param_1.dsc_soa_target.ss_family == AF_INET6) {  /* address information target */
     ((struct sockaddr_in6 *) &dsl_radius_entry_fill.dsc_udp_param_1.dsc_soa_target)->sin6_port = htons( iml_server_entry_port );
   } else {
     ((struct sockaddr_in *) &dsl_radius_entry_fill.dsc_udp_param_1.dsc_soa_target)->sin_port = htons( iml_server_entry_port );
   }
   adsl_radius_entry_w1 = dsl_radius_group_fill.adsc_radius_entry;  /* get chain radius entry / single radius server */
   while (adsl_radius_entry_w1) {           /* loop over all already defined radius-servers */
     if (!memcmp( &dsl_radius_entry_fill.dsc_udp_param_1.dsc_soa_target,
                  &adsl_radius_entry_w1->dsc_udp_param_1.dsc_soa_target,
                  sizeof(struct sockaddr_storage) )) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02674W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" radius-ineta and UDP-port same as radius-server \"%.*(u8)s\" - radius-server ignored",
                       MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                       awcl_radius_group_name, awcl_radius_server_name,
                       adsl_radius_entry_w1->imc_len_name, adsl_radius_entry_w1 + 1 );
       goto p_radius_serv_68;               /* free resources radius-server */
     }
     adsl_radius_entry_w1 = adsl_radius_entry_w1->adsc_next;  /* get next in chain */
   }
   /* check if radius-server defined elsewhere                         */
   adsl_radius_group_w1 = adsp_cs->adsc_loconf_1_fill->adsc_radius_group;  /* get chain Radius groups */
   while (adsl_radius_group_w1) {           /* loop over already defined radius-groups */
     adsl_radius_entry_w1 = adsl_radius_group_w1->adsc_radius_entry;  /* get chain radius entry / single radius server */
     do {                                   /* loop over defined radius-server */
       if (!memcmp( &dsl_radius_entry_fill.dsc_udp_param_1.dsc_soa_target,
                    &adsl_radius_entry_w1->dsc_udp_param_1.dsc_soa_target,
                    sizeof(struct sockaddr_storage) )) {
         m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02675W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" radius-ineta and UDP-port same as radius-group %.*(u8)s radius-server %.*(u8)s - may cause problems",
                         MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                         awcl_radius_group_name, awcl_radius_server_name,
                         adsl_radius_group_w1->imc_len_name, adsl_radius_group_w1 + 1,
                         adsl_radius_entry_w1->imc_len_name, adsl_radius_entry_w1 + 1 );
       }
       adsl_radius_entry_w1 = adsl_radius_entry_w1->adsc_next;  /* get next in chain */
     } while (adsl_radius_entry_w1);
     adsl_radius_group_w1 = adsl_radius_group_w1->adsc_next;  /* get next in chain */
   }
   dsl_radius_entry_fill.imc_len_name = m_len_vx_vx( ied_chs_utf_8, awcl_radius_server_name, -1, ied_chs_utf_16 );  /* length of name bytes */
   if (awcl_radius_server_comment) {        /* server-entry radius-server comment */
     dsl_radius_entry_fill.imc_len_comment = m_len_vx_vx( ied_chs_utf_8, awcl_radius_server_comment, -1, ied_chs_utf_16 );  /* length of Comment bytes */
   }
   iml1 = iml_len_server_entry_shasec_enc;  /* length radius-server shared-secret-encrypted */
   if (iml1 <= 0) {                         /* shared-secret-encrypted not set */
     iml1 = m_len_vx_vx( ied_chs_utf_8, awcl_radius_server_shasec_plain, -1, ied_chs_utf_16 );  /* server-entry radius-server shared-secret-plain */
   }
   adsl_radius_entry_w1 = (struct dsd_radius_entry *) malloc( sizeof(struct dsd_radius_entry)
                                                                + dsl_radius_entry_fill.imc_len_name
                                                                + dsl_radius_entry_fill.imc_len_comment
                                                                + iml1 );
   memcpy( adsl_radius_entry_w1, &dsl_radius_entry_fill, sizeof(struct dsd_radius_entry) );
   adsl_radius_entry_w1->imc_len_shasec = iml1;  /* length of shared secret */
   m_cpy_vx_vx( adsl_radius_entry_w1 + 1, dsl_radius_entry_fill.imc_len_name, ied_chs_utf_8,
                awcl_radius_server_name, -1, ied_chs_utf_16 );
   if (awcl_radius_server_comment) {        /* server-entry radius-server comment */
     adsl_radius_entry_w1->achc_comment = (char *) (adsl_radius_entry_w1 + 1) + dsl_radius_entry_fill.imc_len_name;
     m_cpy_vx_vx( adsl_radius_entry_w1->achc_comment, dsl_radius_entry_fill.imc_len_comment, ied_chs_utf_8,
                  awcl_radius_server_comment, -1, ied_chs_utf_16 );
   }
   adsl_radius_entry_w1->achc_shasec        /* address shared secret   */
     = (char *) (adsl_radius_entry_w1 + 1) + dsl_radius_entry_fill.imc_len_name + dsl_radius_entry_fill.imc_len_comment;
   if (iml_len_server_entry_shasec_enc > 0) {  /* length radius-server shared-secret-encrypted */
     memcpy( adsl_radius_entry_w1->achc_shasec, achl_server_entry_shasec_enc, iml_len_server_entry_shasec_enc );
   } else {                                 /* shared-secret-plain     */
     m_cpy_vx_vx( adsl_radius_entry_w1->achc_shasec, iml1, ied_chs_utf_8,
                  awcl_radius_server_shasec_plain, -1, ied_chs_utf_16 );
   }
   adsl_radius_entry_w1->adsc_next = dsl_radius_group_fill.adsc_radius_entry;  /* get old chain radius entry / single radius server */
   dsl_radius_group_fill.adsc_radius_entry = adsl_radius_entry_w1;  /* set new chain radius entry / single radius server */
   /* prepare HMAC                                                     */
   if (iml1 > sizeof(adsl_radius_entry_w1->byrc_hmac_1)) {
     m_hlnew_printf( HLOG_WARN1, "HWSPXMLC02676W line=%d col=%d Error radius-group %(ux)s element radius-server name \"%(ux)s\" shared-secret too long - cannot generate HMAC for Radius EAP",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_radius_group_name, awcl_radius_server_name );
     goto p_radius_serv_68;                 /* end prepare HMAC        */
   }
   memset( adsl_radius_entry_w1->byrc_hmac_1, 0X36, sizeof(adsl_radius_entry_w1->byrc_hmac_1) );  /* for HMAC */
   memset( adsl_radius_entry_w1->byrc_hmac_2, 0X5C, sizeof(adsl_radius_entry_w1->byrc_hmac_2) );  /* for HMAC */
   do {
     iml1--;                                /* decrement index         */
     adsl_radius_entry_w1->byrc_hmac_1[ iml1 ] ^= *((unsigned char *) adsl_radius_entry_w1->achc_shasec + iml1);
     adsl_radius_entry_w1->byrc_hmac_2[ iml1 ] ^= *((unsigned char *) adsl_radius_entry_w1->achc_shasec + iml1);
   } while (iml1 > 0);

   p_radius_serv_68:                        /* free resources radius-server */
   if (iml_len_server_entry_shasec_enc > 0) {  /* length radius-server shared-secret-encrypted */
     free( achl_server_entry_shasec_enc );  /* free memory radius-server shared-secret-encrypted */
   }
   goto p_radius_gr_60;                     /* get next node on stage 4 */
} /* end m_conf_radius_group()                                         */

/** process configuration Kerberos-5-KDC                               */
static void m_conf_krb5_kdc( DOMNode *adsp_node,
                             struct dsd_conf_serv *adsp_cs ) {
   int        iml1;                         /* working variable        */
   BOOL       bol1;                         /* working variable        */
   int        iml_cmp;                      /* compare values          */
   int        iml_e_04;                     /* entry on stage 4        */
   int        iml_e_05;                     /* entry on stage 5        */
   BOOL       bol_def_allow_init_ti;        /* parameter allow initial ticket is defined */
   BOOL       bol_trace_level;              /* parameter trace-level   */
   int        *aiml_val;                    /* address of value        */
   HL_WCHAR ** aawcl_val;                   /* address of value        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   DOMNode    *adsl_node_server_e;          /* node server-entry       */
   DOMNode    *adsl_node_krb5_kdc_1_name;   /* name of Kerberos 5 KDC  */
   DOMNode    *adsl_node_krb5_kdc_server_name;  /* name of Kerberos 5 KDC server */
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_06_name;
   HL_WCHAR * awcl_05_value;
   HL_WCHAR * awcl_06_value;
   HL_WCHAR * awcl_krb5_kdc_1_name;         /* Kerberos 5 KDC name     */
   HL_WCHAR * awcl_krb5_kdc_server_name;    /* Kerberos 5 KDC name server-entry */
   HL_WCHAR * awcl_krb_serv_server_ineta;   /* Kerberos 5 KDC server-entry server INETA */
   HL_WCHAR * awcl_krb5_kdc_1_comment;      /* Kerberos 5 KDC comment  */
   HL_WCHAR * awcl_krb5_kdc_1_corr_ldap;    /* Kerberos 5 KDC corresponding-LDAP-service */
   HL_WCHAR * awcl_krb5_kdc_server_comment;  /* Kerberos 5 KDC server-entry server comment */
   HL_WCHAR * awcl_krb5_kdc_1_def_realm;    /* Kerberos 5 KDC default-realm */
   struct dsd_ldap_group *adsl_ldap_group_w1;  /* LDAP group           */
   struct dsd_target_ineta_1 *adsl_server_ineta;  /* temporary KDC INETA */
   struct dsd_krb5_kdc_1 *adsl_krb5_kdc_1_w1;  /* working variable     */
   struct dsd_krb5_kdc_server *adsl_krb5_kdc_server_w1;  /* working variable */
   struct dsd_krb5_kdc_1 dsl_krb5_kdc_1_fill;  /* definition Kerberos 5 KDC */
   struct dsd_krb5_kdc_server dsl_krb5_kdc_server_fill;  /* definition Kerberos 5 KDC server */
// char       chrl_work1[512];              /* working variable        */

//#ifdef OLD01
   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error Kerberos-5-KDC has no child - ignored" );
     return;                                /* all done                */
   }
//#endif
// adsl_node_fichi = adsp_node;
   /* search name first                                                */
   adsl_node_krb5_kdc_1_name = NULL;        /* clear name of Kerberos-5-KDC */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */
   do {
     if (adsl_node_04->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_krb5_kdc_1_name) {   /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error element Kerberos-5-KDC name double - ignored" );
         } else {
           adsl_node_krb5_kdc_1_name = adsl_node_04;  /* save name     */
         }
       }
     }
     adsl_node_04 = adsl_node_04->getNextSibling();
   } while (adsl_node_04);
   if (adsl_node_krb5_kdc_1_name == NULL) {  /* no name found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error Kerberos-5-KDC has no name - ignored" );
     return;                                /* do not process this entry */
   }
   /* retrieve name                                                    */
   adsl_node_05 = adsl_node_krb5_kdc_1_name->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC name \"name\" has no child - ignored" );
     return;                                /* do not process this entry */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_krb5_kdc_1_name = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC name \"name\" no TEXT_NODE found - ignored" );
     return;                                /* do not process this entry */
   }
   adsl_krb5_kdc_1_w1 = adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1;  /* get chain of Kerberos 5 KDC */
   while (adsl_krb5_kdc_1_w1) {             /* loop over already defined Kerberos-5-KDC */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_krb5_kdc_1_name, -1, ied_chs_utf_16,
                         adsl_krb5_kdc_1_w1 + 1, adsl_krb5_kdc_1_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s already defined - ignored",
                       awcl_krb5_kdc_1_name );
       return;                              /* do not process this entry */
     }
     adsl_krb5_kdc_1_w1 = adsl_krb5_kdc_1_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_krb5_kdc() l%05d-T Kerberos-5-KDC name %(ux)s",
                   __LINE__, awcl_krb5_kdc_1_name );
#endif
   memset( &dsl_krb5_kdc_1_fill, 0, sizeof(struct dsd_krb5_kdc_1) );  /* definition Kerberos 5 KDC */
   bol_def_allow_init_ti = FALSE;           /* reset parameter allow initial ticket is defined */
   bol_trace_level = FALSE;                 /* reset parameter trace-level */
   awcl_krb5_kdc_1_comment = NULL;          /* Kerberos 5 KDC comment  */
   awcl_krb5_kdc_1_corr_ldap = NULL;        /* Kerberos 5 KDC corresponding-LDAP-service */
   awcl_krb5_kdc_1_def_realm = NULL;        /* Kerberos 5 KDC default-realm */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */

   p_krb_kdc_40:                            /* process node on stage 4 */
   if (adsl_node_04->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   if (adsl_node_04 == adsl_node_krb5_kdc_1_name) {  /* name already processed */
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
   iml_e_04 = sizeof(achrs_node_krb5_kdc) / sizeof(achrs_node_krb5_kdc[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_04 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s invalid node found \"%(ux)s\" - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     }
     iml_e_04--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_name, (char *) achrs_node_krb5_kdc[ iml_e_04 ] );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   if (iml_e_04 == DEF_XML_KRB5_KDC_SERVER_ENTRY) {
     goto p_krb_serv_00;                    /* process server-entry    */
   }
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" has no child - ignored",
                     awcl_krb5_kdc_1_name, awcl_05_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   do {
     if (adsl_node_05->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_05_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
       break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_krb5_kdc_1_name, awcl_05_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   aiml_val = NULL;                         /* clear address of value  */
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_04) {                      /* switch keyword found    */
     case DEF_XML_KRB5_KDC_COMMENT:
       aawcl_val = &awcl_krb5_kdc_1_comment;  /* Kerberos 5 KDC comment */
       break;
     case DEF_XML_KRB5_KDC_CORR_LDAP:
       aawcl_val = &awcl_krb5_kdc_1_corr_ldap;  /* Kerberos 5 KDC corresponding-LDAP-service */
       break;
     case DEF_XML_KRB5_KDC_DEF_REALM:
       aawcl_val = &awcl_krb5_kdc_1_def_realm;  /* Kerberos 5 KDC default-realm */
       break;
     case DEF_XML_KRB5_KDC_CLOCKSKEW:
       aiml_val = &dsl_krb5_kdc_1_fill.imc_clockskew;  /* clockskew in seconds */
       break;
     case DEF_XML_KRB5_KDC_TICKET_LIFET:
       aiml_val = &dsl_krb5_kdc_1_fill.imc_ticket_lifetime;  /* ticket-lifetime in seconds */
       break;
     case DEF_XML_KRB5_KDC_RENEWA_LIFET:
       aiml_val = &dsl_krb5_kdc_1_fill.imc_renewable_lifetime;  /* renewable-lifetime in seconds */
       break;
     case DEF_XML_KRB5_KDC_ALLOW_INIT_TI:
       if (bol_def_allow_init_ti) {         /* parameter allow initial ticket is defined */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" double - ignored",
                         awcl_krb5_kdc_1_name, awcl_05_name );
         goto p_krb_kdc_60;                 /* get next node on stage 4 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_value, "YES" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         dsl_krb5_kdc_1_fill.boc_allow_initital_ticket = TRUE;  /* allow initial ticket */
         bol_def_allow_init_ti = TRUE;      /* parameter allow initial ticket is defined */
         goto p_krb_kdc_60;                 /* get next node on stage 4 */
       }
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_05_value, "NO" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         dsl_krb5_kdc_1_fill.boc_allow_initital_ticket = FALSE;  /* do not allow initial ticket */
         bol_def_allow_init_ti = TRUE;      /* parameter allow initial ticket is defined */
         goto p_krb_kdc_60;                 /* get next node on stage 4 */
       }
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" value \"%(ux)s\" neither \"YES\" nor \"NO\" - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name, awcl_05_value );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     case DEF_XML_KRB5_KDC_TRACE_LEVEL:
       if (bol_trace_level) {               /* parameter trace-level */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" double - ignored",
                         awcl_krb5_kdc_1_name, awcl_05_name );
         goto p_krb_kdc_60;                 /* get next node on stage 4 */
       }
       dsl_krb5_kdc_1_fill.imc_trace_level = m_get_wc_number( awcl_05_value );
       if (dsl_krb5_kdc_1_fill.imc_trace_level < 0) {                   /* value is not numeric    */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" value \"%(ux)s\" not numeric - ignored",
                         awcl_krb5_kdc_1_name, awcl_05_name, awcl_05_value );
         dsl_krb5_kdc_1_fill.imc_trace_level = 0;
         goto p_krb_kdc_60;                 /* get next node on stage 4 */
       }
       bol_trace_level = TRUE;              /* parameter trace-level */
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
   }
   if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     }
     *aawcl_val = awcl_05_value;            /* save value found        */
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s node \"%(ux)s\" double - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     }
     *aiml_val = m_get_wc_number( awcl_05_value );
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name, awcl_05_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_krb_kdc_60;                    /* get next node on stage 4 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       awcl_krb5_kdc_1_name, awcl_05_name, awcl_05_value );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     }
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   /* program should never get here                                    */

   p_krb_kdc_60:                            /* get next node on stage 4 */
   adsl_node_04 = adsl_node_04->getNextSibling();
   if (adsl_node_04) goto p_krb_kdc_40;     /* process node on stage 4 */

   if (dsl_krb5_kdc_1_fill.adsc_kdc_server == NULL) {  /* chain of Kerberos 5 KDC servers */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s no valid server-entry found - Kerberos-5-KDC ignored",
                     awcl_krb5_kdc_1_name );
     return;
   }
   if (awcl_krb5_kdc_1_corr_ldap) {         /* Kerberos 5 KDC corresponding-LDAP-service */
     adsl_ldap_group_w1 = adsp_cs->adsc_ldap_group;  /* chain of LDAP groups */
     while (adsl_ldap_group_w1) {           /* loop over all LDAP groups */
       bol1 = m_cmp_vx_vx( &iml_cmp,
                           adsl_ldap_group_w1 + 1, adsl_ldap_group_w1->imc_len_name, ied_chs_utf_8,
                           awcl_krb5_kdc_1_corr_ldap, -1, ied_chs_utf_16 );
       if ((bol1) && (iml_cmp == 0)) {      /* strings are equal       */
         adsl_ldap_group_w1->imc_references++;  /* references to this LDAP group */
         break;
       }
       adsl_ldap_group_w1 = adsl_ldap_group_w1->adsc_next;  /* get next in chain */
     }
     if (adsl_ldap_group_w1 == NULL) {      /* LDAP group not found    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element Kerberos-5-KDC %(ux)s corresponding-LDAP-service name \"%(ux)s\" not defined - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_1_corr_ldap );
     }
     dsl_krb5_kdc_1_fill.adsc_ldap_group = adsl_ldap_group_w1;  /* corresponding LDAP group */
   }
   dsl_krb5_kdc_1_fill.imc_len_name = m_count_wchar_z_to_utf8( awcl_krb5_kdc_1_name );  /* length of name bytes */
   if (awcl_krb5_kdc_1_comment) {           /* Kerberos 5 KDC comment  */
     dsl_krb5_kdc_1_fill.imc_len_comment = m_count_wchar_z_to_utf8( awcl_krb5_kdc_1_comment );  /* length of Comment bytes */
   }
   if (awcl_krb5_kdc_1_def_realm) {         /* Kerberos 5 KDC default-realm */
     dsl_krb5_kdc_1_fill.imc_len_default_realm = m_count_wchar_z_to_utf8( awcl_krb5_kdc_1_def_realm );  /* length of default-realm bytes */
   }
   adsl_krb5_kdc_1_w1 = (struct dsd_krb5_kdc_1 *) malloc( sizeof(struct dsd_krb5_kdc_1)
                                                            + dsl_krb5_kdc_1_fill.imc_len_name
                                                            + dsl_krb5_kdc_1_fill.imc_len_comment
                                                            + dsl_krb5_kdc_1_fill.imc_len_default_realm );
   memcpy( adsl_krb5_kdc_1_w1, &dsl_krb5_kdc_1_fill, sizeof(struct dsd_krb5_kdc_1) );
   m_trans_wchar_z_to_utf8( (char *) (adsl_krb5_kdc_1_w1 + 1) + 0, awcl_krb5_kdc_1_name );
   if (awcl_krb5_kdc_1_comment) {           /* Kerberos 5 KDC comment  */
     m_trans_wchar_z_to_utf8( (char *) (adsl_krb5_kdc_1_w1 + 1) + dsl_krb5_kdc_1_fill.imc_len_name,
                              awcl_krb5_kdc_1_comment );
   }
   if (awcl_krb5_kdc_1_def_realm) {         /* Kerberos 5 KDC default-realm */
     m_trans_wchar_z_to_utf8( (char *) (adsl_krb5_kdc_1_w1 + 1)
                                + dsl_krb5_kdc_1_fill.imc_len_name
                                + dsl_krb5_kdc_1_fill.imc_len_comment,
                              awcl_krb5_kdc_1_def_realm );
   }
   adsl_krb5_kdc_1_w1->adsc_next = adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1;  /* get chain of Kerberos 5 KDC */
   adsp_cs->adsc_loconf_1_fill->adsc_krb5_kdc_1 = adsl_krb5_kdc_1_w1;  /* set chain of Kerberos 5 KDC */
   return;                                  /* Kerberos 5 KDC defined  */

   p_krb_serv_00:                           /* process server-entry    */
   adsl_node_server_e = adsl_node_04->getFirstChild();  /* node server-entry */
   if (adsl_node_server_e == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s server-entry has no child - ignored",
                     awcl_krb5_kdc_1_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   /* search name first                                                */
   adsl_node_krb5_kdc_server_name = NULL;   /* clear name of Kerberos 5 KDC server */
   adsl_node_05 = adsl_node_server_e;       /* get first node          */
   do {
     if (adsl_node_05->getNodeType() == DOMNode::ELEMENT_NODE) {
       awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
       bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_name, "name" );
       if ((bol1) && (iml1 == 0)) {         /* strings are equal       */
         if (adsl_node_krb5_kdc_server_name) {   /* name already defined    */
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s server-entry name double - ignored",
                           awcl_krb5_kdc_1_name );
         } else {
           adsl_node_krb5_kdc_server_name = adsl_node_05;  /* save name */
         }
       }
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);
   if (adsl_node_krb5_kdc_server_name == NULL) {  /* no name found     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s server-entry has no name - ignored",
                     awcl_krb5_kdc_1_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   /* retrieve name                                                    */
   adsl_node_06 = adsl_node_krb5_kdc_server_name->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"name\" has no child - ignored",
                     awcl_krb5_kdc_1_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_krb5_kdc_server_name = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"name\" no TEXT_NODE found - ignored",
                     awcl_krb5_kdc_1_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   adsl_krb5_kdc_server_w1 = dsl_krb5_kdc_1_fill.adsc_kdc_server;  /* chain of Kerberos 5 KDC servers */
   while (adsl_krb5_kdc_server_w1) {             /* loop over already defined Kerberos-5-KDC */
     bol1 = m_cmp_vx_vx( &iml1,
                         awcl_krb5_kdc_server_name, -1, ied_chs_utf_16,
                         adsl_krb5_kdc_server_w1 + 1, adsl_krb5_kdc_server_w1->imc_len_name, ied_chs_utf_8 );
     if (bol1 && (iml1 == 0)) {             /* strings are equal       */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" already defined - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name );
       goto p_krb_kdc_60;                   /* get next node on stage 4 */
     }
     adsl_krb5_kdc_server_w1 = adsl_krb5_kdc_server_w1->adsc_next;  /* get next in chain */
   }
#ifdef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "m_conf_krb5_kdc() l%05d-T Kerberos-5-KDC name %(ux)s server-entry %(ux)s",
                   __LINE__, awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name );
#endif
   adsl_node_05 = adsl_node_server_e;       /* get first node          */
   memset( &dsl_krb5_kdc_server_fill, 0, sizeof(struct dsd_krb5_kdc_server) );  /* definition Kerberos 5 KDC server */
   dsl_krb5_kdc_server_fill.imc_port = -1;  /* Port TCP KDC            */
   awcl_krb5_kdc_server_comment = NULL;     /* Kerberos 5 KDC server-entry server comment */
   awcl_krb_serv_server_ineta = NULL;       /* Kerberos 5 KDC server-entry server INETA */

   p_krb_serv_40:                           /* process node on stage 5 */
   if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   if (adsl_node_05 == adsl_node_krb5_kdc_server_name) {  /* name already processed */
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_krb5_server) / sizeof(achrs_node_krb5_server[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" invalid node found \"%(ux)s\" - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml1, awcl_06_name, (char *) achrs_node_krb5_server[ iml_e_05 ] );
     if ((bol1) && (iml1 == 0)) {           /* strings are equal       */
       break;
     }
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" has no child - ignored",
                     awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   aiml_val = NULL;                         /* clear address of value  */
   aawcl_val = NULL;                        /* clear address of value  */
   switch (iml_e_05) {                      /* switch keyword found    */
     case DEF_XML_KRB5_SERVER_COMMENT:
       aawcl_val = &awcl_krb5_kdc_server_comment;  /* Kerberos 5 KDC server-entry server comment */
       break;
     case DEF_XML_KRB5_SERVER_S_INETA:
       aawcl_val = &awcl_krb_serv_server_ineta;  /* Kerberos 5 KDC server-entry server INETA */
       break;
     case DEF_XML_KRB5_SERVER_S_PORT:
       break;
     case DEF_XML_KRB5_SERVER_GATE_INETA:
       break;
     case DEF_XML_KRB5_SERVER_TIMEOUT:
       aiml_val = &dsl_krb5_kdc_server_fill.imc_timeout;  /* timeout seconds */
       break;
     case DEF_XML_KRB5_SERVER_RETRY_AFTER_E:
       aiml_val = &dsl_krb5_kdc_server_fill.imc_retry_after_error;  /* time retry after error seconds */
       break;
     case DEF_XML_KRB5_SERVER_MAX_TICKET_S:
       aiml_val = &dsl_krb5_kdc_server_fill.imc_max_ticket_size;  /* maximum length of ticket in bytes */
       break;
     case DEF_XML_KRB5_SERVER_MAX_SESSION:
       aiml_val = &dsl_krb5_kdc_server_fill.imc_conf_max_session;  /* maximum parallel session (TCP) */
       break;
   }
   if (aawcl_val) {                         /* text value found        */
     if (*aawcl_val) {                      /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" node \"%(ux)s\" double - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     *aawcl_val = awcl_06_value;            /* save value found        */
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   if (aiml_val) {                          /* numeric value found     */
     if (*aiml_val) {                       /* already defined         */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" node \"%(ux)s\" double - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     *aiml_val = m_get_wc_number( awcl_06_value );
     if (*aiml_val < 0) {                   /* value is not numeric    */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s server-entry name \"%(ux)s\" element name \"%(ux)s\" numeric value invalid \"%(ux)s\" - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name, awcl_06_value );
       *aiml_val = 0;                       /* ignore value            */
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     if (*aiml_val == 0) {                  /* value zero not allowed  */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s server-entry name \"%(ux)s\" element name \"%(ux)s\" numeric value \"%(ux)s\" zero not allowed - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name, awcl_06_value );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   if (iml_e_05 == DEF_XML_KRB5_SERVER_S_PORT) {  /* <serverport>      */
     if (dsl_krb5_kdc_server_fill.imc_port >= 0) {  /* Port TCP KDC already defined */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" serverport double - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     dsl_krb5_kdc_server_fill.imc_port = m_get_port_no( awcl_06_value, -1, ied_chs_utf_16 );  /* get Port TCP KDC */
     if (dsl_krb5_kdc_server_fill.imc_port < 0) {  /* port not valid   */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" serverport \"%(ux)s\" invalid - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_value );
     }
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   if (iml_e_05 == DEF_XML_KRB5_SERVER_GATE_INETA) {  /* <gate-ineta>  */
     if (dsl_krb5_kdc_server_fill.dsc_bind_multih.boc_bind_needed) {
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" node \"%(ux)s\" double - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name );
       goto p_krb_serv_60;                  /* get next node on stage 5 */
     }
     iml1 = m_build_bind_ineta( &dsl_krb5_kdc_server_fill.dsc_bind_multih, awcl_06_value, -1, ied_chs_utf_16 );
     if (iml1) {                            /* error occured           */
       m_hlnew_printf( HLOG_WARN1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" node \"%(ux)s\" INETA \"%(ux)s\" invalid - ignored",
                       awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_06_name, awcl_06_value );
     }
     goto p_krb_serv_60;                    /* get next node on stage 5 */
   }
   /* program should never get here                                    */

   p_krb_serv_60:                           /* get next node on stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) goto p_krb_serv_40;    /* process node on stage 5 */

   if (awcl_krb_serv_server_ineta == NULL) {  /* no serverineta        */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" serverineta missing - server-entry ignored",
                     awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   adsl_server_ineta = m_get_target_ineta( awcl_krb_serv_server_ineta, -1, ied_chs_utf_16,
                                           &dsl_krb5_kdc_server_fill.dsc_bind_multih );
   if (adsl_server_ineta == NULL) {         /* INETA not valid         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error Kerberos-5-KDC %(ux)s element server-entry name \"%(ux)s\" serverineta \"%(ux)s\" invalid - server-entry ignored",
                     awcl_krb5_kdc_1_name, awcl_krb5_kdc_server_name, awcl_krb_serv_server_ineta );
     goto p_krb_kdc_60;                     /* get next node on stage 4 */
   }
   dsl_krb5_kdc_server_fill.imc_len_name = m_count_wchar_z_to_utf8( awcl_krb5_kdc_server_name );  /* length of name bytes */
   if (awcl_krb5_kdc_server_comment) {      /* Kerberos 5 KDC server-entry server comment */
     dsl_krb5_kdc_server_fill.imc_len_comment = m_count_wchar_z_to_utf8( awcl_krb5_kdc_server_comment );  /* length of Comment bytes */
   }
   iml1 = (dsl_krb5_kdc_server_fill.imc_len_name + dsl_krb5_kdc_server_fill.imc_len_comment + sizeof(void *))
            & (0 - sizeof(void *));
   adsl_krb5_kdc_server_w1 = (struct dsd_krb5_kdc_server *) malloc( sizeof(struct dsd_krb5_kdc_server)
                                                                      + iml1 + adsl_server_ineta->imc_len_mem );
   memcpy( (char *) (adsl_krb5_kdc_server_w1 + 1) + iml1, adsl_server_ineta, adsl_server_ineta->imc_len_mem );
   free( adsl_server_ineta );               /* free memory target INETA */
   m_trans_wchar_z_to_utf8( (char *) (adsl_krb5_kdc_server_w1 + 1) + 0, awcl_krb5_kdc_server_name );
   if (awcl_krb5_kdc_server_comment) {      /* Kerberos 5 KDC server-entry server comment */
     m_trans_wchar_z_to_utf8( (char *) (adsl_krb5_kdc_server_w1 + 1) + dsl_krb5_kdc_server_fill.imc_len_name,
                              awcl_krb5_kdc_server_comment );
   }
   memcpy( adsl_krb5_kdc_server_w1, &dsl_krb5_kdc_server_fill, sizeof(struct dsd_krb5_kdc_server) );
   adsl_krb5_kdc_server_w1->adsc_server_ineta = (struct dsd_target_ineta_1 *) ((char *) (adsl_krb5_kdc_server_w1 + 1) + iml1);  /* KDC INETA */
   adsl_krb5_kdc_server_w1->adsc_next = dsl_krb5_kdc_1_fill.adsc_kdc_server;  /* get old chain of Kerberos 5 KDC servers */
   dsl_krb5_kdc_1_fill.adsc_kdc_server = adsl_krb5_kdc_server_w1;  /* new chain of Kerberos 5 KDC servers */
   goto p_krb_kdc_60;                       /* get next node on stage 4 */
} /* end m_conf_krb5_kdc()                                             */

/** process configuration raw-packet-interface                         */
static void m_conf_raw_packet_if( DOMNode *adsp_node,
                                  struct dsd_conf_serv *adsp_cs ) {
   int        iml1, iml2, iml3;             /* working variables       */
   BOOL       bol1;                         /* working variable        */
#ifdef B130108
   BOOL       bol_c_tun_ipv4;               /* configured TUN IPV4     */
   BOOL       bol_c_tun_ipv6;               /* configured TUN IPV6     */
#endif
   BOOL       bol_pool_compl;               /* pool entries have been processed */
   BOOL       bol_taif_ineta_ipv4;          /* <TUN-adapter-use-interface-ineta> IPV4 filled */
   BOOL       bol_taif_ineta_ipv6;          /* <TUN-adapter-use-interface-ineta> IPV6 filled */
   int        iml_ign_pool;                 /* ignore some pool entries */
   int        iml_cmp;                      /* compare values          */
   int        iml_e_04;                     /* entry on stage 4        */
   int        iml_e_05;                     /* entry on stage 5        */
   int        iml_len_pool;                 /* compute length entries of pool */
#ifdef XYZ1
   int        iml_ineta_type;               /* type of INETA           */
                                            /* 0 = TUN-adapter-ineta   */
                                            /* 1 = TUN-adapter-use-interface-ineta */
#endif
   int        iml_len_temp_ineta;           /* length array temporary INETAs filled */
   void *     al_work1;                     /* pointer to value        */
   char       *achl1, *achl2, *achl3;       /* working variables       */
   HL_WCHAR   *awcl1;                       /* working variable        */
   unsigned short int *ausl_w1;             /* working variable        */
   DOMNode    *adsl_node_04;
   DOMNode    *adsl_node_05;
   DOMNode    *adsl_node_06;
   DOMNode    *adsl_node_fichi;             /* is first child          */
   HL_WCHAR * awcl_05_name;
   HL_WCHAR * awcl_06_name;
   HL_WCHAR * awcl_05_value;
   HL_WCHAR * awcl_06_value;
   struct dsd_ineta_single_ret *adsl_ineta_sret_work_1_w1;
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_ch;  /* chain temporary INETAs */
// struct dsd_ineta_temp_1 *adsl_ineta_temp_1_last;  /* last temporary INETA */
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_w1;  /* working variable */
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_w2;  /* working variable */
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_w3;  /* working variable */
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_pool_first;  /* for pool */
   struct dsd_ineta_temp_1 *adsl_ineta_temp_1_pool_last;  /* for pool  */
   struct dsd_port_temp_1 *adsl_port_temp_1_ch;  /* chain temporary ports */
   struct dsd_port_temp_1 *adsl_port_temp_1_w1;  /* working variable   */
   struct dsd_port_temp_1 *adsl_port_temp_1_w2;  /* working variable   */
   struct dsd_raw_packet_if_conf dsl_rpi_conf;  /* configuration raw-packet-interface */
   BOOL       borl_rpi_main[ DEF_XML_RPI_MAX ];
   BOOL       borl_rpi_ppp_se[ DEF_XML_RPI_PPP_SE_MAX ];
   struct dsd_ineta_single_ret dsl_ineta_sret_work_1;
   struct dsd_ineta_single_ret dsl_ineta_sret_work_2;
   struct dsd_ineta_temp_1 dsl_ineta_temp_1_l;  /* temporary INETA     */
   struct dsd_port_temp_1 dsl_port_temp_1_l;  /* temporary port        */
   char       byrl_temp_ineta[ 512 ];       /* temporary storage INETAs */

   adsl_node_fichi = adsp_node->getFirstChild();
   if (adsl_node_fichi == NULL) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLCUUUUUW Error raw-packet-interface has no child - ignored" );
     return;                                /* all done                */
   }
   memset( &dsl_rpi_conf, 0, sizeof(struct dsd_raw_packet_if_conf) );  /* configuration raw-packet-interface */
   memset( borl_rpi_main, 0, sizeof(borl_rpi_main) );  /* clear defined double */
   adsl_ineta_temp_1_ch = NULL;             /* clear chain temporary INETAs */
   adsl_port_temp_1_ch = NULL;              /* clear chain temporary ports */
   iml_ign_pool = 0;                        /* ignore some pool entries */
   iml_len_temp_ineta = 0;                  /* length array temporary INETAs filled */
   bol_taif_ineta_ipv4 = FALSE;             /* <TUN-adapter-use-interface-ineta> IPV4 filled */
   bol_taif_ineta_ipv6 = FALSE;             /* <TUN-adapter-use-interface-ineta> IPV6 filled */
   adsl_node_04 = adsl_node_fichi;          /* get first node          */

   p_rpi_main_20:                           /* process node on stage 4 */
   if (adsl_node_04->getNodeType() != DOMNode::ELEMENT_NODE) {
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   awcl_05_name = (HL_WCHAR *) adsl_node_04->getNodeName();
   iml_e_04 = sizeof(achrs_node_raw_packet_if) / sizeof(achrs_node_raw_packet_if[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_04 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface invalid node found \"%(ux)s\" - ignored",
                       awcl_05_name );
       goto p_rpi_main_60;                  /* get next node on stage 4 */
     }
     iml_e_04--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_name, (char *) achrs_node_raw_packet_if[ iml_e_04 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   adsl_node_05 = adsl_node_04->getFirstChild();
   if (adsl_node_05 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" has no child - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
#ifdef XYZ1
   awcl_05_value = NULL;                    /* clear this value        */
   awcl_06_name = NULL;                     /* clear next stage        */
   do {
     iml1 = adsl_node_05->getNodeType();
     switch (iml1) {
       case DOMNode::TEXT_NODE:
         if (awcl_05_value) break;          /* already set             */
         awcl_05_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
         break;
       case DOMNode::ELEMENT_NODE:
         if (awcl_06_name) break;           /* already set             */
         awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
         break;
     }
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
#ifdef XYZ1
   if (adsl_node_05 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" no TEXT_NODE or ELEMENT_NODE found - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
#endif
#ifndef TRACEHL1
   m_hlnew_printf( HLOG_TRACE1, "HWSPXMLC0UUUUT element raw-packet-interface name \"%(ux)s\" awcl_05_value=%p awcl_06_name=%p.",
                   awcl_05_name, awcl_05_value, awcl_06_name );
   if (awcl_05_value) {
     m_hlnew_printf( HLOG_TRACE1, "HWSPXMLC0UUUUT awcl_05_value=\"%(ux)s\"",
                     awcl_05_value );
   }
   if (awcl_06_name) {
     m_hlnew_printf( HLOG_TRACE1, "HWSPXMLC0UUUUT awcl_06_name=\"%(ux)s\"",
                     awcl_06_name );
   }
#endif
   switch (iml_e_04) {                      /* index keyword           */
     case DEF_XML_RPI_PPP_SERVER:           /* PPP-server              */
       if (awcl_06_name) goto p_rpi_ppp_se_00;
       break;
#ifdef XYZ1
#define DEF_XML_RPI_PPP_INETA_POOL        1
#define DEF_XML_RPI_TUN_USE_INETA         2
#define DEF_XML_RPI_APPL_TCPS_PORT        3
#define DEF_XML_RPI_APPL_RANDOM_TCPSP     4
#endif
   }
#endif
   awcl_05_value = NULL;                    /* clear this value        */
   bol1 = FALSE;                            /* no child found          */
   do {
     iml1 = adsl_node_05->getNodeType();
     switch (iml1) {
       case DOMNode::TEXT_NODE:
         if (awcl_05_value) break;          /* already set             */
         awcl_05_value = (HL_WCHAR *) adsl_node_05->getNodeValue();
         break;
       case DOMNode::ELEMENT_NODE:
         bol1 = TRUE;                       /* child found             */
         break;
     }
     if (bol1) break;                       /* child found             */
     adsl_node_05 = adsl_node_05->getNextSibling();
   } while (adsl_node_05);                  /* for all siblings        */
   bol1 = FALSE;                            /* is not invalid          */
   switch (iml_e_04) {                      /* index keyword           */
     case DEF_XML_RPI_TA_INETA:             /* TUN-adapter-ineta       */
#ifdef B130107
#ifdef B100802
       al_work1 = &dsl_rpi_conf.umc_ta_ineta;  /* pointer to value     */
#endif
       al_work1 = &dsl_rpi_conf.umc_ta_ineta_local;  /* pointer to value     */
#ifdef B100802
       dsl_rpi_conf.umc_ta_ineta_remote = inet_addr( "172.22.64.2" );
       dsl_rpi_conf.umc_ta_ineta_mask = inet_addr( "255.255.255.252" );
#endif
       if (awcl_05_value) goto p_rpi_ta_ineta_00;  /* TUN-adapter INETA */
       bol1 = TRUE;                         /* node is invalid         */
       break;
#endif
#ifdef XYZ1
       iml_ineta_type                       /* type of INETA           */
         = 0;                               /* 0 = TUN-adapter-ineta   */
#endif
       goto p_rpi_ta_ineta_00;              /* TUN-adapter INETA */
     case DEF_XML_RPI_TA_UIF_INETA:         /* TUN-adapter-use-interface-ineta */
#ifdef B130107
       al_work1 = &dsl_rpi_conf.umc_taif_ineta;  /* pointer to value   */
       if (awcl_05_value) goto p_rpi_ta_ineta_00;  /* TUN-adapter INETA */
       bol1 = TRUE;                         /* node is invalid         */
       break;
#endif
#ifdef XYZ1
       iml_ineta_type                       /* type of INETA           */
         = 1;                               /* 1 = TUN-adapter-use-interface-ineta */
#endif
       goto p_rpi_ta_ineta_00;              /* TUN-adapter INETA */
     case DEF_XML_RPI_STRAT_DRIVER:         /* strategy-inst-win-driver */
       goto p_rpi_strat_driver;             /* strategy-inst-win-driver */
     case DEF_XML_RPI_TCPC_TOMS:            /* TCP-connect-timeout-millisec */
       al_work1 = &dsl_rpi_conf.imc_tcpc_to_msec;  /* pointer to value */
       if (awcl_05_value) goto p_rpi_num_00;  /* numeric value         */
       bol1 = TRUE;                         /* node is invalid         */
       break;
     case DEF_XML_RPI_TCPC_NOT:             /* TCP-connect-number-of-try */
       al_work1 = &dsl_rpi_conf.imc_tcpc_try_no;  /* pointer to value  */
       if (awcl_05_value) goto p_rpi_num_00;  /* numeric value         */
       bol1 = TRUE;                         /* node is invalid         */
       break;
     case DEF_XML_RPI_PPP_SERVER:           /* PPP-server              */
       if (adsl_node_05) goto p_rpi_ppp_se_00;  /* with child          */
       bol1 = TRUE;                         /* node is invalid         */
       break;
     case DEF_XML_RPI_PPP_INETA_POOL:
     case DEF_XML_RPI_TUN_USE_INETA:
       if (adsl_node_05) goto p_rpi_ineta_00;  /* with child           */
       break;
     case DEF_XML_RPI_APPL_TCPS_PORT:
       if (adsl_node_05) goto p_rpi_port_m_00;  /* with child          */
       bol1 = TRUE;                         /* node is invalid         */
       break;
     default:                               /* no child possible       */
       if (adsl_node_05 == NULL) break;     /* no child found          */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" has child - not defined - ignored",
                       awcl_05_name );
       goto p_rpi_main_60;                  /* get next node on stage 4 */
   }
   if (awcl_05_value == NULL) bol1 = TRUE;  /* error no TEXT-NODE found */
   if (bol1) {                              /* node invalid            */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" invalid - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (iml_e_04 != DEF_XML_RPI_APPL_RANDOM_TCPSP) {
     goto p_rpi_main_28;                    /* process node on stage 4 */
   }
   /* <appl-use-random-tcp-source-port>                                */
   if (borl_rpi_main[ DEF_XML_RPI_APPL_RANDOM_TCPSP ]) {  /* defined double */
     goto p_rpi_node_double;                /* the node is double defined */
   }
   bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_value, "YES" );
   if ((bol1) && (iml_cmp == 0)) {          /* strings are equal       */
     dsl_rpi_conf.boc_random_appl_port = TRUE;
     borl_rpi_main[ DEF_XML_RPI_APPL_RANDOM_TCPSP ] = TRUE;  /* for defined double */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_value, "NO" );
   if ((bol1) && (iml_cmp == 0)) {          /* strings are equal       */
     dsl_rpi_conf.boc_random_appl_port = FALSE;
     borl_rpi_main[ DEF_XML_RPI_APPL_RANDOM_TCPSP ] = TRUE;  /* for defined double */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" neither \"YES\" nor \"NO\" - ignored",
                   awcl_05_name, awcl_05_value );
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_main_28:                           /* process node on stage 4 */
   /* INETA with prefix                                                */
   iml1 = HL_WCSLEN( awcl_05_value );       /* length of parameter     */
   while ((iml1 > 0) && (*(awcl_05_value + iml1 - 1) != '/')) iml1--;
   if (iml1 == 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" could not find \"/\" for prefix - ignored",
                     awcl_05_name, awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
// to-do 19.04.10 KB IPV6
   if ((iml1 - 1) > LEN_INETA_PR_IPV4) {    /* INETA too long          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" INETA length %d too long - ignored",
                     awcl_05_name, awcl_05_value, iml1 - 1 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   awcl1 = awcl_05_value + iml1;            /* here starts prefix      */
   iml2 = 0;                                /* clear result            */
   while (TRUE) {                           /* loop over digits        */
     if (*awcl1 == 0) break;                /* end of digits           */
     if ((*awcl1 < '0') || (*awcl1 > '9')) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" invalid digit \"%(ux)c\" in prefix found - ignored",
                       awcl_05_name, awcl_05_value, *awcl1 );
       goto p_rpi_main_60;                  /* get next node on stage 4 */
     }
     iml2 *= 10;                            /* shift old digits        */
     iml2 += *awcl1++ - '0';                /* add new digit           */
   }
   if ((iml2 <= 0) || (iml2 > 128)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" prefix %d out of range - ignored",
                     awcl_05_name, awcl_05_value, iml2 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   iml1--;                                  /* subtract separator      */
   if (iml1 <= 0) {                         /* too short for INETA     */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" INETA length %d too short - ignored",
                     awcl_05_name, awcl_05_value, iml1 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
#ifdef B130814
   bol1 = m_get_single_ineta( &iml3, &dsl_ineta_sret_work_1,
                              awcl_05_value, -1, ied_chs_utf_16 );
#else
   bol1 = m_get_single_ineta( &iml3, &dsl_ineta_sret_work_1,
                              awcl_05_value, iml1, ied_chs_utf_16 );
#endif
   if (bol1 == FALSE) {                     /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" INETA invalid, error %d - ignored",
                     awcl_05_name, awcl_05_value, iml3 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (iml2 > (dsl_ineta_sret_work_1.usc_length * 8)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" prefix %d out of range - ignored",
                     awcl_05_name, awcl_05_value, iml2 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
// to-do 24.04.10 KB
// too complicated, move to xslnetw01.cpp
// no need to have second piece of memory,
// only check AND with variable
   /* check if prefix valid, clear bits after prefix                   */
   memcpy( dsl_ineta_sret_work_2.chrc_ineta,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   achl1 = dsl_ineta_sret_work_2.chrc_ineta + iml2 / 8;  /* start value */
   achl2 = dsl_ineta_sret_work_2.chrc_ineta + dsl_ineta_sret_work_1.usc_length;
// iml1 = 0XFF << ((iml2 + 8 - 1) / 8) * 8 - iml2;
   iml1 = 0XFF << (((iml2 / 8) + 1 ) * 8 - iml2);
   while (achl1 < achl2) {                  /* loop over bytes of ineta */
     *((unsigned char *) achl1) &= iml1;
     achl1++;
     iml1 = 0;
   }
   iml_cmp = memcmp( dsl_ineta_sret_work_2.chrc_ineta,
                     dsl_ineta_sret_work_1.chrc_ineta,
                     dsl_ineta_sret_work_1.usc_length );
   if (iml_cmp) {                           /* INETAs do not compare   */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" has digits after prefix applied - ignored",
                     awcl_05_name, awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   iml1 = dsl_ineta_sret_work_1.usc_length * 8 - iml2;  /* shift number of INETAs */
   if (iml1 > MAX_INETA_IN_CHUNK_SHIFT) {   /* maximum number of INETAs in one chunk */
     iml1 = MAX_INETA_IN_CHUNK_SHIFT;       /* maximum number of INETAs in one chunk */
   }
   memset( &dsl_ineta_temp_1_l, 0, sizeof(struct dsd_ineta_temp_1) );  /* temporary INETA */
   dsl_ineta_temp_1_l.imc_func = iml_e_04;  /* function                */
   dsl_ineta_temp_1_l.imc_no_ineta = 1 << iml1;  /* number of INETAs   */
   dsl_ineta_temp_1_l.usc_family = dsl_ineta_sret_work_1.usc_family;  /* family IPV4 / IPV6 */
   dsl_ineta_temp_1_l.usc_length = dsl_ineta_sret_work_1.usc_length;  /* length of following address */
   memcpy( dsl_ineta_temp_1_l.chrc_ineta_start,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   m_ineta_op_add( dsl_ineta_temp_1_l.chrc_ineta_end,
                   dsl_ineta_sret_work_1.usc_length,
                   dsl_ineta_temp_1_l.imc_no_ineta - 1 );  /* number of INETAs to add */
   goto p_rpi_ineta_60;                     /* compare INETAs if previously defined */

   p_rpi_ta_ineta_00:                       /* TUN-adapter INETA       */
#ifdef B130107
// to-do 24.07.10 KB - Unix multiple
   if (borl_rpi_main[ iml_e_04 ]) {         /* defined double          */
     goto p_rpi_node_double;                /* the node is double defined */
   }
#endif
   bol1 = m_get_single_ineta( &iml1, &dsl_ineta_sret_work_1,
                              awcl_05_value, -1, ied_chs_utf_16 );
   if (bol1 == FALSE) {                     /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" INETA invalid, error %d - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_name, awcl_05_value, iml1 );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
#ifdef B130107
   if (dsl_ineta_sret_work_1.usc_family != AF_INET) {  /* family IPV4 / IPV6 */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" INETA not IPV4 (only IPV4 supported) - ignored",
                     awcl_05_name, awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   while (iml_e_04 == DEF_XML_RPI_TA_INETA) {  /* TUN-adapter-ineta    */
     if ((dsl_ineta_sret_work_1.chrc_ineta[3] & 0X03) == 0X01) break;
     if ((dsl_ineta_sret_work_1.chrc_ineta[3] & 0X03) == 0X02) break;
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" = %d.%d.%d.%d INETA not valid for TUN-adapter - ignored",
                     awcl_05_value,
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[0],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[1],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[2],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[3] );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   *((UNSIG_MED *) al_work1) = *((UNSIG_MED *) dsl_ineta_sret_work_1.chrc_ineta);
   borl_rpi_main[ iml_e_04 ] = TRUE;        /* for defined double      */
   goto p_rpi_main_60;                      /* get next node on stage 4 */
#endif
   if (iml_e_04 == DEF_XML_RPI_TA_UIF_INETA) {  /* TUN-adapter-use-interface-ineta */
     if (dsl_ineta_sret_work_1.usc_family == AF_INET) {  /* family IPV4 */
       if (bol_taif_ineta_ipv4) {           /* <TUN-adapter-use-interface-ineta> IPV4 filled */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-use-interface-ineta\" IPV4 value \"%(ux)s\" already defined before - ignored",
                         MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                         awcl_05_value,
                         (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[0],
                         (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[1],
                         (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[2],
                         (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[3] );
         goto p_rpi_main_60;                /* get next node on stage 4 */
       }
       dsl_rpi_conf.umc_taif_ineta_ipv4 = *((UNSIG_MED *) dsl_ineta_sret_work_1.chrc_ineta);  /* <TUN-adapter-use-interface-ineta> IPV4 */
       bol_taif_ineta_ipv4 = TRUE;          /* <TUN-adapter-use-interface-ineta> IPV4 filled */
       goto p_rpi_main_60;                  /* get next node on stage 4 */
     }
     /* IPV6                                                           */
     if (bol_taif_ineta_ipv6) {             /* <TUN-adapter-use-interface-ineta> IPV6 filled */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-use-interface-ineta\" IPV6 value \"%(ux)s\" already defined before - ignored",
                       MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                       awcl_05_value );
       goto p_rpi_main_60;                  /* get next node on stage 4 */
     }
     memcpy( dsl_rpi_conf.chrc_taif_ineta_ipv6, dsl_ineta_sret_work_1.chrc_ineta, 16 );  /* <TUN-adapter-use-interface-ineta> IPV6 */
     bol_taif_ineta_ipv6 = TRUE;            /* <TUN-adapter-use-interface-ineta> IPV6 filled */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   /* iml_e_04 == DEF_XML_RPI_TA_INETA -       TUN-adapter-ineta       */
   iml1 = 4;                                /* length of INETA         */
   al_work1 = &dsl_rpi_conf.imc_no_ta_ineta_ipv4;  /* <TUN-adapter-ineta> IPV4 */
   if (dsl_ineta_sret_work_1.usc_family != AF_INET) {  /* family IPV6  */
     iml1 = 16;
     al_work1 = &dsl_rpi_conf.imc_no_ta_ineta_ipv6;  /* <TUN-adapter-ineta> IPV6 */
   }
   while (iml1 == 0) {                      /* family IPV4             */
     if ((dsl_ineta_sret_work_1.chrc_ineta[3] & 0X03) == 0X01) break;
     if ((dsl_ineta_sret_work_1.chrc_ineta[3] & 0X03) == 0X02) break;
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" = %d.%d.%d.%d INETA not valid for TUN-adapter - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_value,
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[0],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[1],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[2],
                     (unsigned char) dsl_ineta_sret_work_1.chrc_ineta[3] );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   iml2 = 0;                                /* index in temporary storage INETAs */
   while (iml2 < iml_len_temp_ineta) {      /* length array temporary INETAs filled */
     iml3 = (unsigned char) byrl_temp_ineta[ iml2 ];
     if (iml3 == iml1) {                    /* same family             */
       if (!memcmp( &byrl_temp_ineta[ iml2 + 1 ], dsl_ineta_sret_work_1.chrc_ineta, iml1 )) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" already defined before - ignored",
                         MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                         awcl_05_value );
         goto p_rpi_main_60;                /* get next node on stage 4 */
       }
       if (   (iml3 == 4)                   /* IPV4                    */
           && (!memcmp( &byrl_temp_ineta[ iml2 + 1 ], dsl_ineta_sret_work_1.chrc_ineta, 4 - 1 ))
           && ((byrl_temp_ineta[ iml2 + 1 + 4 - 1] & 0XFC) == (dsl_ineta_sret_work_1.chrc_ineta[ 4 - 1 ] & 0XFC))) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" INETA same network (mask 255.255.255.252) defined before - ignored",
                         MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                         awcl_05_value );
         goto p_rpi_main_60;                /* get next node on stage 4 */
       }
     }
     iml2 += 1 + iml3;                      /* end of this entry       */
   }
#ifndef HL_UNIX
   if (*((int *) al_work1) != 0) {          /* number of INETAS configured */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" defined multiple times - not valid in Windows environment - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
#endif
   if ((iml_len_temp_ineta + 1 + iml1) > sizeof(byrl_temp_ineta)) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"TUN-adapter-ineta\" value \"%(ux)s\" internal error, array for INETAs too small - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   byrl_temp_ineta[ iml_len_temp_ineta ] = (unsigned char) iml1;  /* set length entry */
   memcpy( &byrl_temp_ineta[ 1 + iml_len_temp_ineta ], dsl_ineta_sret_work_1.chrc_ineta, iml1 );
   iml_len_temp_ineta += 1 + iml1;
   (*((int *) al_work1))++;                 /* increment number of INETAS configured */
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_num_00:                            /* numeric value           */
   if (borl_rpi_main[ iml_e_04 ]) {         /* defined double          */
     goto p_rpi_node_double;                /* the node is double defined */
   }
   *((int *) al_work1) = m_get_wc_number( awcl_05_value );
   if (*((int *) al_work1) > 0) {
     borl_rpi_main[ iml_e_04 ] = TRUE;      /* for defined double      */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (*((int *) al_work1) < 0) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" not numeric - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_name, awcl_05_value );
     *((int *) al_work1) = 0;               /* clear value again       */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW line=%d col=%d Error element raw-packet-interface name \"%(ux)s\" value \"%(ux)s\" = zero not allowed (default) - ignored",
                   MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                   awcl_05_name, awcl_05_value );
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_ppp_se_00:                         /* PPP-server              */
   if (borl_rpi_main[ DEF_XML_RPI_PPP_SERVER ]) {  /* defined double   */
     goto p_rpi_node_double;                /* the node is double defined */
   }
   memset( borl_rpi_ppp_se, 0, sizeof(borl_rpi_ppp_se) );  /* clear defined double */

   p_rpi_ppp_se_20:                         /* PPP-server elements     */
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_rpi_ppp_se) / sizeof(achrs_node_rpi_ppp_se[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" undefined child \"%(ux)s\" found - ignored",
                       awcl_05_name, awcl_06_name );
       goto p_rpi_ppp_se_40;                /* search next node stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_06_name, (char *) achrs_node_rpi_ppp_se[ iml_e_05 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   if (borl_rpi_ppp_se[ iml_e_05 ]) {       /* defined double          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" not allowed is this sequence - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ppp_se_40;                  /* search next node stage 5 */
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" has no child - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ppp_se_40;                  /* search next node stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ppp_se_40;                  /* search next node stage 5 */
   }
   bol1 = m_get_single_ineta( &iml1, &dsl_ineta_sret_work_1,
                              awcl_06_value, -1, ied_chs_utf_16 );
   if (bol1 == FALSE) {                     /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" INETA invalid, error %d - ignored",
                     awcl_05_name, awcl_06_name, awcl_06_value, iml1 );
     goto p_rpi_ppp_se_40;                  /* search next node stage 5 */
   }
   if (iml_e_05 <= DEF_XML_RPI_PPP_SE_IPV4_MAX) {  /* search IPV4      */
     if (dsl_ineta_sret_work_1.usc_family != AF_INET) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" INETA not IPV4 - ignored",
                       awcl_05_name, awcl_06_name, awcl_06_value, iml1 );
       goto p_rpi_ppp_se_40;                /* search next node stage 5 */
     }
   } else {                                 /* search IPV6             */
     if (dsl_ineta_sret_work_1.usc_family != AF_INET6) {
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" INETA not IPV6 - ignored",
                       awcl_05_name, awcl_06_name, awcl_06_value, iml1 );
       goto p_rpi_ppp_se_40;                /* search next node stage 5 */
     }
   }
   memcpy( (char *) &dsl_rpi_conf.dsc_wsptun_conf_1 + imrs_rpi_ppp_se_d[ iml_e_05 ],
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   borl_rpi_ppp_se[ iml_e_05 ] = TRUE;      /* for check defined double */

   p_rpi_ppp_se_40:                         /* search next node stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) {                      /* node found              */
     if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
       goto p_rpi_ppp_se_40;                /* search next node stage 5 */
     }
     goto p_rpi_ppp_se_20;                  /* process node on stage 5 */
   }
   borl_rpi_main[ DEF_XML_RPI_PPP_SERVER ] = TRUE;  /* for check defined double */
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_strat_driver:                      /* strategy-inst-win-driver */
#ifndef HL_UNIX
   if (dsl_rpi_conf.iec_siwd != ied_siwd_invalid) {  /* invalid value  */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"strategy-inst-win-driver\" defined double - ignored",
                     MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                     awcl_05_value );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   iml_e_05 = sizeof(dsrs_strat_driver) / sizeof(dsrs_strat_driver[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"strategy-inst-win-driver\" value \"%(ux)s\" not defined - ignored",
                       awcl_05_value );
       goto p_rpi_main_60;                  /* get next node on stage 4 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_05_value, (char *) dsrs_strat_driver[ iml_e_05 ].achc_keyword );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   dsl_rpi_conf.iec_siwd = dsrs_strat_driver[ iml_e_05 ].iec_siwd;
   goto p_rpi_main_60;                      /* get next node on stage 4 */
#endif
#ifdef HL_UNIX
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW line=%d col=%d Error raw-packet-interface name \"strategy-inst-win-driver\" not supported in Unix environment - ignored",
                   MAC_XML_LINENO( adsl_node_04 ), MAC_XML_COL( adsl_node_04 ),
                   awcl_05_value );
   goto p_rpi_main_60;                      /* get next node on stage 4 */
#endif

   p_rpi_ineta_00:                          /* multiple INETAs         */
   iml1 = 0;                                /* clear flags             */

   p_rpi_ineta_20:                          /* check node              */
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_rpi_ineta) / sizeof(achrs_node_rpi_ineta[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" undefined child \"%(ux)s\" found - ignored",
                       awcl_05_name, awcl_06_name );
       goto p_rpi_ineta_40;                 /* search next node stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_06_name, (char *) achrs_node_rpi_ineta[ iml_e_05 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   bol1 = FALSE;                            /* clear error flag        */
   if (iml_e_05 == DEF_XML_RPI_INETA_SINGLE) {
     if (iml1 & 0XFE) bol1 = TRUE;          /* other keyword already set */
   } else {
     if (iml1 & (1 | (1 << iml_e_05))) bol1 = TRUE;  /* other keyword already set or double */
   }
   if (bol1) {                              /* value not allowed       */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" not allowed is this sequence - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ineta_40;                   /* search next node stage 5 */
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" has no child - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ineta_40;                   /* search next node stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_ineta_40;                   /* search next node stage 5 */
   }
   adsl_ineta_sret_work_1_w1 = &dsl_ineta_sret_work_1;
   if (iml_e_05 == DEF_XML_RPI_INETA_END) {
     adsl_ineta_sret_work_1_w1 = &dsl_ineta_sret_work_2;
   }
   bol1 = m_get_single_ineta( &iml2, adsl_ineta_sret_work_1_w1,
                              awcl_06_value, -1, ied_chs_utf_16 );
   if (bol1 == FALSE) {                     /* error occured           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" INETA invalid, error %d - ignored",
                     awcl_05_name, awcl_06_name, awcl_06_value, iml2 );
     goto p_rpi_ineta_40;                   /* search next node stage 5 */
   }
   iml1 |= 1 << iml_e_05;                   /* set flag keyword        */
   if (iml_e_05 != DEF_XML_RPI_INETA_SINGLE) {
     goto p_rpi_ineta_40;                   /* search next node stage 5 */
   }
   /* check if INETA already defined                                   */
   if (adsl_ineta_temp_1_ch) {              /* check chain temporary INETAs */
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
     while (TRUE) {                         /* loop over all previously defined INETAs */
       do {                                 /* pseudo-loop             */
         if (adsl_ineta_temp_1_w1->imc_func != iml_e_04) break;
         if (dsl_ineta_sret_work_1.usc_family != adsl_ineta_temp_1_w1->usc_family) break;
                           adsl_ineta_temp_1_w1->chrc_ineta_start,
         iml_cmp = memcmp( dsl_ineta_sret_work_1.chrc_ineta,
                           adsl_ineta_temp_1_w1->chrc_ineta_start,
                           dsl_ineta_sret_work_1.usc_length );
         if (iml_cmp < 0) break;
         if (iml_cmp > 0) {
           iml_cmp = memcmp( dsl_ineta_sret_work_1.chrc_ineta,
                             adsl_ineta_temp_1_w1->chrc_ineta_end,
                             dsl_ineta_sret_work_1.usc_length );
           if (iml_cmp > 0) break;
         }
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" INETA overlaps previously defined INETA - ignored",
                         awcl_05_name, awcl_06_name, awcl_06_value );
         goto p_rpi_ineta_40;               /* search next node stage 5 */
       } while (FALSE);
       if (adsl_ineta_temp_1_w1->adsc_next == NULL) break;  /* was last in chain */
       adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
     }
   }
   adsl_ineta_temp_1_w2 = (struct dsd_ineta_temp_1 *) malloc( sizeof(struct dsd_ineta_temp_1) );
   memset( adsl_ineta_temp_1_w2, 0, sizeof(struct dsd_ineta_temp_1) );  /* temporary INETA */
   adsl_ineta_temp_1_w2->imc_func = iml_e_04;  /* function             */
   adsl_ineta_temp_1_w2->imc_no_ineta = 1;  /* number of INETAs        */
   adsl_ineta_temp_1_w2->usc_family = dsl_ineta_sret_work_1.usc_family;  /* family IPV4 / IPV6 */
   adsl_ineta_temp_1_w2->usc_length = dsl_ineta_sret_work_1.usc_length;  /* length of following address */
   memcpy( adsl_ineta_temp_1_w2->chrc_ineta_start,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   memcpy( adsl_ineta_temp_1_w2->chrc_ineta_end,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   if (adsl_ineta_temp_1_ch == NULL) {      /* check chain temporary INETAs */
     adsl_ineta_temp_1_ch = adsl_ineta_temp_1_w2;  /* set first in chain */
   } else {
     adsl_ineta_temp_1_w1->adsc_next = adsl_ineta_temp_1_w2;  /* append to chain */
   }

   p_rpi_ineta_40:                          /* search next node stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) {                      /* node found              */
     if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
       goto p_rpi_ineta_40;                 /* search next node stage 5 */
     }
     goto p_rpi_ineta_20;                   /* process node on stage 5 */
   }
   if (iml1 == 0) {                         /* nothing defined         */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" no valid parameters found - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (iml1 == (1 << DEF_XML_RPI_INETA_SINGLE)) {  /* already definitions done */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (iml1 != (  (1 << DEF_XML_RPI_INETA_START)
                | (1 << DEF_XML_RPI_INETA_END))) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" no valid pair of \"ineta-start\" and \"ineta-end\" found - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (dsl_ineta_sret_work_1.usc_family != dsl_ineta_sret_work_2.usc_family) {
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" address family IPV4 / IPV6 different in pair of \"ineta-start\" and \"ineta-end\" found - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   iml_cmp = memcmp( dsl_ineta_sret_work_1.chrc_ineta,
                     dsl_ineta_sret_work_2.chrc_ineta,
                     dsl_ineta_sret_work_1.usc_length );
   if (iml_cmp > 0) {                       /* INETA 1 is greater      */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC02nnnW Error element raw-packet-interface name \"%(ux)s\" in pair of INETAs \"ineta-start\" greater than \"ineta-end\" - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   memset( &dsl_ineta_temp_1_l, 0, sizeof(struct dsd_ineta_temp_1) );  /* temporary INETA */
   dsl_ineta_temp_1_l.imc_func = iml_e_04;  /* function                */
   dsl_ineta_temp_1_l.usc_family = dsl_ineta_sret_work_1.usc_family;  /* family IPV4 / IPV6 */
   dsl_ineta_temp_1_l.usc_length = dsl_ineta_sret_work_1.usc_length;  /* length of following address */
   memcpy( dsl_ineta_temp_1_l.chrc_ineta_start,
           dsl_ineta_sret_work_1.chrc_ineta,
           dsl_ineta_sret_work_1.usc_length );
   memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
           dsl_ineta_sret_work_2.chrc_ineta,
           dsl_ineta_sret_work_2.usc_length );
   /* do not fill dsl_ineta_temp_1_l.imc_no_ineta - number of INETAs   */

   p_rpi_ineta_60:                          /* compare INETAs if previously defined */
   if (adsl_ineta_temp_1_ch == NULL) {      /* check chain temporary INETAs */
     goto p_rpi_ineta_80;                   /* add this entry          */
   }
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
// adsl_ineta_temp_1_w2 = NULL;             /* clear previous entry    */
   while (TRUE) {                           /* loop over all previously defined INETAs */
     do {                                   /* pseudo-loop             */
       if (adsl_ineta_temp_1_w1->imc_func != iml_e_04) break;
       if (dsl_ineta_sret_work_1.usc_family != adsl_ineta_temp_1_w1->usc_family) break;
                         adsl_ineta_temp_1_w1->chrc_ineta_start,
       iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_start,
                         adsl_ineta_temp_1_w1->chrc_ineta_end,
                         dsl_ineta_temp_1_l.usc_length );
       if (iml_cmp > 0) break;              /* new one starts after end of old one */
       iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_end,
                         adsl_ineta_temp_1_w1->chrc_ineta_start,
                         dsl_ineta_temp_1_l.usc_length );
       if (iml_cmp < 0) break;              /* new one ends before start of old one */
       iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_start,
                         adsl_ineta_temp_1_w1->chrc_ineta_start,
                         dsl_ineta_temp_1_l.usc_length );
       iml2    = memcmp( dsl_ineta_temp_1_l.chrc_ineta_end,
                         adsl_ineta_temp_1_w1->chrc_ineta_end,
                         dsl_ineta_temp_1_l.usc_length );
       if ((iml_cmp == 0) && (iml2 == 0)) {  /* both entries are equal */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" INETAs same as previously defined INETAs - ignored",
                         awcl_05_name );
         goto p_rpi_main_60;                /* get next node on stage 4 */
       }
       if (   ((iml_cmp > 0) && (iml2 <= 0))  /* old entry overlaps new entry */
           || ((iml_cmp >= 0) && (iml2 < 0))) {
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" INETAs already included in previously defined INETAs - ignored",
                         awcl_05_name );
         goto p_rpi_main_60;                /* get next node on stage 4 */
       }
       if ((iml_cmp <= 0) && (iml2 >= 0)) {  /* new entry overlaps old entry */
         m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" INETAs overlaps previously defined INETAs - partially ignored",
                         awcl_05_name );
#ifdef XYZ1
         if (adsl_ineta_temp_1_w2 == NULL) {  /* was first in chain    */
           adsl_ineta_temp_1_ch = adsl_ineta_temp_1_w1->adsc_next;  /* remove this from chain */
         } else {
           adsl_ineta_temp_1_w2->adsc_next = adsl_ineta_temp_1_w1->adsc_next;  /* remove this from chain */
         }
         free( adsl_ineta_temp_1_w1 );      /* free old entry          */
         if (adsl_ineta_temp_1_w2 == NULL) {  /* was first in chain    */
           goto p_rpi_ineta_60;             /* compare INETAs if previously defined */
         }
#endif
         adsl_ineta_temp_1_w1->imc_func = -1;  /* mark entry as invalid */
         break;
       }
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" INETAs overlaps previously defined INETAs - partially ignored",
                       awcl_05_name );
       if (iml_cmp < 0) {                   /* new entry starts earlier than old entry */
         memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
                 adsl_ineta_temp_1_w1->chrc_ineta_start,
                 dsl_ineta_temp_1_l.usc_length );
         /* subtract one from end                                      */
         achl1 = dsl_ineta_temp_1_l.chrc_ineta_end + dsl_ineta_temp_1_l.usc_length;
         do {
           achl1--;                         /* decrement address byte  */
           (*((unsigned char *) achl1))--;  /* subtract one            */
           if (*((unsigned char *) achl1) != 0XFF) break;  /* no overflow */
         } while (achl1 > dsl_ineta_temp_1_l.chrc_ineta_end);
         break;
       }
       /* new entry ends later than old entry                          */
       memcpy( dsl_ineta_temp_1_l.chrc_ineta_start,
               adsl_ineta_temp_1_w1->chrc_ineta_end,
               dsl_ineta_temp_1_l.usc_length );
       /* add one to start                                             */
       m_ineta_op_inc( dsl_ineta_temp_1_l.chrc_ineta_start,
                       dsl_ineta_temp_1_l.usc_length );
     } while (FALSE);
     if (adsl_ineta_temp_1_w1->adsc_next == NULL) break;  /* was last in chain */
//   adsl_ineta_temp_1_w2 = adsl_ineta_temp_1_w1;  /* save previous entry */
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
   }

   p_rpi_ineta_80:                          /* add this entry          */
   /* compute number of INETAs                                         */
   iml1 = m_ineta_op_diff( dsl_ineta_temp_1_l.chrc_ineta_end,
                           dsl_ineta_temp_1_l.chrc_ineta_start,
                           dsl_ineta_temp_1_l.usc_length );
   if (iml1 < 0) {                          /* differenc to high       */
     iml1 = MAX_INETA_IN_CHUNK;             /* maximum number of INETAs in one chunk */
   }
   dsl_ineta_temp_1_l.imc_no_ineta = iml1 + 1;  /* number of INETAs    */
   adsl_ineta_temp_1_w2 = (struct dsd_ineta_temp_1 *) malloc( sizeof(struct dsd_ineta_temp_1) );
   memcpy( adsl_ineta_temp_1_w2, &dsl_ineta_temp_1_l, sizeof(struct dsd_ineta_temp_1) );  /* copy temporary data */
   if (adsl_ineta_temp_1_ch == NULL) {      /* check chain temporary INETAs */
     adsl_ineta_temp_1_ch = adsl_ineta_temp_1_w2;  /* set first in chain */
   } else {
     adsl_ineta_temp_1_w1->adsc_next = adsl_ineta_temp_1_w2;  /* append to chain */
   }
   if (iml_e_04 == DEF_XML_RPI_TUN_USE_INETA) {
     if (dsl_ineta_temp_1_l.usc_family == AF_INET) {
       dsl_rpi_conf.boc_c_tun_ipv4 = TRUE;  /* set configured TUN IPV4 */
     } else {
       dsl_rpi_conf.boc_c_tun_ipv6 = TRUE;  /* set configured TUN IPV6 */
     }
   }
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_port_m_00:                         /* multiple ports          */
   memset( &dsl_port_temp_1_l, 0, sizeof(struct dsd_port_temp_1) );  /* clear temporary port */

   p_rpi_port_m_20:                         /* PPP-server elements     */
   awcl_06_name = (HL_WCHAR *) adsl_node_05->getNodeName();
   iml_e_05 = sizeof(achrs_node_rpi_auts_port) / sizeof(achrs_node_rpi_auts_port[0]);
   while (TRUE) {                           /* loop over possible values */
     if (iml_e_05 == 0) {                   /* value not found in table */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" undefined child \"%(ux)s\" found - ignored",
                       awcl_05_name, awcl_06_name );
       goto p_rpi_port_m_40;                /* search next node stage 5 */
     }
     iml_e_05--;                            /* decrement index         */
     bol1 = m_cmp_u16z_u8z( &iml_cmp, awcl_06_name, (char *) achrs_node_rpi_auts_port[ iml_e_05 ] );
     if ((bol1) && (iml_cmp == 0)) {        /* strings are equal       */
       break;
     }
   }
   ausl_w1 = &dsl_port_temp_1_l.usc_port_start;  /* port-start         */
   if (iml_e_05) {                          /* not start, is end       */
     ausl_w1 = &dsl_port_temp_1_l.usc_port_end;  /* port-end           */
   }
   if (*ausl_w1) {                          /* defined double          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" not allowed is this sequence - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_port_m_40;                  /* search next node stage 5 */
   }
   adsl_node_06 = adsl_node_05->getFirstChild();
   if (adsl_node_06 == NULL) {              /* no child found          */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" has no child - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_port_m_40;                  /* search next node stage 5 */
   }
   do {
     if (adsl_node_06->getNodeType() == DOMNode::TEXT_NODE) {
       awcl_06_value = (HL_WCHAR *) adsl_node_06->getNodeValue();
       break;
     }
     adsl_node_06 = adsl_node_06->getNextSibling();
   } while (adsl_node_06);                  /* for all siblings        */
   if (adsl_node_06 == NULL) {              /* no text found           */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface node \"%(ux)s\" child \"%(ux)s\" no TEXT_NODE found - ignored",
                     awcl_05_name, awcl_06_name );
     goto p_rpi_port_m_40;                  /* search next node stage 5 */
   }
   iml1 = m_get_wc_number( awcl_06_value );
   if ((iml1 <= 0) || (iml1 >= 0X10000)) {  /* not in range            */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" child \"%(ux)s\" value \"%(ux)s\" port number not in range - ignored",
                     awcl_05_name, awcl_06_name, awcl_06_value );
     goto p_rpi_port_m_40;                  /* search next node stage 5 */
   }
   *ausl_w1 = (unsigned short int) iml1;    /* set port                */

   p_rpi_port_m_40:                         /* search next node stage 5 */
   adsl_node_05 = adsl_node_05->getNextSibling();
   if (adsl_node_05) {                      /* node found              */
     if (adsl_node_05->getNodeType() != DOMNode::ELEMENT_NODE) {
       goto p_rpi_port_m_40;                /* search next node stage 5 */
     }
     goto p_rpi_port_m_20;                  /* process node on stage 5 */
   }
   if (   (dsl_port_temp_1_l.usc_port_start == 0)  /* port-start       */
       || (dsl_port_temp_1_l.usc_port_end == 0)) {  /* port-end        */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" no pair of port-start and port-end found - ignored",
                     awcl_05_name );
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   if (dsl_port_temp_1_l.usc_port_start     /* port-start              */
         > dsl_port_temp_1_l.usc_port_end) {  /* port-end              */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" port-start=%d not less or equal port-end=%d - ignored",
                     awcl_05_name,
                     dsl_port_temp_1_l.usc_port_start,  /* port-start  */
                     dsl_port_temp_1_l.usc_port_end );  /* port-end    */
     goto p_rpi_main_60;                    /* get next node on stage 4 */
   }
   /* check if ports already defined                                   */
   if (adsl_port_temp_1_ch) {               /* check chain temporary ports */
     adsl_port_temp_1_w1 = adsl_port_temp_1_ch;  /* get chain temporary ports */
     while (TRUE) {                         /* loop over all previously defined ports */
       do {                                 /* pseudo-loop             */
         if (adsl_port_temp_1_w1->boc_invalid) break;  /* entry is invalid */
         if (dsl_port_temp_1_l.usc_port_start > adsl_port_temp_1_w1->usc_port_end) break;
         if (dsl_port_temp_1_l.usc_port_end < adsl_port_temp_1_w1->usc_port_start) break;
         if (   (dsl_port_temp_1_l.usc_port_start >= adsl_port_temp_1_w1->usc_port_start)
             && (dsl_port_temp_1_l.usc_port_end <= adsl_port_temp_1_w1->usc_port_end)) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" port-start=%d / port-end=%d overlapped by previously defined port-start=%d / port-end=%d - ignored",
                           awcl_05_name,
                           dsl_port_temp_1_l.usc_port_start,
                           dsl_port_temp_1_l.usc_port_end,
                           adsl_port_temp_1_w1->usc_port_start,
                           adsl_port_temp_1_w1->usc_port_end );
           goto p_rpi_main_60;              /* get next node on stage 4 */
         }
         if (   (dsl_port_temp_1_l.usc_port_start <= adsl_port_temp_1_w1->usc_port_start)
             && (dsl_port_temp_1_l.usc_port_end >= adsl_port_temp_1_w1->usc_port_end)) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" port-start=%d / port-end=%d overlaps previously defined port-start=%d / port-end=%d - previous entry ignored",
                           awcl_05_name,
                           dsl_port_temp_1_l.usc_port_start,
                           dsl_port_temp_1_l.usc_port_end,
                           adsl_port_temp_1_w1->usc_port_start,
                           adsl_port_temp_1_w1->usc_port_end );
           adsl_port_temp_1_w1->boc_invalid = TRUE;  /* entry is invalid */
           break;
         }
         if (dsl_port_temp_1_l.usc_port_start < adsl_port_temp_1_w1->usc_port_start) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" port-start=%d / port-end=%d partially overlaps previously defined port-start=%d - entry adjusted",
                           awcl_05_name,
                           dsl_port_temp_1_l.usc_port_start,
                           dsl_port_temp_1_l.usc_port_end,
                           adsl_port_temp_1_w1->usc_port_start );
           dsl_port_temp_1_l.usc_port_end = adsl_port_temp_1_w1->usc_port_start - 1;
           break;
         }
         if (dsl_port_temp_1_l.usc_port_end > adsl_port_temp_1_w1->usc_port_end) {
           m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error raw-packet-interface name \"%(ux)s\" port-start=%d / port-end=%d partially overlaps previously defined port-end=%d - entry adjusted",
                           awcl_05_name,
                           dsl_port_temp_1_l.usc_port_start,
                           dsl_port_temp_1_l.usc_port_end,
                           adsl_port_temp_1_w1->usc_port_end );
           dsl_port_temp_1_l.usc_port_start = adsl_port_temp_1_w1->usc_port_end + 1;
           break;
         }
       } while (FALSE);
       if (adsl_port_temp_1_w1->adsc_next == NULL) break;  /* was last in chain */
       adsl_port_temp_1_w1 = adsl_port_temp_1_w1->adsc_next;  /* get next in chain */
     }
   }
   adsl_port_temp_1_w2 = (struct dsd_port_temp_1 *) malloc( sizeof(struct dsd_port_temp_1) );
   memcpy( adsl_port_temp_1_w2, &dsl_port_temp_1_l, sizeof(struct dsd_port_temp_1) );  /* temporary port */
   if (adsl_port_temp_1_ch == NULL) {       /* check chain temporary ports */
     adsl_port_temp_1_ch = adsl_port_temp_1_w2;  /* set first in chain */
   } else {
     adsl_port_temp_1_w1->adsc_next = adsl_port_temp_1_w2;  /* append to chain */
   }
   goto p_rpi_main_60;                      /* get next node on stage 4 */

   p_rpi_node_double:                       /* the node is double defined */
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface name \"%(ux)s\" defined double - ignored",
                   awcl_05_name );

   p_rpi_main_60:                           /* get next node on stage 4 */
   adsl_node_04 = adsl_node_04->getNextSibling();
   if (adsl_node_04) goto p_rpi_main_20;    /* process node on stage 4 */

   /* check if configuration valid                                     */
   bol1 = FALSE;                            /* no error yet            */
#ifdef B130108
   if (borl_rpi_main[ DEF_XML_RPI_TA_INETA ] == FALSE) {  /* check TUN-adapter-ineta */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface TUN-adapter-ineta not configured - cannot use TUN-adapter" );
     bol1 = TRUE;                           /* error found             */
   }
   if (borl_rpi_main[ DEF_XML_RPI_TA_UIF_INETA ] == FALSE) {  /* check TUN-adapter-use-interface-ineta */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface TUN-adapter-use-interface-ineta not configured - cannot use TUN-adapter" );
     bol1 = TRUE;                           /* error found             */
   }
#endif
   if (bol_taif_ineta_ipv4) {               /* <TUN-adapter-use-interface-ineta> IPV4 filled */
     if (dsl_rpi_conf.imc_no_ta_ineta_ipv4 == 0) {  /* <TUN-adapter-ineta> IPV4 */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface IPV4 TUN-adapter-use-interface-ineta configured but no TUN-adapter-ineta configured - cannot use TUN-adapter with IPV4" );
       bol_taif_ineta_ipv4 = FALSE;         /* <TUN-adapter-use-interface-ineta> IPV4 filled */
     }
   } else {
     if (dsl_rpi_conf.imc_no_ta_ineta_ipv4 > 0) {  /* <TUN-adapter-ineta> IPV4 */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface IPV4 TUN-adapter-ineta configured but no TUN-adapter-use-interface-ineta configured - cannot use TUN-adapter with IPV4" );
       dsl_rpi_conf.imc_no_ta_ineta_ipv4 = 0;  /* <TUN-adapter-ineta> IPV4 */
     }
   }
   if (bol_taif_ineta_ipv6) {               /* <TUN-adapter-use-interface-ineta> IPV6 filled */
     if (dsl_rpi_conf.imc_no_ta_ineta_ipv6 == 0) {  /* <TUN-adapter-ineta> IPV6 */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface IPV6 TUN-adapter-use-interface-ineta configured but no TUN-adapter-ineta configured - cannot use TUN-adapter with IPV6" );
       bol_taif_ineta_ipv6 = FALSE;         /* <TUN-adapter-use-interface-ineta> IPV6 filled */
     }
   } else {
     if (dsl_rpi_conf.imc_no_ta_ineta_ipv6 > 0) {  /* <TUN-adapter-ineta> IPV6 */
       m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface IPV6 TUN-adapter-ineta configured but no TUN-adapter-use-interface-ineta configured - cannot use TUN-adapter with IPV6" );
       dsl_rpi_conf.imc_no_ta_ineta_ipv6 = 0;  /* <TUN-adapter-ineta> IPV6 */
     }
   }
   if (   (bol_taif_ineta_ipv4 == FALSE)    /* <TUN-adapter-use-interface-ineta> IPV4 filled */
       && (bol_taif_ineta_ipv6 == FALSE)) {  /* <TUN-adapter-use-interface-ineta> IPV6 filled */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC0UUUUW Error element raw-packet-interface TUN-adapter neither IPV4 nor IPV6 configured - cannot use TUN-adapter, ignored" );
     /* free all resources                                             */
     while (adsl_ineta_temp_1_ch) {         /* free temporary INETAs   */
       adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get start of chain */
       adsl_ineta_temp_1_ch = adsl_ineta_temp_1_ch->adsc_next;  /* remove from chain */
       free( adsl_ineta_temp_1_w1 );        /* free memory             */
     }
     while (adsl_port_temp_1_ch) {          /* free chain temporary ports */
       adsl_port_temp_1_w1 = adsl_port_temp_1_ch;  /* get chain temporary ports */
       adsl_port_temp_1_ch = adsl_port_temp_1_ch->adsc_next;  /* remove from chain */
       free( adsl_port_temp_1_w1 );         /* free memory             */
     }
     return;
   }

   /* build one piece of memory with all definitions                   */
   /* first count length PPP pool                                      */
   iml_len_pool = 0;                        /* clear length            */
   adsl_ineta_temp_1_pool_first = NULL;     /* for pool                */
   adsl_ineta_temp_1_pool_last = NULL;      /* for pool                */
   iml1 = AF_INET;                          /* first check IPV4        */
   iml2 = MAX_INETA_POOL_ENTR;              /* maximum entries in one chunk */
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
   goto p_rpi_pool_24;                      /* check INETA for pool    */

   p_rpi_pool_20:                           /* get next INETAs for pool */
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain temporary INETAs */

   p_rpi_pool_24:                           /* check INETA for pool    */
   if (adsl_ineta_temp_1_w1 == NULL) {      /* at end of chain         */
     iml2 = 0;                              /* force create new chunk  */
     goto p_rpi_pool_40;                    /* entry in TUN INETA      */
   }
   if (adsl_ineta_temp_1_w1->imc_func != DEF_XML_RPI_PPP_INETA_POOL) {
     goto p_rpi_pool_20;                    /* get next INETAs for pool */
   }
   if (adsl_ineta_temp_1_w1->usc_family != iml1) {  /* not same family */
     goto p_rpi_pool_20;                    /* get next INETAs for pool */
   }
   /* check if member of TUN INETAs                                    */
   if (iml1 == AF_INET) {                   /* first pass check IPV4   */
     bol1 = dsl_rpi_conf.boc_c_tun_ipv4;    /* set configured TUN IPV4 */
   } else {
     bol1 = dsl_rpi_conf.boc_c_tun_ipv6;    /* set configured TUN IPV6 */
   }
   if (bol1 == FALSE) {                     /* do not check TUN INETAs */
     memcpy( &dsl_ineta_temp_1_l, adsl_ineta_temp_1_w1, sizeof(struct dsd_ineta_temp_1) );  /* copy temporary data */
     bol_pool_compl = TRUE;                 /* pool entries have been processed */
     goto p_rpi_pool_40;                    /* entry in TUN INETA      */
   }
   /* check if pool INETAs are part of TUN INETAs                      */
   adsl_ineta_temp_1_w2 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
   adsl_ineta_temp_1_w3 = NULL;             /* no matching entry found */

   p_rpi_pool_32:                           /* check INETA TUN         */
   if (adsl_ineta_temp_1_w2->imc_func != DEF_XML_RPI_TUN_USE_INETA) {
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   if (adsl_ineta_temp_1_w2->usc_family != iml1) {  /* not same family */
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   iml_cmp = memcmp( adsl_ineta_temp_1_w1->chrc_ineta_end,
                     adsl_ineta_temp_1_w2->chrc_ineta_start,
                     adsl_ineta_temp_1_w1->usc_length );
   if (iml_cmp < 0) {                       /* TUN entry is higher     */
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   iml_cmp = memcmp( adsl_ineta_temp_1_w1->chrc_ineta_start,
                     adsl_ineta_temp_1_w2->chrc_ineta_end,
                     adsl_ineta_temp_1_w1->usc_length );
   if (iml_cmp > 0) {                       /* TUN entry is too low    */
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   if (adsl_ineta_temp_1_w3 == NULL) {      /* no entry defined before */
     adsl_ineta_temp_1_w3 = adsl_ineta_temp_1_w2;  /* save this entry  */
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   iml_cmp = memcmp( adsl_ineta_temp_1_w2->chrc_ineta_start,
                     adsl_ineta_temp_1_w3->chrc_ineta_start,
                     adsl_ineta_temp_1_w2->usc_length );
   if (iml_cmp >= 0) {                      /* old entry is lower      */
     goto p_rpi_pool_36;                    /* check next INETA TUN    */
   }
   adsl_ineta_temp_1_w3 = adsl_ineta_temp_1_w2;  /* save this entry    */

   p_rpi_pool_36:                           /* check next INETA TUN    */
   adsl_ineta_temp_1_w2 = adsl_ineta_temp_1_w2->adsc_next;  /* get next in chain temporary INETAs */
   if (adsl_ineta_temp_1_w2) goto p_rpi_pool_32;  /* check INETA TUN   */
   if (adsl_ineta_temp_1_w3 == NULL) {      /* no matching entry found */
     iml_ign_pool += m_ineta_op_diff( adsl_ineta_temp_1_w1->chrc_ineta_end,
                                      adsl_ineta_temp_1_w1->chrc_ineta_start,
                                      adsl_ineta_temp_1_w1->usc_length )
                       + 1;
     goto p_rpi_pool_20;                    /* get next INETAs for pool */
   }
   memcpy( &dsl_ineta_temp_1_l, adsl_ineta_temp_1_w1, sizeof(struct dsd_ineta_temp_1) );  /* copy temporary data */
   iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_start,
                     adsl_ineta_temp_1_w3->chrc_ineta_start,
                     dsl_ineta_temp_1_l.usc_length );
   if (iml_cmp < 0) {                       /* part not in TUN INETAs  */
     iml_ign_pool += m_ineta_op_diff( adsl_ineta_temp_1_w3->chrc_ineta_start,
                                      dsl_ineta_temp_1_l.chrc_ineta_start,
                                      dsl_ineta_temp_1_l.usc_length );
     memcpy( dsl_ineta_temp_1_l.chrc_ineta_start,
             adsl_ineta_temp_1_w3->chrc_ineta_start,
             dsl_ineta_temp_1_l.usc_length );
   }
   bol_pool_compl = TRUE;                   /* pool entries have been processed */
   iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_end,
                     adsl_ineta_temp_1_w3->chrc_ineta_end,
                     dsl_ineta_temp_1_l.usc_length );
   if (iml_cmp > 0) {                       /* pool entry higher TUN entry */
     memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
             adsl_ineta_temp_1_w3->chrc_ineta_end,
             dsl_ineta_temp_1_l.usc_length );
     memcpy( adsl_ineta_temp_1_w1->chrc_ineta_start,
             adsl_ineta_temp_1_w3->chrc_ineta_end,
             dsl_ineta_temp_1_l.usc_length );
     m_ineta_op_inc( adsl_ineta_temp_1_w1->chrc_ineta_start,
                     dsl_ineta_temp_1_l.usc_length );
     bol_pool_compl = FALSE;                /* pool entries have not been processed */
   }

   p_rpi_pool_40:                           /* entry in TUN INETA      */
   if (iml2 <= 0) {                         /* create new chunk        */
     if (   (adsl_ineta_temp_1_pool_last)   /* last entry does exist   */
         && (adsl_ineta_temp_1_pool_last->usc_family == iml1)) {  /* is same family */
       adsl_ineta_temp_1_pool_last->boc_last_in_chunk = TRUE;  /* this is last in chunk */
       iml_len_pool += sizeof(struct dsd_pool_ineta_1) + sizeof(void *) - 1;  /* space for chunk header */
       iml_len_pool &= 0 - sizeof(void *);  /* alignment               */
     }
     iml2 = MAX_INETA_POOL_ENTR;            /* maximum entries in one chunk */
   }
   if (adsl_ineta_temp_1_w1 == NULL) {      /* at end of chain         */
     if (iml1 == AF_INET) {                 /* first pass check IPV4   */
       iml1 = AF_INET6;                     /* second check IPV6       */
       adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
       goto p_rpi_pool_24;                  /* check INETA for pool    */
     }
     goto p_rpi_pool_80;                    /* pool has been created   */
   }
   iml3 = m_ineta_op_diff( dsl_ineta_temp_1_l.chrc_ineta_end,
                           dsl_ineta_temp_1_l.chrc_ineta_start,
                           dsl_ineta_temp_1_l.usc_length )
            + 1;
   if (iml3 > iml2) {                       /* more than in this chunk */
     memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
             dsl_ineta_temp_1_l.chrc_ineta_start,
             dsl_ineta_temp_1_l.usc_length );
     m_ineta_op_add( dsl_ineta_temp_1_l.chrc_ineta_end,
                     dsl_ineta_temp_1_l.usc_length,
                     iml2 - 1 );
     memcpy( adsl_ineta_temp_1_w1->chrc_ineta_start,
             dsl_ineta_temp_1_l.chrc_ineta_end,
             dsl_ineta_temp_1_l.usc_length );
     m_ineta_op_inc( adsl_ineta_temp_1_w1->chrc_ineta_start,
                     dsl_ineta_temp_1_l.usc_length );
     bol_pool_compl = FALSE;                /* pool entries have not been processed */
     iml3 = iml2;                           /* only this number of INETAs */
   }
   dsl_ineta_temp_1_l.adsc_next = NULL;     /* clear chain field       */
   adsl_ineta_temp_1_w2 = (struct dsd_ineta_temp_1 *) malloc( sizeof(struct dsd_ineta_temp_1) );
   memcpy( adsl_ineta_temp_1_w2, &dsl_ineta_temp_1_l, sizeof(struct dsd_ineta_temp_1) );  /* copy temporary data */
   if (adsl_ineta_temp_1_pool_last == NULL) {  /* is first entry       */
     adsl_ineta_temp_1_pool_first = adsl_ineta_temp_1_w2;  /* set start of chain */
   } else {                                 /* append to chain         */
     adsl_ineta_temp_1_pool_last->adsc_next = adsl_ineta_temp_1_w2;
   }
   adsl_ineta_temp_1_pool_last = adsl_ineta_temp_1_w2;  /* set last in chain */
   iml2 -= iml3;                            /* subtract these entries  */
   iml_len_pool += sizeof(int) + dsl_ineta_temp_1_l.usc_length;  /* space for one entry */
   if (bol_pool_compl) {                    /* pool entries have been processed */
     goto p_rpi_pool_20;                    /* get next INETAs for pool */
   }
   goto p_rpi_pool_24;                      /* check INETA for pool    */

   p_rpi_pool_80:                           /* pool has been created   */
   iml1 = sizeof(struct dsd_raw_packet_if_conf) + iml_len_pool;
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
   while (adsl_ineta_temp_1_w1) {           /* loop over all defined INETAs */
     if (adsl_ineta_temp_1_w1->imc_func == DEF_XML_RPI_TUN_USE_INETA) {
       iml1 += sizeof(struct dsd_tun_ineta_1)
                 + 2 * adsl_ineta_temp_1_w1->usc_length;
#ifdef B100419
     } else if (adsl_ineta_temp_1_w1->imc_func == DEF_XML_RPI_PPP_INETA_POOL) {
       iml1 += sizeof(struct dsd_pool_ineta_1)
                 + sizeof(int) + adsl_ineta_temp_1_w1->usc_length
                 + sizeof(void *) - 1;
       iml1 &= 0 - sizeof(void *);
#endif
     }
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
   }
   adsl_port_temp_1_w1 = adsl_port_temp_1_ch;  /* get chain temporary ports */
   while (adsl_port_temp_1_w1) {            /* loop over all defined ports */
     if (adsl_port_temp_1_w1->boc_invalid == FALSE) {  /* entry is not invalid */
       iml1 += sizeof(struct dsd_appl_port_conf);
     }
     adsl_port_temp_1_w1 = adsl_port_temp_1_w1->adsc_next;  /* get next in chain */
   }
   iml1
     += (dsl_rpi_conf.imc_no_ta_ineta_ipv4 * 4  /* <TUN-adapter-ineta> IPV4 */
          + dsl_rpi_conf.imc_no_ta_ineta_ipv6 * 16  /* <TUN-adapter-ineta> IPV6 */
          + sizeof(void *) - 1)
        & (0 - sizeof(void *));

#define ADSL_RPI_CONF_G adsp_cs->adsc_loconf_1_fill->adsc_raw_packet_if_conf
   ADSL_RPI_CONF_G = (struct dsd_raw_packet_if_conf *) malloc( iml1 );
   memcpy( ADSL_RPI_CONF_G, &dsl_rpi_conf, sizeof(struct dsd_raw_packet_if_conf) );

   /* TUN-use-ineta sorted                                             */
   achl1 = (char *) (ADSL_RPI_CONF_G + 1);
   achl2 = (char *) &ADSL_RPI_CONF_G->adsc_tun_ineta_1;  /* for next pointer */

   p_rpi_main_72:                           /* get TUN-use-ineta sorted */
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
   adsl_ineta_temp_1_w2 = NULL;             /* element not set         */
   while (adsl_ineta_temp_1_w1) {           /* loop over all defined INETAs */
     if (   (adsl_ineta_temp_1_w1->imc_func == DEF_XML_RPI_TUN_USE_INETA)
         && (   (adsl_ineta_temp_1_w2 == NULL)
             || (   (adsl_ineta_temp_1_w1->usc_family == adsl_ineta_temp_1_w2->usc_family)
                 && (memcmp( adsl_ineta_temp_1_w1->chrc_ineta_start,
                             adsl_ineta_temp_1_w2->chrc_ineta_start,
                             adsl_ineta_temp_1_w2->usc_length )
                       < 0)))) {
       adsl_ineta_temp_1_w2 = adsl_ineta_temp_1_w1;  /* take this entry */
     }
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
   }
   if (adsl_ineta_temp_1_w2 == NULL) {      /* element not set         */
     goto p_rpi_main_84;                    /* get PPP-ineta-pool      */
   }
   adsl_ineta_temp_1_w2->imc_func = -1;     /* mark entry as processed */
   memcpy( dsl_ineta_sret_work_1.chrc_ineta,
           adsl_ineta_temp_1_w2->chrc_ineta_end,
           adsl_ineta_temp_1_w2->usc_length );

   p_rpi_main_76:                           /* search TUN-use-ineta following */
   m_ineta_op_inc( dsl_ineta_sret_work_1.chrc_ineta,
                   adsl_ineta_temp_1_w2->usc_length );
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get chain temporary INETAs */
   while (adsl_ineta_temp_1_w1) {           /* loop over all defined INETAs */
     if (   (adsl_ineta_temp_1_w1->imc_func == DEF_XML_RPI_TUN_USE_INETA)
         && (adsl_ineta_temp_1_w1->usc_family == adsl_ineta_temp_1_w1->usc_family)
         && (!memcmp( adsl_ineta_temp_1_w1->chrc_ineta_start,
                      dsl_ineta_sret_work_1.chrc_ineta,
                      adsl_ineta_temp_1_w1->usc_length ))) {
       memcpy( dsl_ineta_sret_work_1.chrc_ineta,
               adsl_ineta_temp_1_w1->chrc_ineta_end,
               adsl_ineta_temp_1_w1->usc_length );
       adsl_ineta_temp_1_w1->imc_func = -1;  /* mark entry as processed */
       goto p_rpi_main_76;                  /* search TUN-use-ineta following */

     }
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
   }

   /* compute number of INETAs                                         */
   iml1 = m_ineta_op_diff( dsl_ineta_sret_work_1.chrc_ineta,
                           adsl_ineta_temp_1_w2->chrc_ineta_start,
                           adsl_ineta_temp_1_w2->usc_length );
   if (iml1 < 0) {                          /* differenc to high       */
     iml1 = MAX_INETA_IN_CHUNK;             /* maximum number of INETAs in one chunk */
   }
   /* compute ineta-end                                                */
   m_ineta_op_dec( dsl_ineta_sret_work_1.chrc_ineta,
                   adsl_ineta_temp_1_w2->usc_length );
#define ADSL_TUN_INETA_1_G ((struct dsd_tun_ineta_1 *) achl1)
   memset( achl1, 0, sizeof(struct dsd_tun_ineta_1) );
   ADSL_TUN_INETA_1_G->usc_ineta_family = adsl_ineta_temp_1_w2->usc_family;  /* family IPV4 / IPV6 */
   ADSL_TUN_INETA_1_G->usc_ineta_length = adsl_ineta_temp_1_w2->usc_length;  /* length of following address */
   ADSL_TUN_INETA_1_G->imc_no_ineta = iml1;  /* number of INETAs       */
   memcpy( achl1 + sizeof(struct dsd_tun_ineta_1),
           adsl_ineta_temp_1_w2->chrc_ineta_start,
           adsl_ineta_temp_1_w2->usc_length );
   memcpy( achl1 + sizeof(struct dsd_tun_ineta_1) + adsl_ineta_temp_1_w2->usc_length,
           dsl_ineta_sret_work_1.chrc_ineta,
           adsl_ineta_temp_1_w2->usc_length );
   *((void **) achl2) = achl1;              /* set previous next pointer */
   achl2 = (char *) &ADSL_TUN_INETA_1_G->adsc_next;
   achl1 += sizeof(struct dsd_tun_ineta_1)
              + 2 * adsl_ineta_temp_1_w2->usc_length;
   goto p_rpi_main_72;                      /* get TUN-use-ineta sorted */
#undef ADSL_TUN_INETA_1_G

   p_rpi_main_84:                           /* get PPP-ineta-pool      */
   if (adsl_ineta_temp_1_pool_first == NULL) {  /* no pool INETAs      */
     goto p_rpi_main_92;                    /* end of PPP-ineta-pool   */
   }
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_pool_first;  /* get start of chain */
   achl2 = (char *) &ADSL_RPI_CONF_G->adsc_pool_ineta_1;  /* for next pointer */
   achl3 = NULL;                            /* no entry in chunk yet   */

   p_rpi_main_88:                           /* check PPP-ineta-pool    */
#define ADSL_POOL_INETA_1_G ((struct dsd_pool_ineta_1 *) achl1)
   if (achl3 == NULL) {                     /* no entry in chunk yet   */
     *((void **) achl2) = achl1;            /* set previous next pointer */
     memset( achl1, 0, sizeof(struct dsd_pool_ineta_1) );
     ADSL_POOL_INETA_1_G->usc_ineta_family = adsl_ineta_temp_1_w1->usc_family;  /* family IPV4 / IPV6 */
     ADSL_POOL_INETA_1_G->usc_ineta_length = adsl_ineta_temp_1_w1->usc_length;  /* length of following address */
     achl3 = (char *) (ADSL_POOL_INETA_1_G + 1);
     achl2 = (char *) &ADSL_POOL_INETA_1_G->adsc_next;
     bol1 = FALSE;
   }
   while (bol1) {                           /* entry filled before     */
     iml_cmp = memcmp( dsl_ineta_temp_1_l.chrc_ineta_end,
                       adsl_ineta_temp_1_w1->chrc_ineta_start,
                       adsl_ineta_temp_1_w1->usc_length );
     if (iml_cmp == 0) break;               /* add to old entry        */
     *((int *) achl3) = m_ineta_op_diff( dsl_ineta_temp_1_l.chrc_ineta_end,
                                         achl3 + sizeof(int),
                                         adsl_ineta_temp_1_w1->usc_length );
     achl3 += sizeof(int) + adsl_ineta_temp_1_w1->usc_length;
     ADSL_POOL_INETA_1_G->imc_no_ext++;     /* number of extensions    */
     bol1 = FALSE;                          /* create new entry        */
     break;
   }
   if (bol1 == FALSE) {                     /* create new entry        */
     memcpy( achl3 + sizeof(int),
             adsl_ineta_temp_1_w1->chrc_ineta_start,
             adsl_ineta_temp_1_w1->usc_length );
     bol1 = TRUE;                           /* entry filled now        */
   }
   memcpy( dsl_ineta_temp_1_l.chrc_ineta_end,
           adsl_ineta_temp_1_w1->chrc_ineta_end,
           adsl_ineta_temp_1_w1->usc_length );
   m_ineta_op_inc( dsl_ineta_temp_1_l.chrc_ineta_end,
                   adsl_ineta_temp_1_w1->usc_length );
   if (adsl_ineta_temp_1_w1->boc_last_in_chunk) {  /* this is last in chunk */
     *((int *) achl3) = m_ineta_op_diff( dsl_ineta_temp_1_l.chrc_ineta_end,
                                         achl3 + sizeof(int),
                                         adsl_ineta_temp_1_w1->usc_length );
     achl3 += sizeof(int) + adsl_ineta_temp_1_w1->usc_length;
     ADSL_POOL_INETA_1_G->imc_no_ext++;     /* number of extensions    */
     iml1 = achl3 - achl1 + sizeof(void *) - 1;
     iml1 &= 0 - sizeof(void *);            /* alignment               */
     achl1 += iml1;                         /* end of this entry       */
     achl3 = NULL;                          /* no entry in chunk yet   */
   }
   adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_w1->adsc_next;  /* get next in chain */
   if (adsl_ineta_temp_1_w1) {              /* was not last entry      */
     goto p_rpi_main_88;                    /* check PPP-ineta-pool    */
   }
#undef ADSL_POOL_INETA_1_G

   p_rpi_main_92:                           /* end of PPP-ineta-pool   */
   if (adsl_port_temp_1_ch) {               /* check chain temporary ports */
#define ADSL_RPI_APF_G ((struct dsd_appl_port_conf *) achl1)
     ADSL_RPI_CONF_G->adsc_appl_port_conf = ADSL_RPI_APF_G;  /* configured ports for appl */
     bol1 = FALSE;                          /* no entry yet            */
     while (TRUE) {                         /* loop to store all ports */
       adsl_port_temp_1_w1 = adsl_port_temp_1_ch;  /* get chain temporary ports */
       adsl_port_temp_1_w2 = NULL;          /* no port found yet       */
       do {                                 /* loop over all ports     */
         do {                               /* pseudo-loop             */
           if (adsl_port_temp_1_w1->boc_invalid) break;  /* entry is invalid */
           if (dsl_rpi_conf.boc_random_appl_port == FALSE) {  /* do not sort */
             adsl_port_temp_1_w2 = adsl_port_temp_1_w1;  /* save this entry */
             break;
           }
           if (   (adsl_port_temp_1_w2 == NULL)  /* no entry yet         */
               || (adsl_port_temp_1_w1->usc_port_start < adsl_port_temp_1_w2->usc_port_start)) {
             adsl_port_temp_1_w2 = adsl_port_temp_1_w1;  /* save this entry */
           }
         } while (FALSE);
         adsl_port_temp_1_w1 = adsl_port_temp_1_w1->adsc_next;  /* get next in chain */
       } while (adsl_port_temp_1_w1);
       if (   (adsl_port_temp_1_w2 == NULL)
           || (   (bol1)
               && (adsl_port_temp_1_w2->usc_port_start != iml1))) {
         ADSL_RPI_APF_G->usc_no_ports = iml1 - ADSL_RPI_APF_G->usc_port_start;  /* number of ports */
         ADSL_RPI_CONF_G->imc_no_ele_appl_port_conf++;  /* increment number of elements configured ports for appl */
         achl1 += sizeof(struct dsd_appl_port_conf *);
         bol1 = FALSE;                      /* make new entry          */
       }
       if (adsl_port_temp_1_w2 == NULL) break;
       if (bol1 == FALSE) {                 /* make new entry          */
         ADSL_RPI_APF_G->usc_port_start = adsl_port_temp_1_w2->usc_port_start;  /* port to start with */
         bol1 = TRUE;                       /* new entry generated     */
       }
       iml1 = adsl_port_temp_1_w2->usc_port_end + 1;  /* set end for later */
       adsl_port_temp_1_w2->boc_invalid = TRUE;  /* entry is invalid now */
     }
   }
   /* first INETAs IPV6 because of alignment                           */
   if (dsl_rpi_conf.imc_no_ta_ineta_ipv6 > 0) {  /* <TUN-adapter-ineta> IPV6 */
     ADSL_RPI_CONF_G->achc_ar_ta_ineta_ipv6 = achl1;  /* array <TUN-adapter-ineta> IPV6 */
     iml1 = 0;                              /* clear index             */
     while (iml1 < iml_len_temp_ineta) {    /* length array temporary INETAs filled */
       iml2 = (unsigned char) byrl_temp_ineta[ iml1 ];
       if (iml2 == 16) {                    /* same family IPV6        */
         memcpy( achl1, &byrl_temp_ineta[ iml1 + 1 ], 16 );
         achl1 += 16;
       }
       iml1 += 1 + iml2;                    /* end of this entry       */
     }
   }
   if (dsl_rpi_conf.imc_no_ta_ineta_ipv4 > 0) {  /* <TUN-adapter-ineta> IPV4 */
     ADSL_RPI_CONF_G->achc_ar_ta_ineta_ipv4 = achl1;  /* array <TUN-adapter-ineta> IPV4 */
     iml1 = 0;                              /* clear index             */
     while (iml1 < iml_len_temp_ineta) {    /* length array temporary INETAs filled */
       iml2 = (unsigned char) byrl_temp_ineta[ iml1 ];
       if (iml2 == 4) {                     /* same family IPV4        */
         memcpy( achl1, &byrl_temp_ineta[ iml1 + 1 ], 4 );
         achl1 += 4;
       }
       iml1 += 1 + iml2;                    /* end of this entry       */
     }
   }
// p_rpi_main_96:                           /* end of ports            */
   while (adsl_ineta_temp_1_ch) {           /* free temporary INETAs   */
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_ch;  /* get start of chain */
     adsl_ineta_temp_1_ch = adsl_ineta_temp_1_ch->adsc_next;  /* remove from chain */
     free( adsl_ineta_temp_1_w1 );          /* free memory             */
   }
   while (adsl_ineta_temp_1_pool_first) {   /* free entries of pool    */
     adsl_ineta_temp_1_w1 = adsl_ineta_temp_1_pool_first;  /* get start of chain */
     adsl_ineta_temp_1_pool_first = adsl_ineta_temp_1_pool_first->adsc_next;  /* remove from chain */
     free( adsl_ineta_temp_1_w1 );          /* free memory             */
   }
   while (adsl_port_temp_1_ch) {            /* free chain temporary ports */
     adsl_port_temp_1_w1 = adsl_port_temp_1_ch;  /* get chain temporary ports */
     adsl_port_temp_1_ch = adsl_port_temp_1_ch->adsc_next;  /* remove from chain */
     free( adsl_port_temp_1_w1 );           /* free memory             */
   }
   if (iml_ign_pool) {                      /* ignore some pool entries */
     m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC01nnnW Error %d INETAs defined in <PPP-ineta-pool> which are not in <TUN-use-ineta>",
                     iml_ign_pool );
   }
#ifndef HL_UNIX
   ADSL_RPI_CONF_G->awcc_driver_fn = L"hobtun.inf";  /* filename of driver for installation */
#endif
#ifdef D_DIAGNOSE_01
   m_check_rpi( ADSL_RPI_CONF_G );          /* check for errors        */
#endif
#undef ADSL_RPI_CONF_G
   return;
} /* end m_conf_raw_packet_if()                                        */

/** callback function, give message for open-listen                    */
static void m_msg_open_listen( void * vpp_userfld, char *achp_msg, int imp_msgno ) {
#define ADSL_CONF_SERV ((struct dsd_conf_serv *) vpp_userfld)
#ifdef TRACEHL1
   printf( "m_msg_open_listen called imp_msgno=%d achp_msg=%p - %s\n",
           imp_msgno, achp_msg, achp_msg );
#endif
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC%05dW Error element connection name \"%(ux)s\" %s",
                   imp_msgno + DEF_MSG_LISTEN, ADSL_CONF_SERV->awcc_name_value, achp_msg );
#undef ADSL_CONF_SERV
} /* end m_msg_open_listen()                                           */

#ifdef OLD_1112
static void m_msg_open_radius( void * vpp_userfld, char *achp_msg, int imp_msgno ) {
#define ADSL_RAENT_G ((struct dsd_radius_entry *) vpp_userfld)
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC%05dW Error section radius-server \"%(ux)s\" %s",
                   imp_msgno + DEF_MSG_RADIUS, ADSL_RAENT_G + 1, achp_msg );
#undef ADSL_RAENT_G
} /* end m_msg_open_radius()                                           */
#endif
#ifndef OLD_1112
/** callback-routine, message for open-radius                          */
static void m_msg_open_radius( void * vpp_userfld, char *achp_msg, int imp_msgno ) {
#define ADSL_RPM1_G ((struct dsd_radius_pass_msg_1 *) vpp_userfld)
   m_hlnew_printf( HLOG_XYZ1, "HWSPXMLC%05dW line=%d col=%d Error section radius-group \"%.*(u8)s\" radius-server \"%.*(u8)s\" %s",
                   imp_msgno + DEF_MSG_RADIUS,
                   ADSL_RPM1_G->imc_xml_lineno,  /* line number in XML configuration file */
                   ADSL_RPM1_G->imc_xml_col,  /* column in XML configuration file */
                   ADSL_RPM1_G->adsc_radius_group->imc_len_name, ADSL_RPM1_G->adsc_radius_group + 1,
                   ADSL_RPM1_G->adsc_radius_entry->imc_len_name, ADSL_RPM1_G->adsc_radius_entry + 1,
                   achp_msg );
#undef ADSL_RPM1_G
} /* end m_msg_open_radius()                                           */
#endif

#ifdef XYZ1
extern "C" struct dsd_service_conf_1 * m_service_vc_icap_http_conf( DOMNode *adsp_domnode,
                                             void * (* amp_call_dom) ( DOMNode *, ied_hlcldom_def ),   /* call DOM */
                                             HL_WCHAR * awcp_se_name ) {
   m_hlnew_printf( HLOG_XYZ1, "m_service_vc_icap_http_conf() l%05d adsp_domnode %p amp_call_dom %p name %(ux)s",
                   __LINE__, adsp_domnode, amp_call_dom, awcp_se_name );
   return NULL;
}
#endif
#ifdef D_DIAGNOSE_01
/** check configuration raw-packet-interface                           */
static void m_check_rpi( struct dsd_raw_packet_if_conf *adsp_rpi_conf ) {
   int        iml1, iml2, iml3;             /* working variables       */
   int        iml_rc;                       /* return code             */
   int        iml_soa_len;                  /* length of sockaddr      */
   char       *achl1, *achl2;               /* working variables       */
   struct dsd_tun_ineta_1 *adsl_tun_ineta_1_w1;  /* chain range of INETAs used by TUN */
   struct dsd_pool_ineta_1 *adsl_pool_ineta_1_w1;  /* chain of pools of INETAs */
   struct dsd_appl_port_conf *adsl_appl_port_conf_w1;  /* configured ports for appl */
   struct sockaddr_storage dsl_soa;         /* address information     */
   char       chrl_ineta_1[ 80 ];
   char       chrl_ineta_2[ 80 ];

   adsl_tun_ineta_1_w1 = adsp_rpi_conf->adsc_tun_ineta_1;  /* chain range of INETAs used by TUN */
   while (adsl_tun_ineta_1_w1) {            /* loop over all INETAs    */
     memset( &dsl_soa, 0, sizeof(struct sockaddr_storage) );  /* clear address information */
     iml_soa_len = 0;                       /* clear length of sockaddr */
     dsl_soa.ss_family = adsl_tun_ineta_1_w1->usc_ineta_family;  /* family IPV4 / IPV6 */
     switch (dsl_soa.ss_family) {
       case AF_INET:                        /* IPV4                    */
         memcpy( &((struct sockaddr_in *) &dsl_soa)->sin_addr,
                 adsl_tun_ineta_1_w1 + 1,
                 adsl_tun_ineta_1_w1->usc_ineta_length );  /* length of following address */
         iml_soa_len = sizeof(struct sockaddr_in);  /* set length of sockaddr */
         break;
       case AF_INET6:                       /* IPV6                    */
         memcpy( &((struct sockaddr_in6 *) &dsl_soa)->sin6_addr,
                 adsl_tun_ineta_1_w1 + 1,
                 adsl_tun_ineta_1_w1->usc_ineta_length );  /* length of following address */
         iml_soa_len = sizeof(struct sockaddr_in6);  /* set length of sockaddr */
         break;
     }
     iml_rc = getnameinfo( (SOCKADDR *) &dsl_soa, iml_soa_len,
                           chrl_ineta_1, sizeof(chrl_ineta_1), 0, 0, NI_NUMERICHOST );
     if (iml_rc) {                          /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI01W xsipgw08-conf.cpp l%05d getnameinfo() returned %d.",
                       __LINE__, iml_rc );
       strcpy( chrl_ineta_1, "XXX" );
     }
     memset( &dsl_soa, 0, sizeof(struct sockaddr_storage) );  /* clear address information */
     iml_soa_len = 0;                       /* clear length of sockaddr */
     dsl_soa.ss_family = adsl_tun_ineta_1_w1->usc_ineta_family;  /* family IPV4 / IPV6 */
     switch (dsl_soa.ss_family) {
       case AF_INET:                        /* IPV4                    */
         memcpy( &((struct sockaddr_in *) &dsl_soa)->sin_addr,
                 (char *) (adsl_tun_ineta_1_w1 + 1) + adsl_tun_ineta_1_w1->usc_ineta_length,
                 adsl_tun_ineta_1_w1->usc_ineta_length );  /* length of following address */
         iml_soa_len = sizeof(struct sockaddr_in);  /* set length of sockaddr */
         break;
       case AF_INET6:                       /* IPV6                    */
         memcpy( &((struct sockaddr_in6 *) &dsl_soa)->sin6_addr,
                 (char *) (adsl_tun_ineta_1_w1 + 1) + adsl_tun_ineta_1_w1->usc_ineta_length,
                 adsl_tun_ineta_1_w1->usc_ineta_length );  /* length of following address */
         iml_soa_len = sizeof(struct sockaddr_in6);  /* set length of sockaddr */
         break;
     }
     iml_rc = getnameinfo( (SOCKADDR *) &dsl_soa, iml_soa_len,
                           chrl_ineta_2, sizeof(chrl_ineta_2), 0, 0, NI_NUMERICHOST );
     if (iml_rc) {                          /* error occured           */
       m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI01W xsipgw08-conf.cpp l%05d getnameinfo() returned %d.",
                       __LINE__, iml_rc );
       strcpy( chrl_ineta_2, "XXX" );
     }
     m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI02T xsipgw08-conf.cpp l%05d adsl_tun_ineta_1=%p imc_no_ineta=%d usc_ineta_family=%d usc_ineta_length=%d INETA-1=%s INETA-2=%s.",
                     __LINE__,
                     adsl_tun_ineta_1_w1,
                     adsl_tun_ineta_1_w1->imc_no_ineta,  /* number of INETAs */
                     adsl_tun_ineta_1_w1->usc_ineta_family,  /* family IPV4 / IPV6 */
                     adsl_tun_ineta_1_w1->usc_ineta_length,  /* length of following address */
                     chrl_ineta_1,
                     chrl_ineta_2 );
     adsl_tun_ineta_1_w1 = adsl_tun_ineta_1_w1->adsc_next;  /* get next in chain */
   }
   adsl_pool_ineta_1_w1 = adsp_rpi_conf->adsc_pool_ineta_1;  /* chain of pools of INETAs */
   while (adsl_pool_ineta_1_w1) {           /* loop over all chunks of the pool */
     iml1 = adsl_pool_ineta_1_w1->imc_no_ext;  /* number of extensions */
     m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI03T xsipgw08-conf.cpp l%05d adsl_pool_ineta_1=%p imc_no_ext=%d usc_ineta_family=%d usc_ineta_length=%d.",
                     __LINE__,
                     adsl_pool_ineta_1_w1,
                     iml1,                  /* number of extensions    */
                     adsl_pool_ineta_1_w1->usc_ineta_family,  /* family IPV4 / IPV6 */
                     adsl_pool_ineta_1_w1->usc_ineta_length );  /* length of following address */
     achl1 = (char *) (adsl_pool_ineta_1_w1 + 1);  /* here first entry */
     while (iml1 > 0) {                     /* loop over all entries of this chunk */
       memset( &dsl_soa, 0, sizeof(struct sockaddr_storage) );  /* clear address information */
       iml_soa_len = 0;                     /* clear length of sockaddr */
       dsl_soa.ss_family = adsl_pool_ineta_1_w1->usc_ineta_family;  /* family IPV4 / IPV6 */
       switch (dsl_soa.ss_family) {
         case AF_INET:                      /* IPV4                    */
           memcpy( &((struct sockaddr_in *) &dsl_soa)->sin_addr,
                   achl1 + sizeof(int),
                   adsl_pool_ineta_1_w1->usc_ineta_length );  /* length of following address */
           iml_soa_len = sizeof(struct sockaddr_in);  /* set length of sockaddr */
           break;
         case AF_INET6:                     /* IPV6                    */
           memcpy( &((struct sockaddr_in6 *) &dsl_soa)->sin6_addr,
                   achl1 + sizeof(int),
                   adsl_pool_ineta_1_w1->usc_ineta_length );  /* length of following address */
           iml_soa_len = sizeof(struct sockaddr_in6);  /* set length of sockaddr */
           break;
       }
       iml_rc = getnameinfo( (SOCKADDR *) &dsl_soa, iml_soa_len,
                             chrl_ineta_1, sizeof(chrl_ineta_1), 0, 0, NI_NUMERICHOST );
       if (iml_rc) {                        /* error occured           */
         m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI01W xsipgw08-conf.cpp l%05d getnameinfo() returned %d.",
                         __LINE__, iml_rc );
         strcpy( chrl_ineta_1, "XXX" );
       }
       m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI04T xsipgw08-conf.cpp l%05d addr=%p entries=%d INETA=%s.",
                       __LINE__,
                       achl1,
                       *((int *) achl1),
                       chrl_ineta_1 );
       iml1--;                              /* decrement index         */
       achl1 += sizeof(int) + adsl_pool_ineta_1_w1->usc_ineta_length;  /* length of following address */
     }
     adsl_pool_ineta_1_w1 = adsl_pool_ineta_1_w1->adsc_next;  /* get next in chain */
   }
   adsl_appl_port_conf_w1 = adsp_rpi_conf->adsc_appl_port_conf;  /* configured ports for appl */
   iml1 = adsp_rpi_conf->imc_no_ele_appl_port_conf;  /* number of elements configured ports for appl */
   while (iml1 > 0) {                       /* loop over all configured ports */
     m_hlnew_printf( HLOG_XYZ1, "HWSPDIAGRPI05T xsipgw08-conf.cpp l%05d adsl_appl_port_conf_w1=%p usc_port_start=%d usc_no_ports=%d.",
                     __LINE__,
                     adsl_appl_port_conf_w1,
                     adsl_appl_port_conf_w1->usc_port_start,  /* port to start with */
                     adsl_appl_port_conf_w1->usc_no_ports );  /* number of ports */
     iml1--;                                /* decrement index         */
     adsl_appl_port_conf_w1++;              /* next structured ports   */
   }
} /* end m_check_rpi()                                                 */
#endif
#ifdef INCL_TEST_RPC
static char chrs_test_rpc_group_name[] = "RPC-TEST";
static char chrs_test_rpc_group_comment[] = "comment of RPC-TEST";
static char chrs_test_rpc_group_account[] = "bite";
//static char chrs_test_rpc_server_name[] = "server-of-RPC-TEST";
static char chrs_test_rpc_server_name[] = "DC1";
static char chrs_test_rpc_server_comment[] = "comment of server-of-RPC-TEST";
static unsigned char ucrs_test_rpc_target_ineta[] = {
   1, 0, 0, 0,
   16, 0, 0, 0,
   (unsigned char) AF_INET, 0, 4, 0,
   172, 22, 13, 1                           /* INETA of MS Active Directory - dc1.hobtest03.local */
};

static void m_test_rpc_gen( struct dsd_conf_serv *adsp_cs ) {
   struct dsd_rpc_group *adsl_rpc_group;    /* RPC group               */

   adsl_rpc_group = (struct dsd_rpc_group *) malloc( sizeof(struct dsd_rpc_group) + sizeof(struct dsd_rpc_server) );
   memset( adsl_rpc_group, 0, sizeof(struct dsd_rpc_group) + sizeof(struct dsd_rpc_server) );
#define ADSL_RPC_SERVER_G ((struct dsd_rpc_server *) (adsl_rpc_group + 1))
   adsl_rpc_group->adsc_rpc_server_ch = ADSL_RPC_SERVER_G;  /* chain of RPC servers */
   adsl_rpc_group->dsc_ucs_group_name.ac_str = chrs_test_rpc_group_name;  /* address of string */
   adsl_rpc_group->dsc_ucs_group_name.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_group_name.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_comment.ac_str = chrs_test_rpc_group_comment;  /* address of string */
   adsl_rpc_group->dsc_ucs_comment.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_comment.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_account.ac_str = chrs_test_rpc_group_account;  /* address of string */
   adsl_rpc_group->dsc_ucs_account.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_account.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_domain.ac_str = "HOBTEST03";  /* address of string */
   adsl_rpc_group->dsc_ucs_domain.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_domain.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_net_domain.ac_str = "HOBTEST03.local";  /* address of string */
   adsl_rpc_group->dsc_ucs_net_domain.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_net_domain.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_userid.ac_str = "prog01";  /* address of string */
   adsl_rpc_group->dsc_ucs_userid.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_userid.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->dsc_ucs_password.ac_str = "p123p123";  /* address of string */
   adsl_rpc_group->dsc_ucs_password.imc_len_str = -1;  /* length string in elements */
   adsl_rpc_group->dsc_ucs_password.iec_chs_str = ied_chs_utf_8;  /* character set string */
   adsl_rpc_group->imc_retry_after_error = 5 * 60;  /* configured time retry after error seconds */
   ADSL_RPC_SERVER_G->adsc_rpc_group = adsl_rpc_group;  /* belongs to RPC group */
   ADSL_RPC_SERVER_G->dsc_ucs_server_name.ac_str = chrs_test_rpc_server_name;  /* address of string */
   ADSL_RPC_SERVER_G->dsc_ucs_server_name.imc_len_str = -1;  /* length string in elements */
   ADSL_RPC_SERVER_G->dsc_ucs_server_name.iec_chs_str = ied_chs_utf_8;  /* character set string */
   ADSL_RPC_SERVER_G->dsc_ucs_comment.ac_str = chrs_test_rpc_server_comment;  /* address of string */
   ADSL_RPC_SERVER_G->dsc_ucs_comment.imc_len_str = -1;  /* length string in elements */
   ADSL_RPC_SERVER_G->dsc_ucs_comment.iec_chs_str = ied_chs_utf_8;  /* character set string */
   ADSL_RPC_SERVER_G->dsc_ucs_target_ineta.ac_str = "dc1.hobtest03.local";  /* address of string */
   ADSL_RPC_SERVER_G->dsc_ucs_target_ineta.imc_len_str = -1;  /* length string in elements */
   ADSL_RPC_SERVER_G->dsc_ucs_target_ineta.iec_chs_str = ied_chs_utf_8;  /* character set string */
// struct dsd_bind_ineta_1 dsc_bind_multih;  /* for bind multihomed    */
   ADSL_RPC_SERVER_G->adsc_target_ineta = (struct dsd_target_ineta_1 *) ucrs_test_rpc_target_ineta;  /* INETA of RPC server */
// ??? 135
// ADSL_RPC_SERVER_G->imc_port = 4747;      /* port of RPC server      */
   ADSL_RPC_SERVER_G->imc_port = 445;       /* port of RPC server - SMB2 */
   ADSL_RPC_SERVER_G->imc_timeout_msec = 30 * 1000;  /* timeout in milliseconds */
// int        imc_epoch_locked;             /* epoch RPC server locked until */
#undef ADSL_RPC_SERVER_G
   adsp_cs->adsc_loconf_1_fill->adsc_rpc_group_ch = adsl_rpc_group;  /* chain of RPC groups */
} /* end m_test_rpc_gen()                                              */
#endif
