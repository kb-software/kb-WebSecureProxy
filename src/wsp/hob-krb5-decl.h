/* File generated by merging the following files:
 * hob-krb5-decl-globals.h
 * hob-krb5-additional-decl.h
 */
#ifndef __HOB_KRB5_DECL
#define __HOB_KRB5_DECL
#ifdef _WIN32
#pragma once
#endif

#include <stddef.h>
#include "hob-krb5-defines.h"
#include "krb5-types.h"
#ifndef __GLOBAL_U_STATIC_VAR_H
#define __GLOBAL_U_STATIC_VAR_H __GLOBAL_U_STATIC_VAR_H

struct dsd_global_and_static;
//#include <setjmp.h>
#include <config.h>

#ifndef HAVE_CONFIG_H
#define HAVE_CONFIG_H
#endif
#define BUILD_KRB5_LIB

#include "krb5_locl.h"

#include <stdio.h>
#undef CRYPTO_DEBUG

struct key_data {
    krb5_keyblock *key;
    krb5_data *schedule;
};
struct salt_type {
    krb5_salttype type;
    const char *name;
    krb5_error_code( *string_to_key )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, krb5_enctype, krb5_data,
                                       krb5_salt, krb5_data, krb5_keyblock* );
};
struct key_type {
    krb5_keytype type; /* XXX */
    const char *name;
    size_t bits;
    size_t size;
    size_t minsize;
    size_t schedule_size;
#if 0
    krb5_enctype best_etype;
#endif
    void ( *random_key )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, krb5_keyblock* );
    void ( *schedule )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, struct key_data *, const void * );
    struct salt_type *string_to_key;
    void ( *random_to_key )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, krb5_keyblock*, const void*, size_t );
    krb5_error_code( *get_params )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, const krb5_data *,
                                    void **, krb5_data * );
    krb5_error_code( *set_params )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context, const void *,
                                    const krb5_data *, krb5_data * );
};
struct checksum_type {
    krb5_cksumtype type;
    const char *name;
    size_t blocksize;
    size_t checksumsize;
    unsigned flags;
    void ( *checksum )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                        struct key_data *key,
                        const void *buf, size_t len,
                        unsigned usage,
                        Checksum *csum );
    krb5_error_code( *verify )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                                struct key_data *key,
                                const void *buf, size_t len,
                                unsigned usage,
                                Checksum *csum );
};
struct encryption_type {
    krb5_enctype type;
    const char *name;
    heim_oid *oid;
    size_t blocksize;
    size_t padsize;
    size_t confoundersize;
    struct key_type *keytype;
    struct checksum_type *checksum;
    struct checksum_type *keyed_checksum;
    unsigned flags;
    krb5_error_code( *encrypt )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                                 struct key_data *key,
                                 void *data, size_t len,
                                 krb5_boolean encrypt,
                                 int usage,
                                 void *ivec );
};
struct krb5_aes_schedule {
    ds_aes_key ekey;
    ds_aes_key dkey;
};
#undef HAVE_CONFIG_H
#undef BUILD_KRB5_LIB

struct pa_info_data {
    krb5_enctype etype;
    krb5_salt salt;
    krb5_data *s2kparams;
};
struct pa_info {
    krb5_preauthtype type;
    struct pa_info_data *( *salt_info )( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context,
                                         const krb5_principal,
                                         const AS_REQ *,
                                         struct pa_info_data *,
                                         heim_octet_string * );
};

struct dsd_s_file_status {
    FILE * a_file_pt;
    int im_status;
};
typedef struct dsd_s_file_status dsd_s_file_status;

/*keeps pointers to memory areas for tracing*/
struct dsd_memory_traces {
    const void ** aa_memory_area;     /*pointer to memory areas*/
    int* ain_mem_len;           /*length of the memory areas*/
    char** aach_mem_names;      /*names of the memory areas*/
    int in_mem_count;           /*number of memory areas*/
};

#include <krb5-types.h>
typedef u_int8_t    u8;
typedef u_int16_t   u16;
typedef u_int32_t   u32;

#undef HAVE_CONFIG_H
#undef BUILD_KRB5_LIB


struct dsd_global_and_static {
    dsd_s_file_status * ads_array_file_pt ;
    int * aim_array_free_posi ;
    int im_counter_array_file_pt ;
    int im_counter_array_free_posi ;
    void ** aa_temp_memory_area;
    int _krb5_AES_string_to_default_iterator ;
    //char* error_string ;
    krb5_context gssapi_krb5_context ;
    unsigned char counter_meth_static[8];
    DES_key_schedule schedule_meth_static;
    int initialized_meth_static;
    int im_fake_errno_meth_static;
    int im_control_1;
    int im_control_2;
    int im_control_3;
    int im_control_4;
    int im_control_5;
    void * a_renew_TGT;
    int im_length_renew_TGT;
    void ** aa_memory_area;
    void * a_tracer;
    int in_trace_lvl;
    void * a_ip_address_context;
    krb5_error_code im_re_error_code;
    void * a_generic_obj;
    DES_key_schedule sequence_seed;
    u_int32_t sequence_index[2];
    int initialized;
    void* a_krb5_auth_hash;
};

struct krb5_tracer;
#endif
#ifndef __HOB_KRB5_ADDITIONAL_DECL
#define __HOB_KRB5_ADDITIONAL_DECL
int *m__errno_location_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P );
int *m__h_errno_location_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P );
void * m_aux_stor_realloc( void **aap_anchor, void *ap_old, int implen );
void m_aux_stor_free( void **aap_anchor, void *ap_free );
void * m_aux_stor_alloc( void **aap_anchor, int implen );
void m_aux_stor_end( void **aap_anchor );
void m_aux_stor_start( void **aap_anchor );

char * m_strdup_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, const char * ach_org );
time_t m_timegm_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, struct tm * ads_tm );
size_t m_strlcat_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, char *ach_dst, const char *ach_src, size_t im_dst_sz );
size_t m_strlcpy_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, char *ach_dst, const char *ach_src, size_t im_dst_sz );
int m_gettimeofday_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, struct timeval *ads_tp, void *a_ignore );
char* m_strerror_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, int im_eno );
void m_end_exit_abort_hl( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, char ch_art, int im_ret );
const char*
fcc_get_name( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id )
;
krb5_error_code
fcc_resolve( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id, const char *res )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_initialize( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_principal primary_principal )
;
krb5_error_code
fcc_close( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
           krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_store_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_creds *creds )
;
krb5_error_code
fcc_get_principal( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                   krb5_ccache id,
                   krb5_principal *principal )
;
krb5_error_code
fcc_get_first( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_get_next( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id,
              krb5_cc_cursor *cursor,
              krb5_creds *creds )
;
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor );
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_set_flags( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_flags flags )
;
krb5_error_code
fcc_get_version( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id )
;
int m_enter_cs();
int m_leave_cs();
void m_krb5_trace( struct krb5_tracer* adsp_tracer,
                   char chp_trace_lvl_tag,
                   int inp_msg_nr,
                   struct dsd_memory_traces* adsp_trace,
                   void**  aap_temp_memory,
                   const char* achp_msg,
                   ... );
void
SHA1_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               struct key_data *key,
               const void *data,
               size_t len,
               unsigned usage,
               Checksum *C );
void m_krb5_sha1( const void *data, size_t len, void *dest, void **aa_temp_memory );
char* m_krb5_strcat( void** aa_temp_memory, char* achl_dest, char* achl_src );
void m_krb5_trace_memcat( void** aa_temp_memory,
                          struct dsd_memory_traces* dsp_trace,
                          void* ap_memory_area,
                          int inp_mem_length,
                          const char* achp_mem_name );
struct dsd_memory_traces* m_init_krb5_mem_trace( void** aa_temp_memory );
void m_free_krb5_mem_trace( void** aa_temp_memory, struct dsd_memory_traces* adsp_trace );
char* m_krb5_principalname2string( void** aa_temp_memory, char* achp_dest, struct PrincipalName* ads_src );
krb5_ssize_t KRB5_LIB_FUNCTION
_krb5_put_int( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, void *buffer, unsigned long value, size_t size );
krb5_ssize_t KRB5_LIB_FUNCTION
_krb5_get_int( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, void *buffer, unsigned long *value, size_t size );
int m_hl_enckey(struct dsd_global_and_static * , krb5_context , krb5_ap_req *, krb5_principal, krb5_keyblock **);
typedef char RC4_KEY[RC4_STATE_SIZE];
typedef int MD5_CTX[MD5_ARRAY_SIZE];
typedef int SHA1_CTX[SHA_ARRAY_SIZE];
typedef int MD4_CTX[MD4_ARRAY_SIZE];

typedef struct dsd_heimdal_keytab_entry {
    /** Length of the principal string */
    int inc_princ_len;
    /** Principal name */
    char * achc_princ_name;
    /** Number of keys in this entry */
    int inc_key_count;
    /** Pointer to the list of encryption keys. */
    EncryptionKey* asdc_key_list;
    
    /** Valid until timestamp. 0 for none available. */
    int inc_valid_until;
    /** pw expired timestamp. 0 for none available. */
    int inc_pw_expired;
    /** Ticket max lifetime. */
    int inc_tkt_lifetime;
    /** Ticket renew. */
    int inc_renew_life;
    /** HDB attributes. */
    int inc_attributes;
    /** Pointer to next entry */
    struct dsd_heimdal_keytab_entry* adsc_next_entry;
} dsd_heimdal_keytab_entry_t;

void
DES3_random_key( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_keyblock *key )
;
void
DES3_schedule( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               struct key_data *key,
               const void *params )
;
krb5_error_code
DES3_string_to_key( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                    krb5_enctype enctype,
                    krb5_data password,
                    krb5_salt salt,
                    krb5_data opaque,
                    krb5_keyblock *key )
;
krb5_error_code
DES3_string_to_key_derived( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                            krb5_enctype enctype,
                            krb5_data password,
                            krb5_salt salt,
                            krb5_data opaque,
                            krb5_keyblock *key )
;
void
DES3_random_to_key( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                    krb5_keyblock *key,
                    const void *data,
                    size_t size )
;
void
ARCFOUR_schedule( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                  struct key_data *kd,
                  const void *params )
;
krb5_error_code
ARCFOUR_string_to_key( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                       krb5_enctype enctype,
                       krb5_data password,
                       krb5_salt salt,
                       krb5_data opaque,
                       krb5_keyblock *key )
;
krb5_error_code
AES_string_to_key( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                   krb5_enctype enctype,
                   krb5_data password,
                   krb5_salt salt,
                   krb5_data opaque,
                   krb5_keyblock *key )
;
void
AES_schedule( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              struct key_data *kd,
              const void *params )
;
void
NONE_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               struct key_data *key,
               const void *data,
               size_t len,
               unsigned usage,
               Checksum *C )
;
void
CRC32_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                struct key_data *key,
                const void *data,
                size_t len,
                unsigned usage,
                Checksum *C )
;
void
RSA_MD4_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                  struct key_data *key,
                  const void *data,
                  size_t len,
                  unsigned usage,
                  Checksum *C )
;
void
RSA_MD4_DES_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                      struct key_data *key,
                      const void *data,
                      size_t len,
                      unsigned usage,
                      Checksum *cksum )
;
krb5_error_code
RSA_MD4_DES_verify( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                    struct key_data *key,
                    const void *data,
                    size_t len,
                    unsigned usage,
                    Checksum *C )
;
void
RSA_MD5_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                  struct key_data *key,
                  const void *data,
                  size_t len,
                  unsigned usage,
                  Checksum *C )
;
void
RSA_MD5_DES_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                      struct key_data *key,
                      const void *data,
                      size_t len,
                      unsigned usage,
                      Checksum *C )
;
krb5_error_code
RSA_MD5_DES_verify( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                    struct key_data *key,
                    const void *data,
                    size_t len,
                    unsigned usage,
                    Checksum *C )
;
void
RSA_MD5_DES3_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                       struct key_data *key,
                       const void *data,
                       size_t len,
                       unsigned usage,
                       Checksum *C )
;
krb5_error_code
RSA_MD5_DES3_verify( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                     struct key_data *key,
                     const void *data,
                     size_t len,
                     unsigned usage,
                     Checksum *C )
;
krb5_error_code hmac( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                      struct checksum_type *cm,
                      const void *data,
                      size_t len,
                      unsigned usage,
                      struct key_data *keyblock,
                      Checksum *result );
void
SP_HMAC_SHA1_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                       struct key_data *key,
                       const void *data,
                       size_t len,
                       unsigned usage,
                       Checksum *result )
;
void
HMAC_MD5_checksum( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                   struct key_data *key,
                   const void *data,
                   size_t len,
                   unsigned usage,
                   Checksum *result )
;
void
HMAC_MD5_checksum_enc( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                       struct key_data *key,
                       const void *data,
                       size_t len,
                       unsigned usage,
                       Checksum *result )
;
krb5_error_code
NULL_encrypt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              struct key_data *key,
              void *data,
              size_t len,
              krb5_boolean encrypt,
              int usage,
              void *ivec )
;
krb5_error_code
DES3_CBC_encrypt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                  struct key_data *key,
                  void *data,
                  size_t len,
                  krb5_boolean encrypt,
                  int usage,
                  void *ivec )
;
krb5_error_code
AES_CTS_encrypt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 struct key_data *key,
                 void *data,
                 size_t len,
                 krb5_boolean encrypt,
                 int usage,
                 void *ivec )
;
krb5_error_code
AES_CBC_encrypt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 struct key_data *key,
                 void *data,
                 size_t len,
                 krb5_boolean encrypt,
                 int usage,
                 void *ivec )
;
krb5_error_code
ARCFOUR_encrypt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 struct key_data *key,
                 void *data,
                 size_t len,
                 krb5_boolean encrypt,
                 int usage,
                 void *ivec )
;
const char*
fcc_get_name( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id )
;
krb5_error_code
fcc_resolve( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id, const char *res )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_initialize( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_principal primary_principal )
;
krb5_error_code
fcc_close( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
           krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_store_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_creds *creds )
;
krb5_error_code
fcc_get_principal( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                   krb5_ccache id,
                   krb5_principal *principal )
;
krb5_error_code
fcc_get_first( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_get_next( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id,
              krb5_cc_cursor *cursor,
              krb5_creds *creds )
;
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor );
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_set_flags( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_flags flags )
;
krb5_error_code
fcc_get_version( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id )
;
const char*
fcc_get_name( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id )
;
krb5_error_code
fcc_resolve( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id, const char *res )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_gen_new( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context, krb5_ccache *id )
;
krb5_error_code
fcc_initialize( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_principal primary_principal )
;
krb5_error_code
fcc_close( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
           krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_destroy( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id )
;
krb5_error_code
fcc_store_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                krb5_ccache id,
                krb5_creds *creds )
;
krb5_error_code
fcc_get_principal( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                   krb5_ccache id,
                   krb5_principal *principal )
;
krb5_error_code
fcc_get_first( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_get_next( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
              krb5_ccache id,
              krb5_cc_cursor *cursor,
              krb5_creds *creds )
;
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor );
krb5_error_code
fcc_end_get( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
             krb5_ccache id,
             krb5_cc_cursor *cursor )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_remove_cred( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id,
                 krb5_flags which,
                 krb5_creds *cred )
;
krb5_error_code
fcc_set_flags( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               krb5_ccache id,
               krb5_flags flags )
;
krb5_error_code
fcc_get_version( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                 krb5_ccache id )
;
struct pa_info_data *
pa_etype_info2( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                const krb5_principal client,
                const AS_REQ *asreq,
                struct pa_info_data *paid,
                heim_octet_string *data )
;
struct pa_info_data *
pa_etype_info( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
               const krb5_principal client,
               const AS_REQ *asreq,
               struct pa_info_data *paid,
               heim_octet_string *data )
;
struct pa_info_data *
pa_pw_or_afs3_salt( struct dsd_global_and_static * NAME_OF_MAIN_LOC_GLOB_P, krb5_context context,
                    const krb5_principal client,
                    const AS_REQ *asreq,
                    struct pa_info_data *paid,
                    heim_octet_string *data )
;

#endif
#endif //__HOB_KRB5_DECL
